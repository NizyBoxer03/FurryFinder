
furryfinder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080081f8  080081f8  000181f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008768  08008768  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08008768  08008768  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008768  08008768  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08008770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000208  08008978  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  08008978  00020ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdb1  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002585  00000000  00000000  0002ffe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00032568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00033450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196dc  00000000  00000000  00034240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110af  00000000  00000000  0004d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910bb  00000000  00000000  0005e9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efa86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a0  00000000  00000000  000efad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	080081dc 	.word	0x080081dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	080081dc 	.word	0x080081dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2lz>:
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	460c      	mov	r4, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2300      	movs	r3, #0
 8000b22:	4628      	mov	r0, r5
 8000b24:	4621      	mov	r1, r4
 8000b26:	f7ff ff49 	bl	80009bc <__aeabi_dcmplt>
 8000b2a:	b928      	cbnz	r0, 8000b38 <__aeabi_d2lz+0x20>
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	4621      	mov	r1, r4
 8000b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b34:	f000 b80a 	b.w	8000b4c <__aeabi_d2ulz>
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b3e:	f000 f805 	bl	8000b4c <__aeabi_d2ulz>
 8000b42:	4240      	negs	r0, r0
 8000b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b48:	bd38      	pop	{r3, r4, r5, pc}
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2ulz>:
 8000b4c:	b5d0      	push	{r4, r6, r7, lr}
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <__aeabi_d2ulz+0x34>)
 8000b52:	4606      	mov	r6, r0
 8000b54:	460f      	mov	r7, r1
 8000b56:	f7ff fcbf 	bl	80004d8 <__aeabi_dmul>
 8000b5a:	f7ff ff6d 	bl	8000a38 <__aeabi_d2uiz>
 8000b5e:	4604      	mov	r4, r0
 8000b60:	f7ff fc40 	bl	80003e4 <__aeabi_ui2d>
 8000b64:	2200      	movs	r2, #0
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <__aeabi_d2ulz+0x38>)
 8000b68:	f7ff fcb6 	bl	80004d8 <__aeabi_dmul>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	460b      	mov	r3, r1
 8000b70:	4630      	mov	r0, r6
 8000b72:	4639      	mov	r1, r7
 8000b74:	f7ff faf8 	bl	8000168 <__aeabi_dsub>
 8000b78:	f7ff ff5e 	bl	8000a38 <__aeabi_d2uiz>
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000b80:	3df00000 	.word	0x3df00000
 8000b84:	41f00000 	.word	0x41f00000

08000b88 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000b8c:	f000 fec0 	bl	8001910 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b90:	f000 f854 	bl	8000c3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b94:	f000 f9e2 	bl	8000f5c <MX_GPIO_Init>
	MX_DMA_Init();
 8000b98:	f000 f9aa 	bl	8000ef0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000b9c:	f000 f89e 	bl	8000cdc <MX_ADC1_Init>
	MX_TIM2_Init();
 8000ba0:	f000 f8da 	bl	8000d58 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000ba4:	f000 f926 	bl	8000df4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000ba8:	f000 f94e 	bl	8000e48 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000bac:	f000 f976 	bl	8000e9c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, data_rx1, BUF_SIZE);
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	4918      	ldr	r1, [pc, #96]	; (8000c18 <main+0x90>)
 8000bb6:	4819      	ldr	r0, [pc, #100]	; (8000c1c <main+0x94>)
 8000bb8:	f003 f88a 	bl	8003cd0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <main+0x98>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <main+0x98>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0204 	bic.w	r2, r2, #4
 8000bca:	601a      	str	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, data_rx2, 50);
 8000bcc:	2232      	movs	r2, #50	; 0x32
 8000bce:	4915      	ldr	r1, [pc, #84]	; (8000c24 <main+0x9c>)
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <main+0xa0>)
 8000bd2:	f003 f87d 	bl	8003cd0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <main+0xa4>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <main+0xa4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0204 	bic.w	r2, r2, #4
 8000be4:	601a      	str	r2, [r3, #0]

	SIM800L_Init();
 8000be6:	f000 fa55 	bl	8001094 <SIM800L_Init>
	SIM800L_CheckStatus();
 8000bea:	f000 fa7f 	bl	80010ec <SIM800L_CheckStatus>
	SIM800L_SMSConfig();
 8000bee:	f000 faa9 	bl	8001144 <SIM800L_SMSConfig>
	SIM800L_SendMessage();
 8000bf2:	f000 fad3 	bl	800119c <SIM800L_SendMessage>

	strcpy((char *) ATCommand, "AT+CPIN?\n\r");
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <main+0xa8>)
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <main+0xac>)
 8000bfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bfc:	c303      	stmia	r3!, {r0, r1}
 8000bfe:	801a      	strh	r2, [r3, #0]
 8000c00:	3302      	adds	r3, #2
 8000c02:	0c12      	lsrs	r2, r2, #16
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <main+0xb0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
		/* USER CODE BEGIN 3 */
		//HAL_UART_Transmit_DMA(&huart2, ATCommand, strlen((char*)ATCommand));

		memset(data_tx, '\0', 1);

		HAL_Delay(1000);
 8000c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c10:	f000 fee0 	bl	80019d4 <HAL_Delay>
		memset(data_tx, '\0', 1);
 8000c14:	e7f7      	b.n	8000c06 <main+0x7e>
 8000c16:	bf00      	nop
 8000c18:	20000698 	.word	0x20000698
 8000c1c:	2000029c 	.word	0x2000029c
 8000c20:	20000374 	.word	0x20000374
 8000c24:	20000498 	.word	0x20000498
 8000c28:	200002e4 	.word	0x200002e4
 8000c2c:	200003b8 	.word	0x200003b8
 8000c30:	20000484 	.word	0x20000484
 8000c34:	080081f8 	.word	0x080081f8
 8000c38:	20000898 	.word	0x20000898

08000c3c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c46:	2228      	movs	r2, #40	; 0x28
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 ffd8 	bl	8004c00 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 feec 	bl	8002a5c <HAL_RCC_OscConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x52>
	{
		Error_Handler();
 8000c8a:	f000 f9fd 	bl	8001088 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8e:	230f      	movs	r3, #15
 8000c90:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 f959 	bl	8002f60 <HAL_RCC_ClockConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 8000cb4:	f000 f9e8 	bl	8001088 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fada 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000cce:	f000 f9db 	bl	8001088 <Error_Handler>
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	; 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <MX_ADC1_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000d06:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d0a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000d1a:	f000 fe7f 	bl	8001a1c <HAL_ADC_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000d24:	f000 f9b0 	bl	8001088 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_ADC1_Init+0x74>)
 8000d3a:	f001 f819 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8000d44:	f000 f9a0 	bl	8001088 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000224 	.word	0x20000224
 8000d54:	40012400 	.word	0x40012400

08000d58 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10000;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d82:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 24000;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d8c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000d90:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000da0:	f002 fb22 	bl	80033e8 <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8000daa:	f000 f96d 	bl	8001088 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000dbc:	f002 fc6b 	bl	8003696 <HAL_TIM_ConfigClockSource>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8000dc6:	f000 f95f 	bl	8001088 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000dd8:	f002 fe4a 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000de2:	f000 f951 	bl	8001088 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000254 	.word	0x20000254

08000df4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <MX_USART1_UART_Init+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e04:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	f002 fe90 	bl	8003b50 <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000e36:	f000 f927 	bl	8001088 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000029c 	.word	0x2000029c
 8000e44:	40013800 	.word	0x40013800

08000e48 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <MX_USART2_UART_Init+0x50>)
 8000e50:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e58:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_USART2_UART_Init+0x4c>)
 8000e80:	f002 fe66 	bl	8003b50 <HAL_UART_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000e8a:	f000 f8fd 	bl	8001088 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200002e4 	.word	0x200002e4
 8000e98:	40004400 	.word	0x40004400

08000e9c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <MX_USART3_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ea8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eac:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_USART3_UART_Init+0x4c>)
 8000ed4:	f002 fe3c 	bl	8003b50 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000ede:	f000 f8d3 	bl	8001088 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000032c 	.word	0x2000032c
 8000eec:	40004800 	.word	0x40004800

08000ef0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_DMA_Init+0x68>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <MX_DMA_Init+0x68>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_DMA_Init+0x68>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	200c      	movs	r0, #12
 8000f14:	f001 f945 	bl	80021a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f18:	200c      	movs	r0, #12
 8000f1a:	f001 f95e 	bl	80021da <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200f      	movs	r0, #15
 8000f24:	f001 f93d 	bl	80021a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f001 f956 	bl	80021da <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2010      	movs	r0, #16
 8000f34:	f001 f935 	bl	80021a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f38:	2010      	movs	r0, #16
 8000f3a:	f001 f94e 	bl	80021da <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2011      	movs	r0, #17
 8000f44:	f001 f92d 	bl	80021a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f48:	2011      	movs	r0, #17
 8000f4a:	f001 f946 	bl	80021da <HAL_NVIC_EnableIRQ>

}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0320 	and.w	r3, r3, #32
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <MX_GPIO_Init+0x58>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a25      	ldr	r2, [pc, #148]	; (8001060 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11c      	bne.n	8001008 <HAL_UARTEx_RxEventCallback+0x50>
	{
		/* start the DMA again */
		char *term = strchr(data_rx1, '\n');
 8000fce:	210a      	movs	r1, #10
 8000fd0:	4824      	ldr	r0, [pc, #144]	; (8001064 <HAL_UARTEx_RxEventCallback+0xac>)
 8000fd2:	f004 f892 	bl	80050fa <strchr>
 8000fd6:	60f8      	str	r0, [r7, #12]

		//memcpy (data_tx, data_rx1, Size);

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) data_rx1, BUF_SIZE);
 8000fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fdc:	4921      	ldr	r1, [pc, #132]	; (8001064 <HAL_UARTEx_RxEventCallback+0xac>)
 8000fde:	4822      	ldr	r0, [pc, #136]	; (8001068 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000fe0:	f002 fe76 	bl	8003cd0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_UARTEx_RxEventCallback+0xb4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0204 	bic.w	r2, r2, #4
 8000ff2:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit_DMA(&huart3, data_tx, strlen((char*)data_tx)/*((uint32_t)term - (uint32_t)data_rx1 + 1)*/);
 8000ff4:	481e      	ldr	r0, [pc, #120]	; (8001070 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000ff6:	f7ff f8ab 	bl	8000150 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	461a      	mov	r2, r3
 8001000:	491b      	ldr	r1, [pc, #108]	; (8001070 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001002:	481c      	ldr	r0, [pc, #112]	; (8001074 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001004:	f002 fdf4 	bl	8003bf0 <HAL_UART_Transmit_DMA>

	}

	if (huart->Instance == USART2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <HAL_UARTEx_RxEventCallback+0xc0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d121      	bne.n	8001056 <HAL_UARTEx_RxEventCallback+0x9e>
	{
		/* start the DMA again */
		char *term = strchr(data_rx2, '\n');
 8001012:	210a      	movs	r1, #10
 8001014:	4819      	ldr	r0, [pc, #100]	; (800107c <HAL_UARTEx_RxEventCallback+0xc4>)
 8001016:	f004 f870 	bl	80050fa <strchr>
 800101a:	60b8      	str	r0, [r7, #8]
		memcpy (data_tx, data_rx2, Size);
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	461a      	mov	r2, r3
 8001020:	4916      	ldr	r1, [pc, #88]	; (800107c <HAL_UARTEx_RxEventCallback+0xc4>)
 8001022:	4813      	ldr	r0, [pc, #76]	; (8001070 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001024:	f003 fdde 	bl	8004be4 <memcpy>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) data_rx2, 50);
 8001028:	2232      	movs	r2, #50	; 0x32
 800102a:	4914      	ldr	r1, [pc, #80]	; (800107c <HAL_UARTEx_RxEventCallback+0xc4>)
 800102c:	4814      	ldr	r0, [pc, #80]	; (8001080 <HAL_UARTEx_RxEventCallback+0xc8>)
 800102e:	f002 fe4f 	bl	8003cd0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_UARTEx_RxEventCallback+0xcc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0204 	bic.w	r2, r2, #4
 8001040:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit_DMA(&huart3, data_tx, strlen((char*)data_tx)/*((uint32_t)term - (uint32_t)data_rx2 + 1)*/);
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001044:	f7ff f884 	bl	8000150 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001052:	f002 fdcd 	bl	8003bf0 <HAL_UART_Transmit_DMA>

	}
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013800 	.word	0x40013800
 8001064:	20000698 	.word	0x20000698
 8001068:	2000029c 	.word	0x2000029c
 800106c:	20000374 	.word	0x20000374
 8001070:	20000898 	.word	0x20000898
 8001074:	2000032c 	.word	0x2000032c
 8001078:	40004400 	.word	0x40004400
 800107c:	20000498 	.word	0x20000498
 8001080:	200002e4 	.word	0x200002e4
 8001084:	200003b8 	.word	0x200003b8

08001088 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <SIM800L_Init>:
    "AT+CSCA=\"+543200000001\"\n\r",
    "AT+CMGS=\"+5491123922468\"\n\r",
    "https://www.google.com/maps/place/-34.6171807,-58.3823728\x1A"
};

void SIM800L_Init() {
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; i++) {
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	e018      	b.n	80010d2 <SIM800L_Init+0x3e>
        HAL_UART_Transmit_DMA(&huart2, SIM800L_Commands[i], strlen((char*)SIM800L_Commands[i]));
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <SIM800L_Init+0x50>)
 80010a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <SIM800L_Init+0x50>)
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f84d 	bl	8000150 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	4621      	mov	r1, r4
 80010be:	480a      	ldr	r0, [pc, #40]	; (80010e8 <SIM800L_Init+0x54>)
 80010c0:	f002 fd96 	bl	8003bf0 <HAL_UART_Transmit_DMA>
        HAL_Delay(1000);
 80010c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c8:	f000 fc84 	bl	80019d4 <HAL_Delay>
    for (uint8_t i = 0; i < 4; i++) {
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	3301      	adds	r3, #1
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d9e3      	bls.n	80010a0 <SIM800L_Init+0xc>
    }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd90      	pop	{r4, r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000
 80010e8:	200002e4 	.word	0x200002e4

080010ec <SIM800L_CheckStatus>:

void SIM800L_CheckStatus() {
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
    for (uint8_t i = 4; i < 7; i++) {
 80010f2:	2304      	movs	r3, #4
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	e018      	b.n	800112a <SIM800L_CheckStatus+0x3e>
        HAL_UART_Transmit_DMA(&huart2, SIM800L_Commands[i], strlen((char*)SIM800L_Commands[i]));
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <SIM800L_CheckStatus+0x50>)
 80010fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <SIM800L_CheckStatus+0x50>)
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f821 	bl	8000150 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	b29b      	uxth	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	4621      	mov	r1, r4
 8001116:	480a      	ldr	r0, [pc, #40]	; (8001140 <SIM800L_CheckStatus+0x54>)
 8001118:	f002 fd6a 	bl	8003bf0 <HAL_UART_Transmit_DMA>
        HAL_Delay(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	f000 fc58 	bl	80019d4 <HAL_Delay>
    for (uint8_t i = 4; i < 7; i++) {
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	3301      	adds	r3, #1
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b06      	cmp	r3, #6
 800112e:	d9e3      	bls.n	80010f8 <SIM800L_CheckStatus+0xc>
    }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	20000000 	.word	0x20000000
 8001140:	200002e4 	.word	0x200002e4

08001144 <SIM800L_SMSConfig>:

void SIM800L_SMSConfig() {
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
    for (uint8_t i = 7; i < 8; i++) {
 800114a:	2307      	movs	r3, #7
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	e018      	b.n	8001182 <SIM800L_SMSConfig+0x3e>
        HAL_UART_Transmit_DMA(&huart2, SIM800L_Commands[i], strlen((char*)SIM800L_Commands[i]));
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <SIM800L_SMSConfig+0x50>)
 8001154:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <SIM800L_SMSConfig+0x50>)
 800115c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001160:	4618      	mov	r0, r3
 8001162:	f7fe fff5 	bl	8000150 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29b      	uxth	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	4621      	mov	r1, r4
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <SIM800L_SMSConfig+0x54>)
 8001170:	f002 fd3e 	bl	8003bf0 <HAL_UART_Transmit_DMA>
        HAL_Delay(1000);
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	f000 fc2c 	bl	80019d4 <HAL_Delay>
    for (uint8_t i = 7; i < 8; i++) {
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	3301      	adds	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b07      	cmp	r3, #7
 8001186:	d9e3      	bls.n	8001150 <SIM800L_SMSConfig+0xc>
    }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	200002e4 	.word	0x200002e4

0800119c <SIM800L_SendMessage>:

void SIM800L_SendMessage(){
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
    for (uint8_t i = 8; i < 10; i++) {
 80011a2:	2308      	movs	r3, #8
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e018      	b.n	80011da <SIM800L_SendMessage+0x3e>
        HAL_UART_Transmit_DMA(&huart2, SIM800L_Commands[i], strlen((char*)SIM800L_Commands[i]));
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <SIM800L_SendMessage+0x50>)
 80011ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <SIM800L_SendMessage+0x50>)
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7fe ffc9 	bl	8000150 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	4621      	mov	r1, r4
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <SIM800L_SendMessage+0x54>)
 80011c8:	f002 fd12 	bl	8003bf0 <HAL_UART_Transmit_DMA>
        HAL_Delay(1000);
 80011cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d0:	f000 fc00 	bl	80019d4 <HAL_Delay>
    for (uint8_t i = 8; i < 10; i++) {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	3301      	adds	r3, #1
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b09      	cmp	r3, #9
 80011de:	d9e3      	bls.n	80011a8 <SIM800L_SendMessage+0xc>
    }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000
 80011f0:	200002e4 	.word	0x200002e4

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_MspInit+0x5c>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_MspInit+0x5c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_MspInit+0x5c>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <HAL_MspInit+0x5c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_MspInit+0x60>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_MspInit+0x60>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000

08001258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_ADC_MspInit+0x7c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d129      	bne.n	80012cc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_ADC_MspInit+0x80>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <HAL_ADC_MspInit+0x80>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_ADC_MspInit+0x80>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_ADC_MspInit+0x80>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_ADC_MspInit+0x80>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_ADC_MspInit+0x80>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a8:	2301      	movs	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	4809      	ldr	r0, [pc, #36]	; (80012dc <HAL_ADC_MspInit+0x84>)
 80012b8:	f001 fa4c 	bl	8002754 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2012      	movs	r0, #18
 80012c2:	f000 ff6e 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012c6:	2012      	movs	r0, #18
 80012c8:	f000 ff87 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40012400 	.word	0x40012400
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800

080012e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f0:	d113      	bne.n	800131a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_TIM_Base_MspInit+0x44>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_TIM_Base_MspInit+0x44>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_TIM_Base_MspInit+0x44>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	201c      	movs	r0, #28
 8001310:	f000 ff47 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001314:	201c      	movs	r0, #28
 8001316:	f000 ff60 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a78      	ldr	r2, [pc, #480]	; (8001524 <HAL_UART_MspInit+0x1fc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d161      	bne.n	800140c <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001348:	4b77      	ldr	r3, [pc, #476]	; (8001528 <HAL_UART_MspInit+0x200>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a76      	ldr	r2, [pc, #472]	; (8001528 <HAL_UART_MspInit+0x200>)
 800134e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b74      	ldr	r3, [pc, #464]	; (8001528 <HAL_UART_MspInit+0x200>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b71      	ldr	r3, [pc, #452]	; (8001528 <HAL_UART_MspInit+0x200>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a70      	ldr	r2, [pc, #448]	; (8001528 <HAL_UART_MspInit+0x200>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b6e      	ldr	r3, [pc, #440]	; (8001528 <HAL_UART_MspInit+0x200>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	4619      	mov	r1, r3
 800138c:	4867      	ldr	r0, [pc, #412]	; (800152c <HAL_UART_MspInit+0x204>)
 800138e:	f001 f9e1 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4619      	mov	r1, r3
 80013a6:	4861      	ldr	r0, [pc, #388]	; (800152c <HAL_UART_MspInit+0x204>)
 80013a8:	f001 f9d4 	bl	8002754 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013ac:	4b60      	ldr	r3, [pc, #384]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013ae:	4a61      	ldr	r2, [pc, #388]	; (8001534 <HAL_UART_MspInit+0x20c>)
 80013b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b5d      	ldr	r3, [pc, #372]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c4:	4b5a      	ldr	r3, [pc, #360]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ca:	4b59      	ldr	r3, [pc, #356]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013d0:	4b57      	ldr	r3, [pc, #348]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013d8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80013dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013de:	4854      	ldr	r0, [pc, #336]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013e0:	f000 ff16 	bl	8002210 <HAL_DMA_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80013ea:	f7ff fe4d 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80013f4:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_UART_MspInit+0x208>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2025      	movs	r0, #37	; 0x25
 8001400:	f000 fecf 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001404:	2025      	movs	r0, #37	; 0x25
 8001406:	f000 fee8 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800140a:	e104      	b.n	8001616 <HAL_UART_MspInit+0x2ee>
  else if(huart->Instance==USART2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_UART_MspInit+0x210>)
 8001412:	4293      	cmp	r3, r2
 8001414:	f040 809a 	bne.w	800154c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_UART_MspInit+0x200>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	4a42      	ldr	r2, [pc, #264]	; (8001528 <HAL_UART_MspInit+0x200>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001422:	61d3      	str	r3, [r2, #28]
 8001424:	4b40      	ldr	r3, [pc, #256]	; (8001528 <HAL_UART_MspInit+0x200>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <HAL_UART_MspInit+0x200>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a3c      	ldr	r2, [pc, #240]	; (8001528 <HAL_UART_MspInit+0x200>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_UART_MspInit+0x200>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001448:	2304      	movs	r3, #4
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4619      	mov	r1, r3
 800145a:	4834      	ldr	r0, [pc, #208]	; (800152c <HAL_UART_MspInit+0x204>)
 800145c:	f001 f97a 	bl	8002754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4619      	mov	r1, r3
 8001472:	482e      	ldr	r0, [pc, #184]	; (800152c <HAL_UART_MspInit+0x204>)
 8001474:	f001 f96e 	bl	8002754 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_UART_MspInit+0x214>)
 800147a:	4a31      	ldr	r2, [pc, #196]	; (8001540 <HAL_UART_MspInit+0x218>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_UART_MspInit+0x214>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_UART_MspInit+0x214>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <HAL_UART_MspInit+0x214>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_UART_MspInit+0x214>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_UART_MspInit+0x214>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_UART_MspInit+0x214>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_UART_MspInit+0x214>)
 80014a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014aa:	4824      	ldr	r0, [pc, #144]	; (800153c <HAL_UART_MspInit+0x214>)
 80014ac:	f000 feb0 	bl	8002210 <HAL_DMA_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_UART_MspInit+0x192>
      Error_Handler();
 80014b6:	f7ff fde7 	bl	8001088 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_UART_MspInit+0x214>)
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c
 80014c0:	4a1e      	ldr	r2, [pc, #120]	; (800153c <HAL_UART_MspInit+0x214>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014c8:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <HAL_UART_MspInit+0x220>)
 80014ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014ce:	2210      	movs	r2, #16
 80014d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014f6:	4813      	ldr	r0, [pc, #76]	; (8001544 <HAL_UART_MspInit+0x21c>)
 80014f8:	f000 fe8a 	bl	8002210 <HAL_DMA_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8001502:	f7ff fdc1 	bl	8001088 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_UART_MspInit+0x21c>)
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_UART_MspInit+0x21c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2026      	movs	r0, #38	; 0x26
 8001518:	f000 fe43 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800151c:	2026      	movs	r0, #38	; 0x26
 800151e:	f000 fe5c 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 8001522:	e078      	b.n	8001616 <HAL_UART_MspInit+0x2ee>
 8001524:	40013800 	.word	0x40013800
 8001528:	40021000 	.word	0x40021000
 800152c:	40010800 	.word	0x40010800
 8001530:	20000374 	.word	0x20000374
 8001534:	40020058 	.word	0x40020058
 8001538:	40004400 	.word	0x40004400
 800153c:	200003b8 	.word	0x200003b8
 8001540:	4002006c 	.word	0x4002006c
 8001544:	200003fc 	.word	0x200003fc
 8001548:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_UART_MspInit+0x2f8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d15f      	bne.n	8001616 <HAL_UART_MspInit+0x2ee>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001556:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_UART_MspInit+0x2fc>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a32      	ldr	r2, [pc, #200]	; (8001624 <HAL_UART_MspInit+0x2fc>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_UART_MspInit+0x2fc>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_UART_MspInit+0x2fc>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <HAL_UART_MspInit+0x2fc>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6193      	str	r3, [r2, #24]
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_UART_MspInit+0x2fc>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4619      	mov	r1, r3
 800159a:	4823      	ldr	r0, [pc, #140]	; (8001628 <HAL_UART_MspInit+0x300>)
 800159c:	f001 f8da 	bl	8002754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	4619      	mov	r1, r3
 80015b4:	481c      	ldr	r0, [pc, #112]	; (8001628 <HAL_UART_MspInit+0x300>)
 80015b6:	f001 f8cd 	bl	8002754 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_UART_MspInit+0x304>)
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_UART_MspInit+0x308>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_UART_MspInit+0x304>)
 80015c2:	2210      	movs	r2, #16
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_UART_MspInit+0x304>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_UART_MspInit+0x304>)
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_UART_MspInit+0x304>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_UART_MspInit+0x304>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_UART_MspInit+0x304>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_UART_MspInit+0x304>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80015ea:	4810      	ldr	r0, [pc, #64]	; (800162c <HAL_UART_MspInit+0x304>)
 80015ec:	f000 fe10 	bl	8002210 <HAL_DMA_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 80015f6:	f7ff fd47 	bl	8001088 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_UART_MspInit+0x304>)
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_UART_MspInit+0x304>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2027      	movs	r0, #39	; 0x27
 800160c:	f000 fdc9 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001610:	2027      	movs	r0, #39	; 0x27
 8001612:	f000 fde2 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3730      	adds	r7, #48	; 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40004800 	.word	0x40004800
 8001624:	40021000 	.word	0x40021000
 8001628:	40010c00 	.word	0x40010c00
 800162c:	20000440 	.word	0x20000440
 8001630:	4002001c 	.word	0x4002001c

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 f98f 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA1_Channel2_IRQHandler+0x10>)
 800168a:	f000 ff2f 	bl	80024ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000440 	.word	0x20000440

08001698 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA1_Channel5_IRQHandler+0x10>)
 800169e:	f000 ff25 	bl	80024ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000374 	.word	0x20000374

080016ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Channel6_IRQHandler+0x10>)
 80016b2:	f000 ff1b 	bl	80024ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003b8 	.word	0x200003b8

080016c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <DMA1_Channel7_IRQHandler+0x10>)
 80016c6:	f000 ff11 	bl	80024ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200003fc 	.word	0x200003fc

080016d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <ADC1_2_IRQHandler+0x10>)
 80016da:	f000 fa77 	bl	8001bcc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000224 	.word	0x20000224

080016e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM2_IRQHandler+0x10>)
 80016ee:	f001 feca 	bl	8003486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000254 	.word	0x20000254

080016fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <USART1_IRQHandler+0x10>)
 8001702:	f002 fb43 	bl	8003d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000029c 	.word	0x2000029c

08001710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  //extern uint8_t data_rx2[100], data_tx[100];
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <USART2_IRQHandler+0x10>)
 8001716:	f002 fb39 	bl	8003d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //strcpy(&data_tx, &data_rx2);
  /* USER CODE END USART2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002e4 	.word	0x200002e4

08001724 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <USART3_IRQHandler+0x10>)
 800172a:	f002 fb2f 	bl	8003d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000032c 	.word	0x2000032c

08001738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return 1;
 800173c:	2301      	movs	r3, #1
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <_kill>:

int _kill(int pid, int sig)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001750:	f003 fa1e 	bl	8004b90 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	2216      	movs	r2, #22
 8001758:	601a      	str	r2, [r3, #0]
  return -1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_exit>:

void _exit (int status)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800176e:	f04f 31ff 	mov.w	r1, #4294967295
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffe7 	bl	8001746 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001778:	e7fe      	b.n	8001778 <_exit+0x12>

0800177a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e00a      	b.n	80017a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800178c:	f3af 8000 	nop.w
 8001790:	4601      	mov	r1, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	60ba      	str	r2, [r7, #8]
 8001798:	b2ca      	uxtb	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbf0      	blt.n	800178c <_read+0x12>
  }

  return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e009      	b.n	80017da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	60ba      	str	r2, [r7, #8]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	429a      	cmp	r2, r3
 80017e0:	dbf1      	blt.n	80017c6 <_write+0x12>
  }
  return len;
 80017e2:	687b      	ldr	r3, [r7, #4]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_close>:

int _close(int file)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001812:	605a      	str	r2, [r3, #4]
  return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <_isatty>:

int _isatty(int file)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f003 f988 	bl	8004b90 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20005000 	.word	0x20005000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	20000a98 	.word	0x20000a98
 80018b4:	20000ab0 	.word	0x20000ab0

080018b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c4:	f7ff fff8 	bl	80018b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c8:	480b      	ldr	r0, [pc, #44]	; (80018f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ca:	490c      	ldr	r1, [pc, #48]	; (80018fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018cc:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018e0:	4c09      	ldr	r4, [pc, #36]	; (8001908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ee:	f003 f955 	bl	8004b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018f2:	f7ff f949 	bl	8000b88 <main>
  bx lr
 80018f6:	4770      	bx	lr
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001900:	08008770 	.word	0x08008770
  ldr r2, =_sbss
 8001904:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001908:	20000ab0 	.word	0x20000ab0

0800190c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800190c:	e7fe      	b.n	800190c <CAN1_RX1_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x28>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x28>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 fc33 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	200f      	movs	r0, #15
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fc62 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fc4b 	bl	80021f6 <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f000 fc13 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000028 	.word	0x20000028
 8001994:	20000030 	.word	0x20000030
 8001998:	2000002c 	.word	0x2000002c

0800199c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_IncTick+0x1c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_IncTick+0x20>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_IncTick+0x20>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000030 	.word	0x20000030
 80019bc:	20000a9c 	.word	0x20000a9c

080019c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <HAL_GetTick+0x10>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000a9c 	.word	0x20000a9c

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffe0 	bl	80019c0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000030 	.word	0x20000030

08001a1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0be      	b.n	8001bbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fbfc 	bl	8001258 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fa7d 	bl	8001f60 <ADC_ConversionStop_Disable>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 8099 	bne.w	8001baa <HAL_ADC_Init+0x18e>
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 8095 	bne.w	8001baa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a88:	f023 0302 	bic.w	r3, r3, #2
 8001a8c:	f043 0202 	orr.w	r2, r3, #2
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7b1b      	ldrb	r3, [r3, #12]
 8001aa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001aa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ab4:	d003      	beq.n	8001abe <HAL_ADC_Init+0xa2>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d102      	bne.n	8001ac4 <HAL_ADC_Init+0xa8>
 8001abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADC_Init+0xaa>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7d1b      	ldrb	r3, [r3, #20]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d119      	bne.n	8001b08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7b1b      	ldrb	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	035a      	lsls	r2, r3, #13
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e00b      	b.n	8001b08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f043 0220 	orr.w	r2, r3, #32
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_ADC_Init+0x1a8>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b38:	d003      	beq.n	8001b42 <HAL_ADC_Init+0x126>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d104      	bne.n	8001b4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	051b      	lsls	r3, r3, #20
 8001b4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_ADC_Init+0x1ac>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d10b      	bne.n	8001b88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	f023 0303 	bic.w	r3, r3, #3
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b86:	e018      	b.n	8001bba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f023 0312 	bic.w	r3, r3, #18
 8001b90:	f043 0210 	orr.w	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ba8:	e007      	b.n	8001bba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001bc8:	ff1f0efe 	.word	0xff1f0efe

08001bcc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03e      	beq.n	8001c6c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d039      	beq.n	8001c6c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c1e:	d11d      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d119      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0220 	bic.w	r2, r2, #32
 8001c36:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f874 	bl	8001d4a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f06f 0212 	mvn.w	r2, #18
 8001c6a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d04d      	beq.n	8001d12 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d048      	beq.n	8001d12 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001ca2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001ca6:	d012      	beq.n	8001cce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d125      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cc0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cc4:	d11d      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cdc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f96d 	bl	8001fe2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 020c 	mvn.w	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d012      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f812 	bl	8001d5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0201 	mvn.w	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x20>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0dc      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x1da>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b06      	cmp	r3, #6
 8001d9e:	d81c      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b05      	subs	r3, #5
 8001db2:	221f      	movs	r2, #31
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b05      	subs	r3, #5
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8001dd8:	e03c      	b.n	8001e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d81c      	bhi.n	8001e1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	3b23      	subs	r3, #35	; 0x23
 8001df4:	221f      	movs	r2, #31
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	4019      	ands	r1, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b23      	subs	r3, #35	; 0x23
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1a:	e01b      	b.n	8001e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b41      	subs	r3, #65	; 0x41
 8001e2e:	221f      	movs	r2, #31
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4019      	ands	r1, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b41      	subs	r3, #65	; 0x41
 8001e48:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d91c      	bls.n	8001e96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68d9      	ldr	r1, [r3, #12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	2207      	movs	r2, #7
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4019      	ands	r1, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6898      	ldr	r0, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	3b1e      	subs	r3, #30
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	e019      	b.n	8001eca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6919      	ldr	r1, [r3, #16]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4019      	ands	r1, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6898      	ldr	r0, [r3, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d003      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ed6:	2b11      	cmp	r3, #17
 8001ed8:	d132      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d125      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d126      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d11a      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9a      	lsrs	r2, r3, #18
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x1b2>
 8001f2e:	e007      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40012400 	.word	0x40012400
 8001f58:	20000028 	.word	0x20000028
 8001f5c:	431bde83 	.word	0x431bde83

08001f60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d12e      	bne.n	8001fd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f8a:	f7ff fd19 	bl	80019c0 <HAL_GetTick>
 8001f8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f90:	e01b      	b.n	8001fca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f92:	f7ff fd15 	bl	80019c0 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d914      	bls.n	8001fca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10d      	bne.n	8001fca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	f043 0210 	orr.w	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	f043 0201 	orr.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e007      	b.n	8001fda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d0dc      	beq.n	8001f92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <__NVIC_EnableIRQ+0x34>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff90 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff2d 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff42 	bl	800203c <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff90 	bl	80020e4 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5f 	bl	8002090 <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff35 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e043      	b.n	80022ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_DMA_Init+0xa8>)
 800222e:	4413      	add	r3, r2
 8002230:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_DMA_Init+0xac>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	009a      	lsls	r2, r3, #2
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a1f      	ldr	r2, [pc, #124]	; (80022c0 <HAL_DMA_Init+0xb0>)
 8002242:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800225a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800225e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	bffdfff8 	.word	0xbffdfff8
 80022bc:	cccccccd 	.word	0xcccccccd
 80022c0:	40020000 	.word	0x40020000

080022c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Start_IT+0x20>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e04b      	b.n	800237c <HAL_DMA_Start_IT+0xb8>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13a      	bne.n	800236e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f9eb 	bl	80026f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 020e 	orr.w	r2, r2, #14
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e00f      	b.n	800235c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0204 	bic.w	r2, r2, #4
 800234a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 020a 	orr.w	r2, r2, #10
 800235a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e005      	b.n	800237a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800237a:	7dfb      	ldrb	r3, [r7, #23]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d008      	beq.n	80023ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2204      	movs	r2, #4
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e020      	b.n	80023f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 020e 	bic.w	r2, r2, #14
 80023bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f202 	lsl.w	r2, r1, r2
 80023dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d005      	beq.n	8002420 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2204      	movs	r2, #4
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e051      	b.n	80024c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 020e 	bic.w	r2, r2, #14
 800242e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_DMA_Abort_IT+0xd4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d029      	beq.n	800249e <HAL_DMA_Abort_IT+0xa2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_DMA_Abort_IT+0xd8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d022      	beq.n	800249a <HAL_DMA_Abort_IT+0x9e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_DMA_Abort_IT+0xdc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01a      	beq.n	8002494 <HAL_DMA_Abort_IT+0x98>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <HAL_DMA_Abort_IT+0xe0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d012      	beq.n	800248e <HAL_DMA_Abort_IT+0x92>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_DMA_Abort_IT+0xe4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00a      	beq.n	8002488 <HAL_DMA_Abort_IT+0x8c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_DMA_Abort_IT+0xe8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d102      	bne.n	8002482 <HAL_DMA_Abort_IT+0x86>
 800247c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002480:	e00e      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 8002482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002486:	e00b      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 8002488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248c:	e008      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 800248e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002492:	e005      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 8002494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002498:	e002      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 800249a:	2310      	movs	r3, #16
 800249c:	e000      	b.n	80024a0 <HAL_DMA_Abort_IT+0xa4>
 800249e:	2301      	movs	r3, #1
 80024a0:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <HAL_DMA_Abort_IT+0xec>)
 80024a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
    } 
  }
  return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40020008 	.word	0x40020008
 80024d4:	4002001c 	.word	0x4002001c
 80024d8:	40020030 	.word	0x40020030
 80024dc:	40020044 	.word	0x40020044
 80024e0:	40020058 	.word	0x40020058
 80024e4:	4002006c 	.word	0x4002006c
 80024e8:	40020000 	.word	0x40020000

080024ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	2204      	movs	r2, #4
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d04f      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xc8>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0204 	bic.w	r2, r2, #4
 800253a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a66      	ldr	r2, [pc, #408]	; (80026dc <HAL_DMA_IRQHandler+0x1f0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d029      	beq.n	800259a <HAL_DMA_IRQHandler+0xae>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_DMA_IRQHandler+0x1f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d022      	beq.n	8002596 <HAL_DMA_IRQHandler+0xaa>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a63      	ldr	r2, [pc, #396]	; (80026e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01a      	beq.n	8002590 <HAL_DMA_IRQHandler+0xa4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a62      	ldr	r2, [pc, #392]	; (80026e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d012      	beq.n	800258a <HAL_DMA_IRQHandler+0x9e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_DMA_IRQHandler+0x200>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x98>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5f      	ldr	r2, [pc, #380]	; (80026f0 <HAL_DMA_IRQHandler+0x204>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d102      	bne.n	800257e <HAL_DMA_IRQHandler+0x92>
 8002578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800257c:	e00e      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 800257e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002582:	e00b      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 8002584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002588:	e008      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 800258a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800258e:	e005      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 8002590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002594:	e002      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 8002596:	2340      	movs	r3, #64	; 0x40
 8002598:	e000      	b.n	800259c <HAL_DMA_IRQHandler+0xb0>
 800259a:	2304      	movs	r3, #4
 800259c:	4a55      	ldr	r2, [pc, #340]	; (80026f4 <HAL_DMA_IRQHandler+0x208>)
 800259e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8094 	beq.w	80026d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025b2:	e08e      	b.n	80026d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	2202      	movs	r2, #2
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d056      	beq.n	8002672 <HAL_DMA_IRQHandler+0x186>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d051      	beq.n	8002672 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020a 	bic.w	r2, r2, #10
 80025ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a38      	ldr	r2, [pc, #224]	; (80026dc <HAL_DMA_IRQHandler+0x1f0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d029      	beq.n	8002652 <HAL_DMA_IRQHandler+0x166>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a37      	ldr	r2, [pc, #220]	; (80026e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <HAL_DMA_IRQHandler+0x162>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a35      	ldr	r2, [pc, #212]	; (80026e4 <HAL_DMA_IRQHandler+0x1f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_IRQHandler+0x15c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a34      	ldr	r2, [pc, #208]	; (80026e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0x156>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a32      	ldr	r2, [pc, #200]	; (80026ec <HAL_DMA_IRQHandler+0x200>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00a      	beq.n	800263c <HAL_DMA_IRQHandler+0x150>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a31      	ldr	r2, [pc, #196]	; (80026f0 <HAL_DMA_IRQHandler+0x204>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d102      	bne.n	8002636 <HAL_DMA_IRQHandler+0x14a>
 8002630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002634:	e00e      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 8002636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263a:	e00b      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 800263c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002640:	e008      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 8002642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002646:	e005      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 8002648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800264c:	e002      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 800264e:	2320      	movs	r3, #32
 8002650:	e000      	b.n	8002654 <HAL_DMA_IRQHandler+0x168>
 8002652:	2302      	movs	r3, #2
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_DMA_IRQHandler+0x208>)
 8002656:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	d034      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002670:	e02f      	b.n	80026d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2208      	movs	r2, #8
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d028      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x1e8>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d023      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 020e 	bic.w	r2, r2, #14
 800269a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f202 	lsl.w	r2, r1, r2
 80026aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
    }
  }
  return;
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
}
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40020008 	.word	0x40020008
 80026e0:	4002001c 	.word	0x4002001c
 80026e4:	40020030 	.word	0x40020030
 80026e8:	40020044 	.word	0x40020044
 80026ec:	40020058 	.word	0x40020058
 80026f0:	4002006c 	.word	0x4002006c
 80026f4:	40020000 	.word	0x40020000

080026f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b10      	cmp	r3, #16
 8002724:	d108      	bne.n	8002738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002736:	e007      	b.n	8002748 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b08b      	sub	sp, #44	; 0x2c
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	e169      	b.n	8002a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002768:	2201      	movs	r2, #1
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	429a      	cmp	r2, r3
 8002782:	f040 8158 	bne.w	8002a36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a9a      	ldr	r2, [pc, #616]	; (80029f4 <HAL_GPIO_Init+0x2a0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d05e      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 8002790:	4a98      	ldr	r2, [pc, #608]	; (80029f4 <HAL_GPIO_Init+0x2a0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d875      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 8002796:	4a98      	ldr	r2, [pc, #608]	; (80029f8 <HAL_GPIO_Init+0x2a4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d058      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 800279c:	4a96      	ldr	r2, [pc, #600]	; (80029f8 <HAL_GPIO_Init+0x2a4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d86f      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027a2:	4a96      	ldr	r2, [pc, #600]	; (80029fc <HAL_GPIO_Init+0x2a8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d052      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027a8:	4a94      	ldr	r2, [pc, #592]	; (80029fc <HAL_GPIO_Init+0x2a8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d869      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ae:	4a94      	ldr	r2, [pc, #592]	; (8002a00 <HAL_GPIO_Init+0x2ac>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d04c      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027b4:	4a92      	ldr	r2, [pc, #584]	; (8002a00 <HAL_GPIO_Init+0x2ac>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d863      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ba:	4a92      	ldr	r2, [pc, #584]	; (8002a04 <HAL_GPIO_Init+0x2b0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d046      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027c0:	4a90      	ldr	r2, [pc, #576]	; (8002a04 <HAL_GPIO_Init+0x2b0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d85d      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d82a      	bhi.n	8002820 <HAL_GPIO_Init+0xcc>
 80027ca:	2b12      	cmp	r3, #18
 80027cc:	d859      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ce:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <HAL_GPIO_Init+0x80>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	0800284f 	.word	0x0800284f
 80027d8:	08002829 	.word	0x08002829
 80027dc:	0800283b 	.word	0x0800283b
 80027e0:	0800287d 	.word	0x0800287d
 80027e4:	08002883 	.word	0x08002883
 80027e8:	08002883 	.word	0x08002883
 80027ec:	08002883 	.word	0x08002883
 80027f0:	08002883 	.word	0x08002883
 80027f4:	08002883 	.word	0x08002883
 80027f8:	08002883 	.word	0x08002883
 80027fc:	08002883 	.word	0x08002883
 8002800:	08002883 	.word	0x08002883
 8002804:	08002883 	.word	0x08002883
 8002808:	08002883 	.word	0x08002883
 800280c:	08002883 	.word	0x08002883
 8002810:	08002883 	.word	0x08002883
 8002814:	08002883 	.word	0x08002883
 8002818:	08002831 	.word	0x08002831
 800281c:	08002845 	.word	0x08002845
 8002820:	4a79      	ldr	r2, [pc, #484]	; (8002a08 <HAL_GPIO_Init+0x2b4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002826:	e02c      	b.n	8002882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e029      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	3304      	adds	r3, #4
 8002836:	623b      	str	r3, [r7, #32]
          break;
 8002838:	e024      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	3308      	adds	r3, #8
 8002840:	623b      	str	r3, [r7, #32]
          break;
 8002842:	e01f      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	330c      	adds	r3, #12
 800284a:	623b      	str	r3, [r7, #32]
          break;
 800284c:	e01a      	b.n	8002884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002856:	2304      	movs	r3, #4
 8002858:	623b      	str	r3, [r7, #32]
          break;
 800285a:	e013      	b.n	8002884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002864:	2308      	movs	r3, #8
 8002866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	611a      	str	r2, [r3, #16]
          break;
 800286e:	e009      	b.n	8002884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002870:	2308      	movs	r3, #8
 8002872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	615a      	str	r2, [r3, #20]
          break;
 800287a:	e003      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
          break;
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x130>
          break;
 8002882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2bff      	cmp	r3, #255	; 0xff
 8002888:	d801      	bhi.n	800288e <HAL_GPIO_Init+0x13a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	e001      	b.n	8002892 <HAL_GPIO_Init+0x13e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2bff      	cmp	r3, #255	; 0xff
 8002898:	d802      	bhi.n	80028a0 <HAL_GPIO_Init+0x14c>
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	e002      	b.n	80028a6 <HAL_GPIO_Init+0x152>
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3b08      	subs	r3, #8
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	210f      	movs	r1, #15
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	401a      	ands	r2, r3
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80b1 	beq.w	8002a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028d4:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028ec:	4a48      	ldr	r2, [pc, #288]	; (8002a10 <HAL_GPIO_Init+0x2bc>)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a40      	ldr	r2, [pc, #256]	; (8002a14 <HAL_GPIO_Init+0x2c0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d013      	beq.n	8002940 <HAL_GPIO_Init+0x1ec>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3f      	ldr	r2, [pc, #252]	; (8002a18 <HAL_GPIO_Init+0x2c4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00d      	beq.n	800293c <HAL_GPIO_Init+0x1e8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3e      	ldr	r2, [pc, #248]	; (8002a1c <HAL_GPIO_Init+0x2c8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <HAL_GPIO_Init+0x1e4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3d      	ldr	r2, [pc, #244]	; (8002a20 <HAL_GPIO_Init+0x2cc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_GPIO_Init+0x1e0>
 8002930:	2303      	movs	r3, #3
 8002932:	e006      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002934:	2304      	movs	r3, #4
 8002936:	e004      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002938:	2302      	movs	r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002940:	2300      	movs	r3, #0
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	f002 0203 	and.w	r2, r2, #3
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	4093      	lsls	r3, r2
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002952:	492f      	ldr	r1, [pc, #188]	; (8002a10 <HAL_GPIO_Init+0x2bc>)
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	492c      	ldr	r1, [pc, #176]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800297a:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	4928      	ldr	r1, [pc, #160]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	4922      	ldr	r1, [pc, #136]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	491e      	ldr	r1, [pc, #120]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4918      	ldr	r1, [pc, #96]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4914      	ldr	r1, [pc, #80]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d021      	beq.n	8002a28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e021      	b.n	8002a36 <HAL_GPIO_Init+0x2e2>
 80029f2:	bf00      	nop
 80029f4:	10320000 	.word	0x10320000
 80029f8:	10310000 	.word	0x10310000
 80029fc:	10220000 	.word	0x10220000
 8002a00:	10210000 	.word	0x10210000
 8002a04:	10120000 	.word	0x10120000
 8002a08:	10110000 	.word	0x10110000
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40010800 	.word	0x40010800
 8002a18:	40010c00 	.word	0x40010c00
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40011400 	.word	0x40011400
 8002a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_GPIO_Init+0x304>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	4909      	ldr	r1, [pc, #36]	; (8002a58 <HAL_GPIO_Init+0x304>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	3301      	adds	r3, #1
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f47f ae8e 	bne.w	8002768 <HAL_GPIO_Init+0x14>
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	372c      	adds	r7, #44	; 0x2c
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	40010400 	.word	0x40010400

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e272      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8087 	beq.w	8002b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a7c:	4b92      	ldr	r3, [pc, #584]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d00c      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a88:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d112      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
 8002a94:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa2:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d06c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x12c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d168      	bne.n	8002b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e24c      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x76>
 8002ac4:	4b80      	ldr	r3, [pc, #512]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a7f      	ldr	r2, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e02e      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x98>
 8002ada:	4b7b      	ldr	r3, [pc, #492]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7a      	ldr	r2, [pc, #488]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b78      	ldr	r3, [pc, #480]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a77      	ldr	r2, [pc, #476]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e01d      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0xbc>
 8002afe:	4b72      	ldr	r3, [pc, #456]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a71      	ldr	r2, [pc, #452]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b6f      	ldr	r3, [pc, #444]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6e      	ldr	r2, [pc, #440]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002b18:	4b6b      	ldr	r3, [pc, #428]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6a      	ldr	r2, [pc, #424]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a67      	ldr	r2, [pc, #412]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe ff42 	bl	80019c0 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe ff3e 	bl	80019c0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e200      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b5d      	ldr	r3, [pc, #372]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe4>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe ff2e 	bl	80019c0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe ff2a 	bl	80019c0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1ec      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x10c>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d063      	beq.n	8002c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b96:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ba2:	4b49      	ldr	r3, [pc, #292]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d11c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x18c>
 8002bae:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d116      	bne.n	8002be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x176>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e1c0      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4939      	ldr	r1, [pc, #228]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	e03a      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fee3 	bl	80019c0 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fedf 	bl	80019c0 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1a1      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4927      	ldr	r1, [pc, #156]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
 8002c30:	e015      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe fec2 	bl	80019c0 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fe febe 	bl	80019c0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e180      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d03a      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d019      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c78:	f7fe fea2 	bl	80019c0 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe fe9e 	bl	80019c0 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e160      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f000 face 	bl	8003240 <RCC_Delay>
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fe88 	bl	80019c0 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb2:	e00f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fe84 	bl	80019c0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d908      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e146      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	42420000 	.word	0x42420000
 8002cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	4b92      	ldr	r3, [pc, #584]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e9      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80a6 	beq.w	8002e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b8b      	ldr	r3, [pc, #556]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a87      	ldr	r2, [pc, #540]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]
 8002d0a:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b82      	ldr	r3, [pc, #520]	; (8002f24 <HAL_RCC_OscConfig+0x4c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b7f      	ldr	r3, [pc, #508]	; (8002f24 <HAL_RCC_OscConfig+0x4c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7e      	ldr	r2, [pc, #504]	; (8002f24 <HAL_RCC_OscConfig+0x4c8>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fe45 	bl	80019c0 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe fe41 	bl	80019c0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e103      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b75      	ldr	r3, [pc, #468]	; (8002f24 <HAL_RCC_OscConfig+0x4c8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x312>
 8002d60:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a6e      	ldr	r2, [pc, #440]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	e02d      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x334>
 8002d76:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6213      	str	r3, [r2, #32]
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a66      	ldr	r2, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	e01c      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x356>
 8002d98:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a60      	ldr	r2, [pc, #384]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	4b5e      	ldr	r3, [pc, #376]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a5d      	ldr	r2, [pc, #372]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6213      	str	r3, [r2, #32]
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a5a      	ldr	r2, [pc, #360]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6213      	str	r3, [r2, #32]
 8002dbe:	4b58      	ldr	r3, [pc, #352]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a57      	ldr	r2, [pc, #348]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fdf5 	bl	80019c0 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fe fdf1 	bl	80019c0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0b1      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCC_OscConfig+0x37e>
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fddf 	bl	80019c0 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fddb 	bl	80019c0 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e09b      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ee      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a3b      	ldr	r2, [pc, #236]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8087 	beq.w	8002f52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d061      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d146      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <HAL_RCC_OscConfig+0x4cc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fdaf 	bl	80019c0 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe fdab 	bl	80019c0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e06d      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d108      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4921      	ldr	r1, [pc, #132]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a19      	ldr	r1, [r3, #32]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	491b      	ldr	r1, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_RCC_OscConfig+0x4cc>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fd7f 	bl	80019c0 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe fd7b 	bl	80019c0 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e03d      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x46a>
 8002ee4:	e035      	b.n	8002f52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_RCC_OscConfig+0x4cc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fd68 	bl	80019c0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fd64 	bl	80019c0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e026      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x498>
 8002f12:	e01e      	b.n	8002f52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e019      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_OscConfig+0x500>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0d0      	b.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f74:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d910      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b67      	ldr	r3, [pc, #412]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 0207 	bic.w	r2, r3, #7
 8002f8a:	4965      	ldr	r1, [pc, #404]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b63      	ldr	r3, [pc, #396]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0b8      	b.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4a52      	ldr	r2, [pc, #328]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	494d      	ldr	r1, [pc, #308]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d040      	beq.n	8003080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b47      	ldr	r3, [pc, #284]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d115      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e07f      	b.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	4b41      	ldr	r3, [pc, #260]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e073      	b.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302e:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e06b      	b.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303e:	4b39      	ldr	r3, [pc, #228]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f023 0203 	bic.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4936      	ldr	r1, [pc, #216]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003050:	f7fe fcb6 	bl	80019c0 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7fe fcb2 	bl	80019c0 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e053      	b.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 020c 	and.w	r2, r3, #12
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	429a      	cmp	r2, r3
 800307e:	d1eb      	bne.n	8003058 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b27      	ldr	r3, [pc, #156]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d210      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	4922      	ldr	r1, [pc, #136]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e032      	b.n	8003116 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4916      	ldr	r1, [pc, #88]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	490e      	ldr	r1, [pc, #56]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ee:	f000 f821 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	490a      	ldr	r1, [pc, #40]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003100:	5ccb      	ldrb	r3, [r1, r3]
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1cc>)
 8003108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1d0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fc14 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40022000 	.word	0x40022000
 8003124:	40021000 	.word	0x40021000
 8003128:	08008300 	.word	0x08008300
 800312c:	20000028 	.word	0x20000028
 8003130:	2000002c 	.word	0x2000002c

08003134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b04      	cmp	r3, #4
 800315c:	d002      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x30>
 800315e:	2b08      	cmp	r3, #8
 8003160:	d003      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x36>
 8003162:	e027      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003166:	613b      	str	r3, [r7, #16]
      break;
 8003168:	e027      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	0c9b      	lsrs	r3, r3, #18
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003174:	5cd3      	ldrb	r3, [r2, r3]
 8003176:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d010      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	0c5b      	lsrs	r3, r3, #17
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800318e:	5cd3      	ldrb	r3, [r2, r3]
 8003190:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003196:	fb03 f202 	mul.w	r2, r3, r2
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e004      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	613b      	str	r3, [r7, #16]
      break;
 80031b2:	e002      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetSysClockFreq+0x98>)
 80031b6:	613b      	str	r3, [r7, #16]
      break;
 80031b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ba:	693b      	ldr	r3, [r7, #16]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	007a1200 	.word	0x007a1200
 80031d0:	08008318 	.word	0x08008318
 80031d4:	08008328 	.word	0x08008328
 80031d8:	003d0900 	.word	0x003d0900

080031dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e0:	4b02      	ldr	r3, [pc, #8]	; (80031ec <HAL_RCC_GetHCLKFreq+0x10>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	20000028 	.word	0x20000028

080031f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f4:	f7ff fff2 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4903      	ldr	r1, [pc, #12]	; (8003214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800320c:	4618      	mov	r0, r3
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	08008310 	.word	0x08008310

08003218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800321c:	f7ff ffde 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	0adb      	lsrs	r3, r3, #11
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCC_GetPCLK2Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08008310 	.word	0x08008310

08003240 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <RCC_Delay+0x34>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <RCC_Delay+0x38>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800325c:	bf00      	nop
  }
  while (Delay --);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e5a      	subs	r2, r3, #1
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f9      	bne.n	800325c <RCC_Delay+0x1c>
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000028 	.word	0x20000028
 8003278:	10624dd3 	.word	0x10624dd3

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d07d      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003298:	2300      	movs	r3, #0
 800329a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329c:	4b4f      	ldr	r3, [pc, #316]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a8:	4b4c      	ldr	r3, [pc, #304]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a4b      	ldr	r2, [pc, #300]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61d3      	str	r3, [r2, #28]
 80032b4:	4b49      	ldr	r3, [pc, #292]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c0:	2301      	movs	r3, #1
 80032c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c4:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d118      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d0:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a42      	ldr	r2, [pc, #264]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032dc:	f7fe fb70 	bl	80019c0 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	e008      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fe fb6c 	bl	80019c0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e06d      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003302:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02e      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d027      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003320:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d014      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe fb3b 	bl	80019c0 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fe fb37 	bl	80019c0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e036      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ee      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4917      	ldr	r1, [pc, #92]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	4313      	orrs	r3, r2
 8003380:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003392:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	490b      	ldr	r1, [pc, #44]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4904      	ldr	r1, [pc, #16]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
 80033e4:	42420440 	.word	0x42420440

080033e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e041      	b.n	800347e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd ff66 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f000 fa2a 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	d122      	bne.n	80034e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d11b      	bne.n	80034e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0202 	mvn.w	r2, #2
 80034b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f9bd 	bl	8003848 <HAL_TIM_IC_CaptureCallback>
 80034ce:	e005      	b.n	80034dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f9b0 	bl	8003836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f9bf 	bl	800385a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d122      	bne.n	8003536 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d11b      	bne.n	8003536 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f06f 0204 	mvn.w	r2, #4
 8003506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f993 	bl	8003848 <HAL_TIM_IC_CaptureCallback>
 8003522:	e005      	b.n	8003530 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f986 	bl	8003836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f995 	bl	800385a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b08      	cmp	r3, #8
 8003542:	d122      	bne.n	800358a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d11b      	bne.n	800358a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f06f 0208 	mvn.w	r2, #8
 800355a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f969 	bl	8003848 <HAL_TIM_IC_CaptureCallback>
 8003576:	e005      	b.n	8003584 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f95c 	bl	8003836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f96b 	bl	800385a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b10      	cmp	r3, #16
 8003596:	d122      	bne.n	80035de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d11b      	bne.n	80035de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0210 	mvn.w	r2, #16
 80035ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2208      	movs	r2, #8
 80035b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f93f 	bl	8003848 <HAL_TIM_IC_CaptureCallback>
 80035ca:	e005      	b.n	80035d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f932 	bl	8003836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f941 	bl	800385a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d10e      	bne.n	800360a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f06f 0201 	mvn.w	r2, #1
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f90d 	bl	8003824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d10e      	bne.n	8003636 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	2b80      	cmp	r3, #128	; 0x80
 8003624:	d107      	bne.n	8003636 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800362e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fa84 	bl	8003b3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d10e      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d107      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800365a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f905 	bl	800386c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b20      	cmp	r3, #32
 800366e:	d10e      	bne.n	800368e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d107      	bne.n	800368e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0220 	mvn.w	r2, #32
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fa4f 	bl	8003b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_ConfigClockSource+0x1c>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0b4      	b.n	800381c <HAL_TIM_ConfigClockSource+0x186>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ea:	d03e      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xd4>
 80036ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f0:	f200 8087 	bhi.w	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	f000 8086 	beq.w	8003808 <HAL_TIM_ConfigClockSource+0x172>
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d87f      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 8003702:	2b70      	cmp	r3, #112	; 0x70
 8003704:	d01a      	beq.n	800373c <HAL_TIM_ConfigClockSource+0xa6>
 8003706:	2b70      	cmp	r3, #112	; 0x70
 8003708:	d87b      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 800370a:	2b60      	cmp	r3, #96	; 0x60
 800370c:	d050      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x11a>
 800370e:	2b60      	cmp	r3, #96	; 0x60
 8003710:	d877      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 8003712:	2b50      	cmp	r3, #80	; 0x50
 8003714:	d03c      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xfa>
 8003716:	2b50      	cmp	r3, #80	; 0x50
 8003718:	d873      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d058      	beq.n	80037d0 <HAL_TIM_ConfigClockSource+0x13a>
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d86f      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d064      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x15a>
 8003726:	2b30      	cmp	r3, #48	; 0x30
 8003728:	d86b      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	2b20      	cmp	r3, #32
 800372c:	d060      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x15a>
 800372e:	2b20      	cmp	r3, #32
 8003730:	d867      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d05c      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x15a>
 8003736:	2b10      	cmp	r3, #16
 8003738:	d05a      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x15a>
 800373a:	e062      	b.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f000 f971 	bl	8003a32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800375e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]
      break;
 8003768:	e04f      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f000 f95a 	bl	8003a32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e03c      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	461a      	mov	r2, r3
 800379e:	f000 f8d1 	bl	8003944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2150      	movs	r1, #80	; 0x50
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f928 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 80037ae:	e02c      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	461a      	mov	r2, r3
 80037be:	f000 f8ef 	bl	80039a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2160      	movs	r1, #96	; 0x60
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f918 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 80037ce:	e01c      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	461a      	mov	r2, r3
 80037de:	f000 f8b1 	bl	8003944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2140      	movs	r1, #64	; 0x40
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f908 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 80037ee:	e00c      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f000 f8ff 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 8003800:	e003      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      break;
 8003806:	e000      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003808:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
	...

08003880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a26      	ldr	r2, [pc, #152]	; (800393c <TIM_Base_SetConfig+0xbc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a25      	ldr	r2, [pc, #148]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a19      	ldr	r2, [pc, #100]	; (800393c <TIM_Base_SetConfig+0xbc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a07      	ldr	r2, [pc, #28]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d103      	bne.n	8003928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	615a      	str	r2, [r3, #20]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800

08003944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 030a 	bic.w	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f023 0210 	bic.w	r2, r3, #16
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	031b      	lsls	r3, r3, #12
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f043 0307 	orr.w	r3, r3, #7
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e046      	b.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d009      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10c      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800

08003b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e042      	b.n	8003be8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fbd6 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 ff6d 	bl	8004a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08c      	sub	sp, #48	; 0x30
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d156      	bne.n	8003cb8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_UART_Transmit_DMA+0x26>
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e04f      	b.n	8003cba <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2221      	movs	r2, #33	; 0x21
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_UART_Transmit_DMA+0xd4>)
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <HAL_UART_Transmit_DMA+0xd8>)
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_UART_Transmit_DMA+0xdc>)
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	2200      	movs	r2, #0
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003c5a:	f107 0308 	add.w	r3, r7, #8
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	6819      	ldr	r1, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	461a      	mov	r2, r3
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	f7fe fb27 	bl	80022c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3314      	adds	r3, #20
 8003c86:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca0:	627a      	str	r2, [r7, #36]	; 0x24
 8003ca2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3730      	adds	r7, #48	; 0x30
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	0800430b 	.word	0x0800430b
 8003cc8:	080043a5 	.word	0x080043a5
 8003ccc:	08004529 	.word	0x08004529

08003cd0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d14a      	bne.n	8003d80 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e043      	b.n	8003d82 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fc55 	bl	80045bc <UART_Start_Receive_DMA>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003d18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d12c      	bne.n	8003d7a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d125      	bne.n	8003d74 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f043 0310 	orr.w	r3, r3, #16
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d5e:	627a      	str	r2, [r7, #36]	; 0x24
 8003d60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d62:	6a39      	ldr	r1, [r7, #32]
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e5      	bne.n	8003d3e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8003d72:	e002      	b.n	8003d7a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d7e:	e000      	b.n	8003d82 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3730      	adds	r7, #48	; 0x30
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b0ba      	sub	sp, #232	; 0xe8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_UART_IRQHandler+0x66>
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fd84 	bl	80048f8 <UART_Receive_IT>
      return;
 8003df0:	e25b      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80de 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x22c>
 8003dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80d1 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_UART_IRQHandler+0xae>
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_UART_IRQHandler+0xd2>
 8003e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_UART_IRQHandler+0xf6>
 8003e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f043 0204 	orr.w	r2, r3, #4
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d011      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x126>
 8003e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f043 0208 	orr.w	r2, r3, #8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 81f2 	beq.w	80042a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_UART_IRQHandler+0x14e>
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fd0f 	bl	80048f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <HAL_UART_IRQHandler+0x17a>
 8003efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04f      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fc19 	bl	800473e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d041      	beq.n	8003f9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1d9      	bne.n	8003f1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d013      	beq.n	8003f96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	4a7e      	ldr	r2, [pc, #504]	; (800416c <HAL_UART_IRQHandler+0x3e0>)
 8003f74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fa3e 	bl	80023fc <HAL_DMA_Abort_IT>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f90:	4610      	mov	r0, r2
 8003f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e00e      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9ae 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e00a      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9aa 	bl	80042f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	e006      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9a6 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003fb2:	e175      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	bf00      	nop
    return;
 8003fb6:	e173      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 814f 	bne.w	8004260 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8148 	beq.w	8004260 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8141 	beq.w	8004260 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80b6 	beq.w	8004170 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8145 	beq.w	80042a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800401e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004022:	429a      	cmp	r2, r3
 8004024:	f080 813e 	bcs.w	80042a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b20      	cmp	r3, #32
 8004038:	f000 8088 	beq.w	800414c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800405a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	330c      	adds	r3, #12
 8004064:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004068:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800406c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004074:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1d9      	bne.n	800403c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3314      	adds	r3, #20
 80040a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e1      	bne.n	8004088 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3314      	adds	r3, #20
 80040ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e3      	bne.n	80040c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411c:	f023 0310 	bic.w	r3, r3, #16
 8004120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800412e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004130:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800413c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e3      	bne.n	800410a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe f91c 	bl	8002384 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800415a:	b29b      	uxth	r3, r3
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	b29b      	uxth	r3, r3
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fc ff28 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004168:	e09c      	b.n	80042a4 <HAL_UART_IRQHandler+0x518>
 800416a:	bf00      	nop
 800416c:	08004803 	.word	0x08004803
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004178:	b29b      	uxth	r3, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 808e 	beq.w	80042a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800418c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8089 	beq.w	80042a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041ba:	647a      	str	r2, [r7, #68]	; 0x44
 80041bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e3      	bne.n	8004196 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	623b      	str	r3, [r7, #32]
   return(result);
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041f2:	633a      	str	r2, [r7, #48]	; 0x30
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e3      	bne.n	80041ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	60fb      	str	r3, [r7, #12]
   return(result);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0310 	bic.w	r3, r3, #16
 800422a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004238:	61fa      	str	r2, [r7, #28]
 800423a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	69b9      	ldr	r1, [r7, #24]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	617b      	str	r3, [r7, #20]
   return(result);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e3      	bne.n	8004214 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fc fead 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425e:	e023      	b.n	80042a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_UART_IRQHandler+0x4f4>
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fad6 	bl	800482a <UART_Transmit_IT>
    return;
 800427e:	e014      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <HAL_UART_IRQHandler+0x51e>
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fb15 	bl	80048c8 <UART_EndTransmit_IT>
    return;
 800429e:	e004      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
    return;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
      return;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
      return;
 80042a8:	bf00      	nop
  }
}
 80042aa:	37e8      	adds	r7, #232	; 0xe8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b090      	sub	sp, #64	; 0x40
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d137      	bne.n	8004396 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	2200      	movs	r2, #0
 800432a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800432c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	623b      	str	r3, [r7, #32]
   return(result);
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434c:	633a      	str	r2, [r7, #48]	; 0x30
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004380:	61fa      	str	r2, [r7, #28]
 8004382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	69b9      	ldr	r1, [r7, #24]
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	617b      	str	r3, [r7, #20]
   return(result);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004394:	e002      	b.n	800439c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004398:	f7ff ff8a 	bl	80042b0 <HAL_UART_TxCpltCallback>
}
 800439c:	bf00      	nop
 800439e:	3740      	adds	r7, #64	; 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff ff85 	bl	80042c2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b09c      	sub	sp, #112	; 0x70
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d172      	bne.n	80044c2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80043dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043de:	2200      	movs	r2, #0
 80043e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004402:	65ba      	str	r2, [r7, #88]	; 0x58
 8004404:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004408:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e5      	bne.n	80043e2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	667b      	str	r3, [r7, #100]	; 0x64
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004436:	647a      	str	r2, [r7, #68]	; 0x44
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800443c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	623b      	str	r3, [r7, #32]
   return(result);
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004460:	663b      	str	r3, [r7, #96]	; 0x60
 8004462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800446a:	633a      	str	r2, [r7, #48]	; 0x30
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800447e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	2b01      	cmp	r3, #1
 800448c:	d119      	bne.n	80044c2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	60fb      	str	r3, [r7, #12]
   return(result);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 0310 	bic.w	r3, r3, #16
 80044a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ae:	61fa      	str	r2, [r7, #28]
 80044b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	69b9      	ldr	r1, [r7, #24]
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	617b      	str	r3, [r7, #20]
   return(result);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e5      	bne.n	800448e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	2200      	movs	r2, #0
 80044c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d106      	bne.n	80044de <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044d4:	4619      	mov	r1, r3
 80044d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80044d8:	f7fc fd6e 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044dc:	e002      	b.n	80044e4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80044de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80044e0:	f7ff fef8 	bl	80042d4 <HAL_UART_RxCpltCallback>
}
 80044e4:	bf00      	nop
 80044e6:	3770      	adds	r7, #112	; 0x70
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d108      	bne.n	800451a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	4619      	mov	r1, r3
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7fc fd50 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004518:	e002      	b.n	8004520 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff fee3 	bl	80042e6 <HAL_UART_RxHalfCpltCallback>
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf14      	ite	ne
 8004548:	2301      	movne	r3, #1
 800454a:	2300      	moveq	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b21      	cmp	r3, #33	; 0x21
 800455a:	d108      	bne.n	800456e <UART_DMAError+0x46>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2200      	movs	r2, #0
 8004566:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f000 f8c1 	bl	80046f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b22      	cmp	r3, #34	; 0x22
 800458e:	d108      	bne.n	80045a2 <UART_DMAError+0x7a>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800459c:	68b8      	ldr	r0, [r7, #8]
 800459e:	f000 f8ce 	bl	800473e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f043 0210 	orr.w	r2, r3, #16
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ae:	68b8      	ldr	r0, [r7, #8]
 80045b0:	f7ff fea2 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b098      	sub	sp, #96	; 0x60
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2222      	movs	r2, #34	; 0x22
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	4a3e      	ldr	r2, [pc, #248]	; (80046e4 <UART_Start_Receive_DMA+0x128>)
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <UART_Start_Receive_DMA+0x12c>)
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	4a3c      	ldr	r2, [pc, #240]	; (80046ec <UART_Start_Receive_DMA+0x130>)
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	2200      	movs	r2, #0
 8004602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004604:	f107 0308 	add.w	r3, r7, #8
 8004608:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	f7fd fe52 	bl	80022c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004620:	2300      	movs	r3, #0
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d019      	beq.n	8004672 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800464e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	65bb      	str	r3, [r7, #88]	; 0x58
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800465e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004660:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800466c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e5      	bne.n	800463e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3314      	adds	r3, #20
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	657b      	str	r3, [r7, #84]	; 0x54
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004692:	63ba      	str	r2, [r7, #56]	; 0x38
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e5      	bne.n	8004672 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	617b      	str	r3, [r7, #20]
   return(result);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046bc:	653b      	str	r3, [r7, #80]	; 0x50
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3314      	adds	r3, #20
 80046c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046c6:	627a      	str	r2, [r7, #36]	; 0x24
 80046c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6a39      	ldr	r1, [r7, #32]
 80046cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e5      	bne.n	80046a6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3760      	adds	r7, #96	; 0x60
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	080043c1 	.word	0x080043c1
 80046e8:	080044ed 	.word	0x080044ed
 80046ec:	08004529 	.word	0x08004529

080046f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60bb      	str	r3, [r7, #8]
   return(result);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	61ba      	str	r2, [r7, #24]
 800471a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	613b      	str	r3, [r7, #16]
   return(result);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004734:	bf00      	nop
 8004736:	3724      	adds	r7, #36	; 0x24
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800473e:	b480      	push	{r7}
 8004740:	b095      	sub	sp, #84	; 0x54
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800475c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004766:	643a      	str	r2, [r7, #64]	; 0x40
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800476c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	61fb      	str	r3, [r7, #28]
   return(result);
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	64bb      	str	r3, [r7, #72]	; 0x48
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800479a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d119      	bne.n	80047ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f023 0310 	bic.w	r3, r3, #16
 80047cc:	647b      	str	r3, [r7, #68]	; 0x44
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047d6:	61ba      	str	r2, [r7, #24]
 80047d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	6979      	ldr	r1, [r7, #20]
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	613b      	str	r3, [r7, #16]
   return(result);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e5      	bne.n	80047b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047f8:	bf00      	nop
 80047fa:	3754      	adds	r7, #84	; 0x54
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fd6b 	bl	80042f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b21      	cmp	r3, #33	; 0x21
 800483c:	d13e      	bne.n	80048bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	d114      	bne.n	8004872 <UART_Transmit_IT+0x48>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d110      	bne.n	8004872 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004864:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	621a      	str	r2, [r3, #32]
 8004870:	e008      	b.n	8004884 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	1c59      	adds	r1, r3, #1
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6211      	str	r1, [r2, #32]
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29b      	uxth	r3, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4619      	mov	r1, r3
 8004892:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10f      	bne.n	80048b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e000      	b.n	80048be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
  }
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fce1 	bl	80042b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08c      	sub	sp, #48	; 0x30
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b22      	cmp	r3, #34	; 0x22
 800490a:	f040 80ae 	bne.w	8004a6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004916:	d117      	bne.n	8004948 <UART_Receive_IT+0x50>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d113      	bne.n	8004948 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004936:	b29a      	uxth	r2, r3
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
 8004946:	e026      	b.n	8004996 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495a:	d007      	beq.n	800496c <UART_Receive_IT+0x74>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <UART_Receive_IT+0x82>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e008      	b.n	800498c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004986:	b2da      	uxtb	r2, r3
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4619      	mov	r1, r3
 80049a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d15d      	bne.n	8004a66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0220 	bic.w	r2, r2, #32
 80049b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d135      	bne.n	8004a5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	613b      	str	r3, [r7, #16]
   return(result);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f023 0310 	bic.w	r3, r3, #16
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	623a      	str	r2, [r7, #32]
 8004a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	69f9      	ldr	r1, [r7, #28]
 8004a1c:	6a3a      	ldr	r2, [r7, #32]
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e5      	bne.n	80049f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d10a      	bne.n	8004a4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7fc faaf 	bl	8000fb8 <HAL_UARTEx_RxEventCallback>
 8004a5a:	e002      	b.n	8004a62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff fc39 	bl	80042d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e002      	b.n	8004a6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3730      	adds	r7, #48	; 0x30
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004aae:	f023 030c 	bic.w	r3, r3, #12
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a2c      	ldr	r2, [pc, #176]	; (8004b88 <UART_SetConfig+0x114>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d103      	bne.n	8004ae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fe fb9c 	bl	8003218 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	e002      	b.n	8004aea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ae4:	f7fe fb84 	bl	80031f0 <HAL_RCC_GetPCLK1Freq>
 8004ae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009a      	lsls	r2, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	4a22      	ldr	r2, [pc, #136]	; (8004b8c <UART_SetConfig+0x118>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	0119      	lsls	r1, r3, #4
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009a      	lsls	r2, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <UART_SetConfig+0x118>)
 8004b22:	fba3 0302 	umull	r0, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2064      	movs	r0, #100	; 0x64
 8004b2a:	fb00 f303 	mul.w	r3, r0, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	3332      	adds	r3, #50	; 0x32
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <UART_SetConfig+0x118>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b40:	4419      	add	r1, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	441a      	add	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <UART_SetConfig+0x118>)
 8004b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	2064      	movs	r0, #100	; 0x64
 8004b62:	fb00 f303 	mul.w	r3, r0, r3
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	3332      	adds	r3, #50	; 0x32
 8004b6c:	4a07      	ldr	r2, [pc, #28]	; (8004b8c <UART_SetConfig+0x118>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	f003 020f 	and.w	r2, r3, #15
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	51eb851f 	.word	0x51eb851f

08004b90 <__errno>:
 8004b90:	4b01      	ldr	r3, [pc, #4]	; (8004b98 <__errno+0x8>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000034 	.word	0x20000034

08004b9c <__libc_init_array>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	4d0c      	ldr	r5, [pc, #48]	; (8004bd4 <__libc_init_array+0x38>)
 8004ba2:	4c0d      	ldr	r4, [pc, #52]	; (8004bd8 <__libc_init_array+0x3c>)
 8004ba4:	1b64      	subs	r4, r4, r5
 8004ba6:	10a4      	asrs	r4, r4, #2
 8004ba8:	42a6      	cmp	r6, r4
 8004baa:	d109      	bne.n	8004bc0 <__libc_init_array+0x24>
 8004bac:	f003 fb16 	bl	80081dc <_init>
 8004bb0:	2600      	movs	r6, #0
 8004bb2:	4d0a      	ldr	r5, [pc, #40]	; (8004bdc <__libc_init_array+0x40>)
 8004bb4:	4c0a      	ldr	r4, [pc, #40]	; (8004be0 <__libc_init_array+0x44>)
 8004bb6:	1b64      	subs	r4, r4, r5
 8004bb8:	10a4      	asrs	r4, r4, #2
 8004bba:	42a6      	cmp	r6, r4
 8004bbc:	d105      	bne.n	8004bca <__libc_init_array+0x2e>
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
 8004bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bc4:	4798      	blx	r3
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7ee      	b.n	8004ba8 <__libc_init_array+0xc>
 8004bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bce:	4798      	blx	r3
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	e7f2      	b.n	8004bba <__libc_init_array+0x1e>
 8004bd4:	08008768 	.word	0x08008768
 8004bd8:	08008768 	.word	0x08008768
 8004bdc:	08008768 	.word	0x08008768
 8004be0:	0800876c 	.word	0x0800876c

08004be4 <memcpy>:
 8004be4:	440a      	add	r2, r1
 8004be6:	4291      	cmp	r1, r2
 8004be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bec:	d100      	bne.n	8004bf0 <memcpy+0xc>
 8004bee:	4770      	bx	lr
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf6:	4291      	cmp	r1, r2
 8004bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bfc:	d1f9      	bne.n	8004bf2 <memcpy+0xe>
 8004bfe:	bd10      	pop	{r4, pc}

08004c00 <memset>:
 8004c00:	4603      	mov	r3, r0
 8004c02:	4402      	add	r2, r0
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d100      	bne.n	8004c0a <memset+0xa>
 8004c08:	4770      	bx	lr
 8004c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0e:	e7f9      	b.n	8004c04 <memset+0x4>

08004c10 <_scanf_float>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	b087      	sub	sp, #28
 8004c16:	9303      	str	r3, [sp, #12]
 8004c18:	688b      	ldr	r3, [r1, #8]
 8004c1a:	4617      	mov	r7, r2
 8004c1c:	1e5a      	subs	r2, r3, #1
 8004c1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c22:	bf85      	ittet	hi
 8004c24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c28:	195b      	addhi	r3, r3, r5
 8004c2a:	2300      	movls	r3, #0
 8004c2c:	9302      	strhi	r3, [sp, #8]
 8004c2e:	bf88      	it	hi
 8004c30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c34:	468b      	mov	fp, r1
 8004c36:	f04f 0500 	mov.w	r5, #0
 8004c3a:	bf8c      	ite	hi
 8004c3c:	608b      	strhi	r3, [r1, #8]
 8004c3e:	9302      	strls	r3, [sp, #8]
 8004c40:	680b      	ldr	r3, [r1, #0]
 8004c42:	4680      	mov	r8, r0
 8004c44:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004c48:	f84b 3b1c 	str.w	r3, [fp], #28
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	465e      	mov	r6, fp
 8004c50:	46aa      	mov	sl, r5
 8004c52:	46a9      	mov	r9, r5
 8004c54:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004c58:	9501      	str	r5, [sp, #4]
 8004c5a:	68a2      	ldr	r2, [r4, #8]
 8004c5c:	b152      	cbz	r2, 8004c74 <_scanf_float+0x64>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b4e      	cmp	r3, #78	; 0x4e
 8004c64:	d864      	bhi.n	8004d30 <_scanf_float+0x120>
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d83c      	bhi.n	8004ce4 <_scanf_float+0xd4>
 8004c6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004c6e:	b2c8      	uxtb	r0, r1
 8004c70:	280e      	cmp	r0, #14
 8004c72:	d93a      	bls.n	8004cea <_scanf_float+0xda>
 8004c74:	f1b9 0f00 	cmp.w	r9, #0
 8004c78:	d003      	beq.n	8004c82 <_scanf_float+0x72>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c86:	f1ba 0f01 	cmp.w	sl, #1
 8004c8a:	f200 8113 	bhi.w	8004eb4 <_scanf_float+0x2a4>
 8004c8e:	455e      	cmp	r6, fp
 8004c90:	f200 8105 	bhi.w	8004e9e <_scanf_float+0x28e>
 8004c94:	2501      	movs	r5, #1
 8004c96:	4628      	mov	r0, r5
 8004c98:	b007      	add	sp, #28
 8004c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004ca2:	2a0d      	cmp	r2, #13
 8004ca4:	d8e6      	bhi.n	8004c74 <_scanf_float+0x64>
 8004ca6:	a101      	add	r1, pc, #4	; (adr r1, 8004cac <_scanf_float+0x9c>)
 8004ca8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004cac:	08004deb 	.word	0x08004deb
 8004cb0:	08004c75 	.word	0x08004c75
 8004cb4:	08004c75 	.word	0x08004c75
 8004cb8:	08004c75 	.word	0x08004c75
 8004cbc:	08004e4b 	.word	0x08004e4b
 8004cc0:	08004e23 	.word	0x08004e23
 8004cc4:	08004c75 	.word	0x08004c75
 8004cc8:	08004c75 	.word	0x08004c75
 8004ccc:	08004df9 	.word	0x08004df9
 8004cd0:	08004c75 	.word	0x08004c75
 8004cd4:	08004c75 	.word	0x08004c75
 8004cd8:	08004c75 	.word	0x08004c75
 8004cdc:	08004c75 	.word	0x08004c75
 8004ce0:	08004db1 	.word	0x08004db1
 8004ce4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004ce8:	e7db      	b.n	8004ca2 <_scanf_float+0x92>
 8004cea:	290e      	cmp	r1, #14
 8004cec:	d8c2      	bhi.n	8004c74 <_scanf_float+0x64>
 8004cee:	a001      	add	r0, pc, #4	; (adr r0, 8004cf4 <_scanf_float+0xe4>)
 8004cf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004cf4:	08004da3 	.word	0x08004da3
 8004cf8:	08004c75 	.word	0x08004c75
 8004cfc:	08004da3 	.word	0x08004da3
 8004d00:	08004e37 	.word	0x08004e37
 8004d04:	08004c75 	.word	0x08004c75
 8004d08:	08004d51 	.word	0x08004d51
 8004d0c:	08004d8d 	.word	0x08004d8d
 8004d10:	08004d8d 	.word	0x08004d8d
 8004d14:	08004d8d 	.word	0x08004d8d
 8004d18:	08004d8d 	.word	0x08004d8d
 8004d1c:	08004d8d 	.word	0x08004d8d
 8004d20:	08004d8d 	.word	0x08004d8d
 8004d24:	08004d8d 	.word	0x08004d8d
 8004d28:	08004d8d 	.word	0x08004d8d
 8004d2c:	08004d8d 	.word	0x08004d8d
 8004d30:	2b6e      	cmp	r3, #110	; 0x6e
 8004d32:	d809      	bhi.n	8004d48 <_scanf_float+0x138>
 8004d34:	2b60      	cmp	r3, #96	; 0x60
 8004d36:	d8b2      	bhi.n	8004c9e <_scanf_float+0x8e>
 8004d38:	2b54      	cmp	r3, #84	; 0x54
 8004d3a:	d077      	beq.n	8004e2c <_scanf_float+0x21c>
 8004d3c:	2b59      	cmp	r3, #89	; 0x59
 8004d3e:	d199      	bne.n	8004c74 <_scanf_float+0x64>
 8004d40:	2d07      	cmp	r5, #7
 8004d42:	d197      	bne.n	8004c74 <_scanf_float+0x64>
 8004d44:	2508      	movs	r5, #8
 8004d46:	e029      	b.n	8004d9c <_scanf_float+0x18c>
 8004d48:	2b74      	cmp	r3, #116	; 0x74
 8004d4a:	d06f      	beq.n	8004e2c <_scanf_float+0x21c>
 8004d4c:	2b79      	cmp	r3, #121	; 0x79
 8004d4e:	e7f6      	b.n	8004d3e <_scanf_float+0x12e>
 8004d50:	6821      	ldr	r1, [r4, #0]
 8004d52:	05c8      	lsls	r0, r1, #23
 8004d54:	d51a      	bpl.n	8004d8c <_scanf_float+0x17c>
 8004d56:	9b02      	ldr	r3, [sp, #8]
 8004d58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004d5c:	6021      	str	r1, [r4, #0]
 8004d5e:	f109 0901 	add.w	r9, r9, #1
 8004d62:	b11b      	cbz	r3, 8004d6c <_scanf_float+0x15c>
 8004d64:	3b01      	subs	r3, #1
 8004d66:	3201      	adds	r2, #1
 8004d68:	9302      	str	r3, [sp, #8]
 8004d6a:	60a2      	str	r2, [r4, #8]
 8004d6c:	68a3      	ldr	r3, [r4, #8]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	60a3      	str	r3, [r4, #8]
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	3301      	adds	r3, #1
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	f340 8084 	ble.w	8004e8c <_scanf_float+0x27c>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	e766      	b.n	8004c5a <_scanf_float+0x4a>
 8004d8c:	eb1a 0f05 	cmn.w	sl, r5
 8004d90:	f47f af70 	bne.w	8004c74 <_scanf_float+0x64>
 8004d94:	6822      	ldr	r2, [r4, #0]
 8004d96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d9a:	6022      	str	r2, [r4, #0]
 8004d9c:	f806 3b01 	strb.w	r3, [r6], #1
 8004da0:	e7e4      	b.n	8004d6c <_scanf_float+0x15c>
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	0610      	lsls	r0, r2, #24
 8004da6:	f57f af65 	bpl.w	8004c74 <_scanf_float+0x64>
 8004daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dae:	e7f4      	b.n	8004d9a <_scanf_float+0x18a>
 8004db0:	f1ba 0f00 	cmp.w	sl, #0
 8004db4:	d10e      	bne.n	8004dd4 <_scanf_float+0x1c4>
 8004db6:	f1b9 0f00 	cmp.w	r9, #0
 8004dba:	d10e      	bne.n	8004dda <_scanf_float+0x1ca>
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004dc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004dc6:	d108      	bne.n	8004dda <_scanf_float+0x1ca>
 8004dc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004dcc:	f04f 0a01 	mov.w	sl, #1
 8004dd0:	6022      	str	r2, [r4, #0]
 8004dd2:	e7e3      	b.n	8004d9c <_scanf_float+0x18c>
 8004dd4:	f1ba 0f02 	cmp.w	sl, #2
 8004dd8:	d055      	beq.n	8004e86 <_scanf_float+0x276>
 8004dda:	2d01      	cmp	r5, #1
 8004ddc:	d002      	beq.n	8004de4 <_scanf_float+0x1d4>
 8004dde:	2d04      	cmp	r5, #4
 8004de0:	f47f af48 	bne.w	8004c74 <_scanf_float+0x64>
 8004de4:	3501      	adds	r5, #1
 8004de6:	b2ed      	uxtb	r5, r5
 8004de8:	e7d8      	b.n	8004d9c <_scanf_float+0x18c>
 8004dea:	f1ba 0f01 	cmp.w	sl, #1
 8004dee:	f47f af41 	bne.w	8004c74 <_scanf_float+0x64>
 8004df2:	f04f 0a02 	mov.w	sl, #2
 8004df6:	e7d1      	b.n	8004d9c <_scanf_float+0x18c>
 8004df8:	b97d      	cbnz	r5, 8004e1a <_scanf_float+0x20a>
 8004dfa:	f1b9 0f00 	cmp.w	r9, #0
 8004dfe:	f47f af3c 	bne.w	8004c7a <_scanf_float+0x6a>
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e0c:	f47f af39 	bne.w	8004c82 <_scanf_float+0x72>
 8004e10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e14:	2501      	movs	r5, #1
 8004e16:	6022      	str	r2, [r4, #0]
 8004e18:	e7c0      	b.n	8004d9c <_scanf_float+0x18c>
 8004e1a:	2d03      	cmp	r5, #3
 8004e1c:	d0e2      	beq.n	8004de4 <_scanf_float+0x1d4>
 8004e1e:	2d05      	cmp	r5, #5
 8004e20:	e7de      	b.n	8004de0 <_scanf_float+0x1d0>
 8004e22:	2d02      	cmp	r5, #2
 8004e24:	f47f af26 	bne.w	8004c74 <_scanf_float+0x64>
 8004e28:	2503      	movs	r5, #3
 8004e2a:	e7b7      	b.n	8004d9c <_scanf_float+0x18c>
 8004e2c:	2d06      	cmp	r5, #6
 8004e2e:	f47f af21 	bne.w	8004c74 <_scanf_float+0x64>
 8004e32:	2507      	movs	r5, #7
 8004e34:	e7b2      	b.n	8004d9c <_scanf_float+0x18c>
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	0591      	lsls	r1, r2, #22
 8004e3a:	f57f af1b 	bpl.w	8004c74 <_scanf_float+0x64>
 8004e3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004e42:	6022      	str	r2, [r4, #0]
 8004e44:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e48:	e7a8      	b.n	8004d9c <_scanf_float+0x18c>
 8004e4a:	6822      	ldr	r2, [r4, #0]
 8004e4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004e50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e54:	d006      	beq.n	8004e64 <_scanf_float+0x254>
 8004e56:	0550      	lsls	r0, r2, #21
 8004e58:	f57f af0c 	bpl.w	8004c74 <_scanf_float+0x64>
 8004e5c:	f1b9 0f00 	cmp.w	r9, #0
 8004e60:	f43f af0f 	beq.w	8004c82 <_scanf_float+0x72>
 8004e64:	0591      	lsls	r1, r2, #22
 8004e66:	bf58      	it	pl
 8004e68:	9901      	ldrpl	r1, [sp, #4]
 8004e6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e6e:	bf58      	it	pl
 8004e70:	eba9 0101 	subpl.w	r1, r9, r1
 8004e74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004e78:	f04f 0900 	mov.w	r9, #0
 8004e7c:	bf58      	it	pl
 8004e7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e82:	6022      	str	r2, [r4, #0]
 8004e84:	e78a      	b.n	8004d9c <_scanf_float+0x18c>
 8004e86:	f04f 0a03 	mov.w	sl, #3
 8004e8a:	e787      	b.n	8004d9c <_scanf_float+0x18c>
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	4640      	mov	r0, r8
 8004e90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e94:	4798      	blx	r3
 8004e96:	2800      	cmp	r0, #0
 8004e98:	f43f aedf 	beq.w	8004c5a <_scanf_float+0x4a>
 8004e9c:	e6ea      	b.n	8004c74 <_scanf_float+0x64>
 8004e9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ea2:	463a      	mov	r2, r7
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004eaa:	4798      	blx	r3
 8004eac:	6923      	ldr	r3, [r4, #16]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	6123      	str	r3, [r4, #16]
 8004eb2:	e6ec      	b.n	8004c8e <_scanf_float+0x7e>
 8004eb4:	1e6b      	subs	r3, r5, #1
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d825      	bhi.n	8004f06 <_scanf_float+0x2f6>
 8004eba:	2d02      	cmp	r5, #2
 8004ebc:	d836      	bhi.n	8004f2c <_scanf_float+0x31c>
 8004ebe:	455e      	cmp	r6, fp
 8004ec0:	f67f aee8 	bls.w	8004c94 <_scanf_float+0x84>
 8004ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ec8:	463a      	mov	r2, r7
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ed0:	4798      	blx	r3
 8004ed2:	6923      	ldr	r3, [r4, #16]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	e7f1      	b.n	8004ebe <_scanf_float+0x2ae>
 8004eda:	9802      	ldr	r0, [sp, #8]
 8004edc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ee0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	9002      	str	r0, [sp, #8]
 8004ee8:	4640      	mov	r0, r8
 8004eea:	4798      	blx	r3
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ef6:	fa5f fa8a 	uxtb.w	sl, sl
 8004efa:	f1ba 0f02 	cmp.w	sl, #2
 8004efe:	d1ec      	bne.n	8004eda <_scanf_float+0x2ca>
 8004f00:	3d03      	subs	r5, #3
 8004f02:	b2ed      	uxtb	r5, r5
 8004f04:	1b76      	subs	r6, r6, r5
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	05da      	lsls	r2, r3, #23
 8004f0a:	d52f      	bpl.n	8004f6c <_scanf_float+0x35c>
 8004f0c:	055b      	lsls	r3, r3, #21
 8004f0e:	d510      	bpl.n	8004f32 <_scanf_float+0x322>
 8004f10:	455e      	cmp	r6, fp
 8004f12:	f67f aebf 	bls.w	8004c94 <_scanf_float+0x84>
 8004f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f1a:	463a      	mov	r2, r7
 8004f1c:	4640      	mov	r0, r8
 8004f1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f22:	4798      	blx	r3
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	6123      	str	r3, [r4, #16]
 8004f2a:	e7f1      	b.n	8004f10 <_scanf_float+0x300>
 8004f2c:	46aa      	mov	sl, r5
 8004f2e:	9602      	str	r6, [sp, #8]
 8004f30:	e7df      	b.n	8004ef2 <_scanf_float+0x2e2>
 8004f32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	2965      	cmp	r1, #101	; 0x65
 8004f3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	d00c      	beq.n	8004f60 <_scanf_float+0x350>
 8004f46:	2945      	cmp	r1, #69	; 0x45
 8004f48:	d00a      	beq.n	8004f60 <_scanf_float+0x350>
 8004f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f4e:	463a      	mov	r2, r7
 8004f50:	4640      	mov	r0, r8
 8004f52:	4798      	blx	r3
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	1eb5      	subs	r5, r6, #2
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	463a      	mov	r2, r7
 8004f62:	4640      	mov	r0, r8
 8004f64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f68:	4798      	blx	r3
 8004f6a:	462e      	mov	r6, r5
 8004f6c:	6825      	ldr	r5, [r4, #0]
 8004f6e:	f015 0510 	ands.w	r5, r5, #16
 8004f72:	d155      	bne.n	8005020 <_scanf_float+0x410>
 8004f74:	7035      	strb	r5, [r6, #0]
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f80:	d11b      	bne.n	8004fba <_scanf_float+0x3aa>
 8004f82:	9b01      	ldr	r3, [sp, #4]
 8004f84:	454b      	cmp	r3, r9
 8004f86:	eba3 0209 	sub.w	r2, r3, r9
 8004f8a:	d123      	bne.n	8004fd4 <_scanf_float+0x3c4>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	4659      	mov	r1, fp
 8004f90:	4640      	mov	r0, r8
 8004f92:	f000 fec9 	bl	8005d28 <_strtod_r>
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	f012 0f02 	tst.w	r2, #2
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460f      	mov	r7, r1
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	d021      	beq.n	8004fea <_scanf_float+0x3da>
 8004fa6:	1d1a      	adds	r2, r3, #4
 8004fa8:	9903      	ldr	r1, [sp, #12]
 8004faa:	600a      	str	r2, [r1, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	e9c3 6700 	strd	r6, r7, [r3]
 8004fb2:	68e3      	ldr	r3, [r4, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60e3      	str	r3, [r4, #12]
 8004fb8:	e66d      	b.n	8004c96 <_scanf_float+0x86>
 8004fba:	9b04      	ldr	r3, [sp, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0e5      	beq.n	8004f8c <_scanf_float+0x37c>
 8004fc0:	9905      	ldr	r1, [sp, #20]
 8004fc2:	230a      	movs	r3, #10
 8004fc4:	462a      	mov	r2, r5
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	3101      	adds	r1, #1
 8004fca:	f000 ff2f 	bl	8005e2c <_strtol_r>
 8004fce:	9b04      	ldr	r3, [sp, #16]
 8004fd0:	9e05      	ldr	r6, [sp, #20]
 8004fd2:	1ac2      	subs	r2, r0, r3
 8004fd4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004fd8:	429e      	cmp	r6, r3
 8004fda:	bf28      	it	cs
 8004fdc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	4910      	ldr	r1, [pc, #64]	; (8005024 <_scanf_float+0x414>)
 8004fe4:	f000 f826 	bl	8005034 <siprintf>
 8004fe8:	e7d0      	b.n	8004f8c <_scanf_float+0x37c>
 8004fea:	f012 0f04 	tst.w	r2, #4
 8004fee:	f103 0204 	add.w	r2, r3, #4
 8004ff2:	d1d9      	bne.n	8004fa8 <_scanf_float+0x398>
 8004ff4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004ff8:	f8cc 2000 	str.w	r2, [ip]
 8004ffc:	f8d3 8000 	ldr.w	r8, [r3]
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	f7fb fd02 	bl	8000a0c <__aeabi_dcmpun>
 8005008:	b128      	cbz	r0, 8005016 <_scanf_float+0x406>
 800500a:	4807      	ldr	r0, [pc, #28]	; (8005028 <_scanf_float+0x418>)
 800500c:	f000 f80e 	bl	800502c <nanf>
 8005010:	f8c8 0000 	str.w	r0, [r8]
 8005014:	e7cd      	b.n	8004fb2 <_scanf_float+0x3a2>
 8005016:	4630      	mov	r0, r6
 8005018:	4639      	mov	r1, r7
 800501a:	f7fb fd2d 	bl	8000a78 <__aeabi_d2f>
 800501e:	e7f7      	b.n	8005010 <_scanf_float+0x400>
 8005020:	2500      	movs	r5, #0
 8005022:	e638      	b.n	8004c96 <_scanf_float+0x86>
 8005024:	08008330 	.word	0x08008330
 8005028:	080083d3 	.word	0x080083d3

0800502c <nanf>:
 800502c:	4800      	ldr	r0, [pc, #0]	; (8005030 <nanf+0x4>)
 800502e:	4770      	bx	lr
 8005030:	7fc00000 	.word	0x7fc00000

08005034 <siprintf>:
 8005034:	b40e      	push	{r1, r2, r3}
 8005036:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800503a:	b500      	push	{lr}
 800503c:	b09c      	sub	sp, #112	; 0x70
 800503e:	ab1d      	add	r3, sp, #116	; 0x74
 8005040:	9002      	str	r0, [sp, #8]
 8005042:	9006      	str	r0, [sp, #24]
 8005044:	9107      	str	r1, [sp, #28]
 8005046:	9104      	str	r1, [sp, #16]
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <siprintf+0x38>)
 800504a:	4909      	ldr	r1, [pc, #36]	; (8005070 <siprintf+0x3c>)
 800504c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005050:	9105      	str	r1, [sp, #20]
 8005052:	6800      	ldr	r0, [r0, #0]
 8005054:	a902      	add	r1, sp, #8
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	f002 f8d2 	bl	8007200 <_svfiprintf_r>
 800505c:	2200      	movs	r2, #0
 800505e:	9b02      	ldr	r3, [sp, #8]
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	b01c      	add	sp, #112	; 0x70
 8005064:	f85d eb04 	ldr.w	lr, [sp], #4
 8005068:	b003      	add	sp, #12
 800506a:	4770      	bx	lr
 800506c:	20000034 	.word	0x20000034
 8005070:	ffff0208 	.word	0xffff0208

08005074 <__sread>:
 8005074:	b510      	push	{r4, lr}
 8005076:	460c      	mov	r4, r1
 8005078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507c:	f002 fcae 	bl	80079dc <_read_r>
 8005080:	2800      	cmp	r0, #0
 8005082:	bfab      	itete	ge
 8005084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005086:	89a3      	ldrhlt	r3, [r4, #12]
 8005088:	181b      	addge	r3, r3, r0
 800508a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800508e:	bfac      	ite	ge
 8005090:	6563      	strge	r3, [r4, #84]	; 0x54
 8005092:	81a3      	strhlt	r3, [r4, #12]
 8005094:	bd10      	pop	{r4, pc}

08005096 <__swrite>:
 8005096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509a:	461f      	mov	r7, r3
 800509c:	898b      	ldrh	r3, [r1, #12]
 800509e:	4605      	mov	r5, r0
 80050a0:	05db      	lsls	r3, r3, #23
 80050a2:	460c      	mov	r4, r1
 80050a4:	4616      	mov	r6, r2
 80050a6:	d505      	bpl.n	80050b4 <__swrite+0x1e>
 80050a8:	2302      	movs	r3, #2
 80050aa:	2200      	movs	r2, #0
 80050ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b0:	f001 fa76 	bl	80065a0 <_lseek_r>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	4632      	mov	r2, r6
 80050b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050bc:	81a3      	strh	r3, [r4, #12]
 80050be:	4628      	mov	r0, r5
 80050c0:	463b      	mov	r3, r7
 80050c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ca:	f000 beb1 	b.w	8005e30 <_write_r>

080050ce <__sseek>:
 80050ce:	b510      	push	{r4, lr}
 80050d0:	460c      	mov	r4, r1
 80050d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d6:	f001 fa63 	bl	80065a0 <_lseek_r>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	bf15      	itete	ne
 80050e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ea:	81a3      	strheq	r3, [r4, #12]
 80050ec:	bf18      	it	ne
 80050ee:	81a3      	strhne	r3, [r4, #12]
 80050f0:	bd10      	pop	{r4, pc}

080050f2 <__sclose>:
 80050f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f6:	f000 becb 	b.w	8005e90 <_close_r>

080050fa <strchr>:
 80050fa:	4603      	mov	r3, r0
 80050fc:	b2c9      	uxtb	r1, r1
 80050fe:	4618      	mov	r0, r3
 8005100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005104:	b112      	cbz	r2, 800510c <strchr+0x12>
 8005106:	428a      	cmp	r2, r1
 8005108:	d1f9      	bne.n	80050fe <strchr+0x4>
 800510a:	4770      	bx	lr
 800510c:	2900      	cmp	r1, #0
 800510e:	bf18      	it	ne
 8005110:	2000      	movne	r0, #0
 8005112:	4770      	bx	lr

08005114 <sulp>:
 8005114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005118:	460f      	mov	r7, r1
 800511a:	4690      	mov	r8, r2
 800511c:	f001 fddc 	bl	8006cd8 <__ulp>
 8005120:	4604      	mov	r4, r0
 8005122:	460d      	mov	r5, r1
 8005124:	f1b8 0f00 	cmp.w	r8, #0
 8005128:	d011      	beq.n	800514e <sulp+0x3a>
 800512a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800512e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005132:	2b00      	cmp	r3, #0
 8005134:	dd0b      	ble.n	800514e <sulp+0x3a>
 8005136:	2400      	movs	r4, #0
 8005138:	051b      	lsls	r3, r3, #20
 800513a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800513e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005142:	4622      	mov	r2, r4
 8005144:	462b      	mov	r3, r5
 8005146:	f7fb f9c7 	bl	80004d8 <__aeabi_dmul>
 800514a:	4604      	mov	r4, r0
 800514c:	460d      	mov	r5, r1
 800514e:	4620      	mov	r0, r4
 8005150:	4629      	mov	r1, r5
 8005152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005158 <_strtod_l>:
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	469b      	mov	fp, r3
 800515e:	2300      	movs	r3, #0
 8005160:	b09f      	sub	sp, #124	; 0x7c
 8005162:	931a      	str	r3, [sp, #104]	; 0x68
 8005164:	4b9e      	ldr	r3, [pc, #632]	; (80053e0 <_strtod_l+0x288>)
 8005166:	4682      	mov	sl, r0
 8005168:	681f      	ldr	r7, [r3, #0]
 800516a:	460e      	mov	r6, r1
 800516c:	4638      	mov	r0, r7
 800516e:	9215      	str	r2, [sp, #84]	; 0x54
 8005170:	f7fa ffee 	bl	8000150 <strlen>
 8005174:	f04f 0800 	mov.w	r8, #0
 8005178:	4604      	mov	r4, r0
 800517a:	f04f 0900 	mov.w	r9, #0
 800517e:	9619      	str	r6, [sp, #100]	; 0x64
 8005180:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005182:	781a      	ldrb	r2, [r3, #0]
 8005184:	2a2b      	cmp	r2, #43	; 0x2b
 8005186:	d04c      	beq.n	8005222 <_strtod_l+0xca>
 8005188:	d83a      	bhi.n	8005200 <_strtod_l+0xa8>
 800518a:	2a0d      	cmp	r2, #13
 800518c:	d833      	bhi.n	80051f6 <_strtod_l+0x9e>
 800518e:	2a08      	cmp	r2, #8
 8005190:	d833      	bhi.n	80051fa <_strtod_l+0xa2>
 8005192:	2a00      	cmp	r2, #0
 8005194:	d03d      	beq.n	8005212 <_strtod_l+0xba>
 8005196:	2300      	movs	r3, #0
 8005198:	930a      	str	r3, [sp, #40]	; 0x28
 800519a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800519c:	782b      	ldrb	r3, [r5, #0]
 800519e:	2b30      	cmp	r3, #48	; 0x30
 80051a0:	f040 80aa 	bne.w	80052f8 <_strtod_l+0x1a0>
 80051a4:	786b      	ldrb	r3, [r5, #1]
 80051a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80051aa:	2b58      	cmp	r3, #88	; 0x58
 80051ac:	d166      	bne.n	800527c <_strtod_l+0x124>
 80051ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b0:	4650      	mov	r0, sl
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	ab1a      	add	r3, sp, #104	; 0x68
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	4a8a      	ldr	r2, [pc, #552]	; (80053e4 <_strtod_l+0x28c>)
 80051ba:	f8cd b008 	str.w	fp, [sp, #8]
 80051be:	ab1b      	add	r3, sp, #108	; 0x6c
 80051c0:	a919      	add	r1, sp, #100	; 0x64
 80051c2:	f000 feef 	bl	8005fa4 <__gethex>
 80051c6:	f010 0607 	ands.w	r6, r0, #7
 80051ca:	4604      	mov	r4, r0
 80051cc:	d005      	beq.n	80051da <_strtod_l+0x82>
 80051ce:	2e06      	cmp	r6, #6
 80051d0:	d129      	bne.n	8005226 <_strtod_l+0xce>
 80051d2:	2300      	movs	r3, #0
 80051d4:	3501      	adds	r5, #1
 80051d6:	9519      	str	r5, [sp, #100]	; 0x64
 80051d8:	930a      	str	r3, [sp, #40]	; 0x28
 80051da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f040 858a 	bne.w	8005cf6 <_strtod_l+0xb9e>
 80051e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e4:	b1d3      	cbz	r3, 800521c <_strtod_l+0xc4>
 80051e6:	4642      	mov	r2, r8
 80051e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80051ec:	4610      	mov	r0, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	b01f      	add	sp, #124	; 0x7c
 80051f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f6:	2a20      	cmp	r2, #32
 80051f8:	d1cd      	bne.n	8005196 <_strtod_l+0x3e>
 80051fa:	3301      	adds	r3, #1
 80051fc:	9319      	str	r3, [sp, #100]	; 0x64
 80051fe:	e7bf      	b.n	8005180 <_strtod_l+0x28>
 8005200:	2a2d      	cmp	r2, #45	; 0x2d
 8005202:	d1c8      	bne.n	8005196 <_strtod_l+0x3e>
 8005204:	2201      	movs	r2, #1
 8005206:	920a      	str	r2, [sp, #40]	; 0x28
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	9219      	str	r2, [sp, #100]	; 0x64
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1c3      	bne.n	800519a <_strtod_l+0x42>
 8005212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005214:	9619      	str	r6, [sp, #100]	; 0x64
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 856b 	bne.w	8005cf2 <_strtod_l+0xb9a>
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	e7e4      	b.n	80051ec <_strtod_l+0x94>
 8005222:	2200      	movs	r2, #0
 8005224:	e7ef      	b.n	8005206 <_strtod_l+0xae>
 8005226:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005228:	b13a      	cbz	r2, 800523a <_strtod_l+0xe2>
 800522a:	2135      	movs	r1, #53	; 0x35
 800522c:	a81c      	add	r0, sp, #112	; 0x70
 800522e:	f001 fe57 	bl	8006ee0 <__copybits>
 8005232:	4650      	mov	r0, sl
 8005234:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005236:	f001 fa1f 	bl	8006678 <_Bfree>
 800523a:	3e01      	subs	r6, #1
 800523c:	2e04      	cmp	r6, #4
 800523e:	d806      	bhi.n	800524e <_strtod_l+0xf6>
 8005240:	e8df f006 	tbb	[pc, r6]
 8005244:	1714030a 	.word	0x1714030a
 8005248:	0a          	.byte	0x0a
 8005249:	00          	.byte	0x00
 800524a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800524e:	0721      	lsls	r1, r4, #28
 8005250:	d5c3      	bpl.n	80051da <_strtod_l+0x82>
 8005252:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005256:	e7c0      	b.n	80051da <_strtod_l+0x82>
 8005258:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800525a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800525e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005262:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005266:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800526a:	e7f0      	b.n	800524e <_strtod_l+0xf6>
 800526c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80053e8 <_strtod_l+0x290>
 8005270:	e7ed      	b.n	800524e <_strtod_l+0xf6>
 8005272:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005276:	f04f 38ff 	mov.w	r8, #4294967295
 800527a:	e7e8      	b.n	800524e <_strtod_l+0xf6>
 800527c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	9219      	str	r2, [sp, #100]	; 0x64
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	2b30      	cmp	r3, #48	; 0x30
 8005286:	d0f9      	beq.n	800527c <_strtod_l+0x124>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0a6      	beq.n	80051da <_strtod_l+0x82>
 800528c:	2301      	movs	r3, #1
 800528e:	9307      	str	r3, [sp, #28]
 8005290:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005292:	220a      	movs	r2, #10
 8005294:	9308      	str	r3, [sp, #32]
 8005296:	2300      	movs	r3, #0
 8005298:	469b      	mov	fp, r3
 800529a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800529e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80052a0:	7805      	ldrb	r5, [r0, #0]
 80052a2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80052a6:	b2d9      	uxtb	r1, r3
 80052a8:	2909      	cmp	r1, #9
 80052aa:	d927      	bls.n	80052fc <_strtod_l+0x1a4>
 80052ac:	4622      	mov	r2, r4
 80052ae:	4639      	mov	r1, r7
 80052b0:	f002 fbbc 	bl	8007a2c <strncmp>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d033      	beq.n	8005320 <_strtod_l+0x1c8>
 80052b8:	2000      	movs	r0, #0
 80052ba:	462a      	mov	r2, r5
 80052bc:	465c      	mov	r4, fp
 80052be:	4603      	mov	r3, r0
 80052c0:	9004      	str	r0, [sp, #16]
 80052c2:	2a65      	cmp	r2, #101	; 0x65
 80052c4:	d001      	beq.n	80052ca <_strtod_l+0x172>
 80052c6:	2a45      	cmp	r2, #69	; 0x45
 80052c8:	d114      	bne.n	80052f4 <_strtod_l+0x19c>
 80052ca:	b91c      	cbnz	r4, 80052d4 <_strtod_l+0x17c>
 80052cc:	9a07      	ldr	r2, [sp, #28]
 80052ce:	4302      	orrs	r2, r0
 80052d0:	d09f      	beq.n	8005212 <_strtod_l+0xba>
 80052d2:	2400      	movs	r4, #0
 80052d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80052d6:	1c72      	adds	r2, r6, #1
 80052d8:	9219      	str	r2, [sp, #100]	; 0x64
 80052da:	7872      	ldrb	r2, [r6, #1]
 80052dc:	2a2b      	cmp	r2, #43	; 0x2b
 80052de:	d079      	beq.n	80053d4 <_strtod_l+0x27c>
 80052e0:	2a2d      	cmp	r2, #45	; 0x2d
 80052e2:	f000 8083 	beq.w	80053ec <_strtod_l+0x294>
 80052e6:	2700      	movs	r7, #0
 80052e8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052ec:	2909      	cmp	r1, #9
 80052ee:	f240 8083 	bls.w	80053f8 <_strtod_l+0x2a0>
 80052f2:	9619      	str	r6, [sp, #100]	; 0x64
 80052f4:	2500      	movs	r5, #0
 80052f6:	e09f      	b.n	8005438 <_strtod_l+0x2e0>
 80052f8:	2300      	movs	r3, #0
 80052fa:	e7c8      	b.n	800528e <_strtod_l+0x136>
 80052fc:	f1bb 0f08 	cmp.w	fp, #8
 8005300:	bfd5      	itete	le
 8005302:	9906      	ldrle	r1, [sp, #24]
 8005304:	9905      	ldrgt	r1, [sp, #20]
 8005306:	fb02 3301 	mlale	r3, r2, r1, r3
 800530a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800530e:	f100 0001 	add.w	r0, r0, #1
 8005312:	bfd4      	ite	le
 8005314:	9306      	strle	r3, [sp, #24]
 8005316:	9305      	strgt	r3, [sp, #20]
 8005318:	f10b 0b01 	add.w	fp, fp, #1
 800531c:	9019      	str	r0, [sp, #100]	; 0x64
 800531e:	e7be      	b.n	800529e <_strtod_l+0x146>
 8005320:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005322:	191a      	adds	r2, r3, r4
 8005324:	9219      	str	r2, [sp, #100]	; 0x64
 8005326:	5d1a      	ldrb	r2, [r3, r4]
 8005328:	f1bb 0f00 	cmp.w	fp, #0
 800532c:	d036      	beq.n	800539c <_strtod_l+0x244>
 800532e:	465c      	mov	r4, fp
 8005330:	9004      	str	r0, [sp, #16]
 8005332:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005336:	2b09      	cmp	r3, #9
 8005338:	d912      	bls.n	8005360 <_strtod_l+0x208>
 800533a:	2301      	movs	r3, #1
 800533c:	e7c1      	b.n	80052c2 <_strtod_l+0x16a>
 800533e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005340:	3001      	adds	r0, #1
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	9219      	str	r2, [sp, #100]	; 0x64
 8005346:	785a      	ldrb	r2, [r3, #1]
 8005348:	2a30      	cmp	r2, #48	; 0x30
 800534a:	d0f8      	beq.n	800533e <_strtod_l+0x1e6>
 800534c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005350:	2b08      	cmp	r3, #8
 8005352:	f200 84d5 	bhi.w	8005d00 <_strtod_l+0xba8>
 8005356:	9004      	str	r0, [sp, #16]
 8005358:	2000      	movs	r0, #0
 800535a:	4604      	mov	r4, r0
 800535c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800535e:	9308      	str	r3, [sp, #32]
 8005360:	3a30      	subs	r2, #48	; 0x30
 8005362:	f100 0301 	add.w	r3, r0, #1
 8005366:	d013      	beq.n	8005390 <_strtod_l+0x238>
 8005368:	9904      	ldr	r1, [sp, #16]
 800536a:	1905      	adds	r5, r0, r4
 800536c:	4419      	add	r1, r3
 800536e:	9104      	str	r1, [sp, #16]
 8005370:	4623      	mov	r3, r4
 8005372:	210a      	movs	r1, #10
 8005374:	42ab      	cmp	r3, r5
 8005376:	d113      	bne.n	80053a0 <_strtod_l+0x248>
 8005378:	1823      	adds	r3, r4, r0
 800537a:	2b08      	cmp	r3, #8
 800537c:	f104 0401 	add.w	r4, r4, #1
 8005380:	4404      	add	r4, r0
 8005382:	dc1b      	bgt.n	80053bc <_strtod_l+0x264>
 8005384:	230a      	movs	r3, #10
 8005386:	9906      	ldr	r1, [sp, #24]
 8005388:	fb03 2301 	mla	r3, r3, r1, r2
 800538c:	9306      	str	r3, [sp, #24]
 800538e:	2300      	movs	r3, #0
 8005390:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005392:	4618      	mov	r0, r3
 8005394:	1c51      	adds	r1, r2, #1
 8005396:	9119      	str	r1, [sp, #100]	; 0x64
 8005398:	7852      	ldrb	r2, [r2, #1]
 800539a:	e7ca      	b.n	8005332 <_strtod_l+0x1da>
 800539c:	4658      	mov	r0, fp
 800539e:	e7d3      	b.n	8005348 <_strtod_l+0x1f0>
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	dc04      	bgt.n	80053ae <_strtod_l+0x256>
 80053a4:	9f06      	ldr	r7, [sp, #24]
 80053a6:	434f      	muls	r7, r1
 80053a8:	9706      	str	r7, [sp, #24]
 80053aa:	3301      	adds	r3, #1
 80053ac:	e7e2      	b.n	8005374 <_strtod_l+0x21c>
 80053ae:	1c5f      	adds	r7, r3, #1
 80053b0:	2f10      	cmp	r7, #16
 80053b2:	bfde      	ittt	le
 80053b4:	9f05      	ldrle	r7, [sp, #20]
 80053b6:	434f      	mulle	r7, r1
 80053b8:	9705      	strle	r7, [sp, #20]
 80053ba:	e7f6      	b.n	80053aa <_strtod_l+0x252>
 80053bc:	2c10      	cmp	r4, #16
 80053be:	bfdf      	itttt	le
 80053c0:	230a      	movle	r3, #10
 80053c2:	9905      	ldrle	r1, [sp, #20]
 80053c4:	fb03 2301 	mlale	r3, r3, r1, r2
 80053c8:	9305      	strle	r3, [sp, #20]
 80053ca:	e7e0      	b.n	800538e <_strtod_l+0x236>
 80053cc:	2300      	movs	r3, #0
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	2301      	movs	r3, #1
 80053d2:	e77b      	b.n	80052cc <_strtod_l+0x174>
 80053d4:	2700      	movs	r7, #0
 80053d6:	1cb2      	adds	r2, r6, #2
 80053d8:	9219      	str	r2, [sp, #100]	; 0x64
 80053da:	78b2      	ldrb	r2, [r6, #2]
 80053dc:	e784      	b.n	80052e8 <_strtod_l+0x190>
 80053de:	bf00      	nop
 80053e0:	0800854c 	.word	0x0800854c
 80053e4:	08008344 	.word	0x08008344
 80053e8:	7ff00000 	.word	0x7ff00000
 80053ec:	2701      	movs	r7, #1
 80053ee:	e7f2      	b.n	80053d6 <_strtod_l+0x27e>
 80053f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053f2:	1c51      	adds	r1, r2, #1
 80053f4:	9119      	str	r1, [sp, #100]	; 0x64
 80053f6:	7852      	ldrb	r2, [r2, #1]
 80053f8:	2a30      	cmp	r2, #48	; 0x30
 80053fa:	d0f9      	beq.n	80053f0 <_strtod_l+0x298>
 80053fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005400:	2908      	cmp	r1, #8
 8005402:	f63f af77 	bhi.w	80052f4 <_strtod_l+0x19c>
 8005406:	f04f 0e0a 	mov.w	lr, #10
 800540a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800540e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005410:	9209      	str	r2, [sp, #36]	; 0x24
 8005412:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005414:	1c51      	adds	r1, r2, #1
 8005416:	9119      	str	r1, [sp, #100]	; 0x64
 8005418:	7852      	ldrb	r2, [r2, #1]
 800541a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800541e:	2d09      	cmp	r5, #9
 8005420:	d935      	bls.n	800548e <_strtod_l+0x336>
 8005422:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005424:	1b49      	subs	r1, r1, r5
 8005426:	2908      	cmp	r1, #8
 8005428:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800542c:	dc02      	bgt.n	8005434 <_strtod_l+0x2dc>
 800542e:	4565      	cmp	r5, ip
 8005430:	bfa8      	it	ge
 8005432:	4665      	movge	r5, ip
 8005434:	b107      	cbz	r7, 8005438 <_strtod_l+0x2e0>
 8005436:	426d      	negs	r5, r5
 8005438:	2c00      	cmp	r4, #0
 800543a:	d14c      	bne.n	80054d6 <_strtod_l+0x37e>
 800543c:	9907      	ldr	r1, [sp, #28]
 800543e:	4301      	orrs	r1, r0
 8005440:	f47f aecb 	bne.w	80051da <_strtod_l+0x82>
 8005444:	2b00      	cmp	r3, #0
 8005446:	f47f aee4 	bne.w	8005212 <_strtod_l+0xba>
 800544a:	2a69      	cmp	r2, #105	; 0x69
 800544c:	d026      	beq.n	800549c <_strtod_l+0x344>
 800544e:	dc23      	bgt.n	8005498 <_strtod_l+0x340>
 8005450:	2a49      	cmp	r2, #73	; 0x49
 8005452:	d023      	beq.n	800549c <_strtod_l+0x344>
 8005454:	2a4e      	cmp	r2, #78	; 0x4e
 8005456:	f47f aedc 	bne.w	8005212 <_strtod_l+0xba>
 800545a:	499d      	ldr	r1, [pc, #628]	; (80056d0 <_strtod_l+0x578>)
 800545c:	a819      	add	r0, sp, #100	; 0x64
 800545e:	f000 ffef 	bl	8006440 <__match>
 8005462:	2800      	cmp	r0, #0
 8005464:	f43f aed5 	beq.w	8005212 <_strtod_l+0xba>
 8005468:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b28      	cmp	r3, #40	; 0x28
 800546e:	d12c      	bne.n	80054ca <_strtod_l+0x372>
 8005470:	4998      	ldr	r1, [pc, #608]	; (80056d4 <_strtod_l+0x57c>)
 8005472:	aa1c      	add	r2, sp, #112	; 0x70
 8005474:	a819      	add	r0, sp, #100	; 0x64
 8005476:	f000 fff7 	bl	8006468 <__hexnan>
 800547a:	2805      	cmp	r0, #5
 800547c:	d125      	bne.n	80054ca <_strtod_l+0x372>
 800547e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005480:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005484:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005488:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800548c:	e6a5      	b.n	80051da <_strtod_l+0x82>
 800548e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005492:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005496:	e7bc      	b.n	8005412 <_strtod_l+0x2ba>
 8005498:	2a6e      	cmp	r2, #110	; 0x6e
 800549a:	e7dc      	b.n	8005456 <_strtod_l+0x2fe>
 800549c:	498e      	ldr	r1, [pc, #568]	; (80056d8 <_strtod_l+0x580>)
 800549e:	a819      	add	r0, sp, #100	; 0x64
 80054a0:	f000 ffce 	bl	8006440 <__match>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f43f aeb4 	beq.w	8005212 <_strtod_l+0xba>
 80054aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054ac:	498b      	ldr	r1, [pc, #556]	; (80056dc <_strtod_l+0x584>)
 80054ae:	3b01      	subs	r3, #1
 80054b0:	a819      	add	r0, sp, #100	; 0x64
 80054b2:	9319      	str	r3, [sp, #100]	; 0x64
 80054b4:	f000 ffc4 	bl	8006440 <__match>
 80054b8:	b910      	cbnz	r0, 80054c0 <_strtod_l+0x368>
 80054ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054bc:	3301      	adds	r3, #1
 80054be:	9319      	str	r3, [sp, #100]	; 0x64
 80054c0:	f04f 0800 	mov.w	r8, #0
 80054c4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80056e0 <_strtod_l+0x588>
 80054c8:	e687      	b.n	80051da <_strtod_l+0x82>
 80054ca:	4886      	ldr	r0, [pc, #536]	; (80056e4 <_strtod_l+0x58c>)
 80054cc:	f002 fa98 	bl	8007a00 <nan>
 80054d0:	4680      	mov	r8, r0
 80054d2:	4689      	mov	r9, r1
 80054d4:	e681      	b.n	80051da <_strtod_l+0x82>
 80054d6:	9b04      	ldr	r3, [sp, #16]
 80054d8:	f1bb 0f00 	cmp.w	fp, #0
 80054dc:	bf08      	it	eq
 80054de:	46a3      	moveq	fp, r4
 80054e0:	1aeb      	subs	r3, r5, r3
 80054e2:	2c10      	cmp	r4, #16
 80054e4:	9806      	ldr	r0, [sp, #24]
 80054e6:	4626      	mov	r6, r4
 80054e8:	9307      	str	r3, [sp, #28]
 80054ea:	bfa8      	it	ge
 80054ec:	2610      	movge	r6, #16
 80054ee:	f7fa ff79 	bl	80003e4 <__aeabi_ui2d>
 80054f2:	2c09      	cmp	r4, #9
 80054f4:	4680      	mov	r8, r0
 80054f6:	4689      	mov	r9, r1
 80054f8:	dd13      	ble.n	8005522 <_strtod_l+0x3ca>
 80054fa:	4b7b      	ldr	r3, [pc, #492]	; (80056e8 <_strtod_l+0x590>)
 80054fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005500:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005504:	f7fa ffe8 	bl	80004d8 <__aeabi_dmul>
 8005508:	4680      	mov	r8, r0
 800550a:	9805      	ldr	r0, [sp, #20]
 800550c:	4689      	mov	r9, r1
 800550e:	f7fa ff69 	bl	80003e4 <__aeabi_ui2d>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4640      	mov	r0, r8
 8005518:	4649      	mov	r1, r9
 800551a:	f7fa fe27 	bl	800016c <__adddf3>
 800551e:	4680      	mov	r8, r0
 8005520:	4689      	mov	r9, r1
 8005522:	2c0f      	cmp	r4, #15
 8005524:	dc36      	bgt.n	8005594 <_strtod_l+0x43c>
 8005526:	9b07      	ldr	r3, [sp, #28]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f43f ae56 	beq.w	80051da <_strtod_l+0x82>
 800552e:	dd22      	ble.n	8005576 <_strtod_l+0x41e>
 8005530:	2b16      	cmp	r3, #22
 8005532:	dc09      	bgt.n	8005548 <_strtod_l+0x3f0>
 8005534:	496c      	ldr	r1, [pc, #432]	; (80056e8 <_strtod_l+0x590>)
 8005536:	4642      	mov	r2, r8
 8005538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800553c:	464b      	mov	r3, r9
 800553e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005542:	f7fa ffc9 	bl	80004d8 <__aeabi_dmul>
 8005546:	e7c3      	b.n	80054d0 <_strtod_l+0x378>
 8005548:	9a07      	ldr	r2, [sp, #28]
 800554a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800554e:	4293      	cmp	r3, r2
 8005550:	db20      	blt.n	8005594 <_strtod_l+0x43c>
 8005552:	4d65      	ldr	r5, [pc, #404]	; (80056e8 <_strtod_l+0x590>)
 8005554:	f1c4 040f 	rsb	r4, r4, #15
 8005558:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800555c:	4642      	mov	r2, r8
 800555e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005562:	464b      	mov	r3, r9
 8005564:	f7fa ffb8 	bl	80004d8 <__aeabi_dmul>
 8005568:	9b07      	ldr	r3, [sp, #28]
 800556a:	1b1c      	subs	r4, r3, r4
 800556c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005570:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005574:	e7e5      	b.n	8005542 <_strtod_l+0x3ea>
 8005576:	9b07      	ldr	r3, [sp, #28]
 8005578:	3316      	adds	r3, #22
 800557a:	db0b      	blt.n	8005594 <_strtod_l+0x43c>
 800557c:	9b04      	ldr	r3, [sp, #16]
 800557e:	4640      	mov	r0, r8
 8005580:	1b5d      	subs	r5, r3, r5
 8005582:	4b59      	ldr	r3, [pc, #356]	; (80056e8 <_strtod_l+0x590>)
 8005584:	4649      	mov	r1, r9
 8005586:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800558a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800558e:	f7fb f8cd 	bl	800072c <__aeabi_ddiv>
 8005592:	e79d      	b.n	80054d0 <_strtod_l+0x378>
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	1ba6      	subs	r6, r4, r6
 8005598:	441e      	add	r6, r3
 800559a:	2e00      	cmp	r6, #0
 800559c:	dd74      	ble.n	8005688 <_strtod_l+0x530>
 800559e:	f016 030f 	ands.w	r3, r6, #15
 80055a2:	d00a      	beq.n	80055ba <_strtod_l+0x462>
 80055a4:	4950      	ldr	r1, [pc, #320]	; (80056e8 <_strtod_l+0x590>)
 80055a6:	4642      	mov	r2, r8
 80055a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80055ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055b0:	464b      	mov	r3, r9
 80055b2:	f7fa ff91 	bl	80004d8 <__aeabi_dmul>
 80055b6:	4680      	mov	r8, r0
 80055b8:	4689      	mov	r9, r1
 80055ba:	f036 060f 	bics.w	r6, r6, #15
 80055be:	d052      	beq.n	8005666 <_strtod_l+0x50e>
 80055c0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80055c4:	dd27      	ble.n	8005616 <_strtod_l+0x4be>
 80055c6:	f04f 0b00 	mov.w	fp, #0
 80055ca:	f8cd b010 	str.w	fp, [sp, #16]
 80055ce:	f8cd b020 	str.w	fp, [sp, #32]
 80055d2:	f8cd b018 	str.w	fp, [sp, #24]
 80055d6:	2322      	movs	r3, #34	; 0x22
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80056e0 <_strtod_l+0x588>
 80055e0:	f8ca 3000 	str.w	r3, [sl]
 80055e4:	9b08      	ldr	r3, [sp, #32]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f43f adf7 	beq.w	80051da <_strtod_l+0x82>
 80055ec:	4650      	mov	r0, sl
 80055ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055f0:	f001 f842 	bl	8006678 <_Bfree>
 80055f4:	4650      	mov	r0, sl
 80055f6:	9906      	ldr	r1, [sp, #24]
 80055f8:	f001 f83e 	bl	8006678 <_Bfree>
 80055fc:	4650      	mov	r0, sl
 80055fe:	9904      	ldr	r1, [sp, #16]
 8005600:	f001 f83a 	bl	8006678 <_Bfree>
 8005604:	4650      	mov	r0, sl
 8005606:	9908      	ldr	r1, [sp, #32]
 8005608:	f001 f836 	bl	8006678 <_Bfree>
 800560c:	4659      	mov	r1, fp
 800560e:	4650      	mov	r0, sl
 8005610:	f001 f832 	bl	8006678 <_Bfree>
 8005614:	e5e1      	b.n	80051da <_strtod_l+0x82>
 8005616:	4b35      	ldr	r3, [pc, #212]	; (80056ec <_strtod_l+0x594>)
 8005618:	4640      	mov	r0, r8
 800561a:	9305      	str	r3, [sp, #20]
 800561c:	2300      	movs	r3, #0
 800561e:	4649      	mov	r1, r9
 8005620:	461f      	mov	r7, r3
 8005622:	1136      	asrs	r6, r6, #4
 8005624:	2e01      	cmp	r6, #1
 8005626:	dc21      	bgt.n	800566c <_strtod_l+0x514>
 8005628:	b10b      	cbz	r3, 800562e <_strtod_l+0x4d6>
 800562a:	4680      	mov	r8, r0
 800562c:	4689      	mov	r9, r1
 800562e:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <_strtod_l+0x594>)
 8005630:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005634:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005638:	4642      	mov	r2, r8
 800563a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800563e:	464b      	mov	r3, r9
 8005640:	f7fa ff4a 	bl	80004d8 <__aeabi_dmul>
 8005644:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <_strtod_l+0x588>)
 8005646:	460a      	mov	r2, r1
 8005648:	400b      	ands	r3, r1
 800564a:	4929      	ldr	r1, [pc, #164]	; (80056f0 <_strtod_l+0x598>)
 800564c:	4680      	mov	r8, r0
 800564e:	428b      	cmp	r3, r1
 8005650:	d8b9      	bhi.n	80055c6 <_strtod_l+0x46e>
 8005652:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005656:	428b      	cmp	r3, r1
 8005658:	bf86      	itte	hi
 800565a:	f04f 38ff 	movhi.w	r8, #4294967295
 800565e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80056f4 <_strtod_l+0x59c>
 8005662:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005666:	2300      	movs	r3, #0
 8005668:	9305      	str	r3, [sp, #20]
 800566a:	e07f      	b.n	800576c <_strtod_l+0x614>
 800566c:	07f2      	lsls	r2, r6, #31
 800566e:	d505      	bpl.n	800567c <_strtod_l+0x524>
 8005670:	9b05      	ldr	r3, [sp, #20]
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f7fa ff2f 	bl	80004d8 <__aeabi_dmul>
 800567a:	2301      	movs	r3, #1
 800567c:	9a05      	ldr	r2, [sp, #20]
 800567e:	3701      	adds	r7, #1
 8005680:	3208      	adds	r2, #8
 8005682:	1076      	asrs	r6, r6, #1
 8005684:	9205      	str	r2, [sp, #20]
 8005686:	e7cd      	b.n	8005624 <_strtod_l+0x4cc>
 8005688:	d0ed      	beq.n	8005666 <_strtod_l+0x50e>
 800568a:	4276      	negs	r6, r6
 800568c:	f016 020f 	ands.w	r2, r6, #15
 8005690:	d00a      	beq.n	80056a8 <_strtod_l+0x550>
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <_strtod_l+0x590>)
 8005694:	4640      	mov	r0, r8
 8005696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800569a:	4649      	mov	r1, r9
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fb f844 	bl	800072c <__aeabi_ddiv>
 80056a4:	4680      	mov	r8, r0
 80056a6:	4689      	mov	r9, r1
 80056a8:	1136      	asrs	r6, r6, #4
 80056aa:	d0dc      	beq.n	8005666 <_strtod_l+0x50e>
 80056ac:	2e1f      	cmp	r6, #31
 80056ae:	dd23      	ble.n	80056f8 <_strtod_l+0x5a0>
 80056b0:	f04f 0b00 	mov.w	fp, #0
 80056b4:	f8cd b010 	str.w	fp, [sp, #16]
 80056b8:	f8cd b020 	str.w	fp, [sp, #32]
 80056bc:	f8cd b018 	str.w	fp, [sp, #24]
 80056c0:	2322      	movs	r3, #34	; 0x22
 80056c2:	f04f 0800 	mov.w	r8, #0
 80056c6:	f04f 0900 	mov.w	r9, #0
 80056ca:	f8ca 3000 	str.w	r3, [sl]
 80056ce:	e789      	b.n	80055e4 <_strtod_l+0x48c>
 80056d0:	0800833e 	.word	0x0800833e
 80056d4:	08008358 	.word	0x08008358
 80056d8:	08008335 	.word	0x08008335
 80056dc:	08008338 	.word	0x08008338
 80056e0:	7ff00000 	.word	0x7ff00000
 80056e4:	080083d3 	.word	0x080083d3
 80056e8:	08008600 	.word	0x08008600
 80056ec:	080085d8 	.word	0x080085d8
 80056f0:	7ca00000 	.word	0x7ca00000
 80056f4:	7fefffff 	.word	0x7fefffff
 80056f8:	f016 0310 	ands.w	r3, r6, #16
 80056fc:	bf18      	it	ne
 80056fe:	236a      	movne	r3, #106	; 0x6a
 8005700:	4640      	mov	r0, r8
 8005702:	9305      	str	r3, [sp, #20]
 8005704:	4649      	mov	r1, r9
 8005706:	2300      	movs	r3, #0
 8005708:	4fb0      	ldr	r7, [pc, #704]	; (80059cc <_strtod_l+0x874>)
 800570a:	07f2      	lsls	r2, r6, #31
 800570c:	d504      	bpl.n	8005718 <_strtod_l+0x5c0>
 800570e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005712:	f7fa fee1 	bl	80004d8 <__aeabi_dmul>
 8005716:	2301      	movs	r3, #1
 8005718:	1076      	asrs	r6, r6, #1
 800571a:	f107 0708 	add.w	r7, r7, #8
 800571e:	d1f4      	bne.n	800570a <_strtod_l+0x5b2>
 8005720:	b10b      	cbz	r3, 8005726 <_strtod_l+0x5ce>
 8005722:	4680      	mov	r8, r0
 8005724:	4689      	mov	r9, r1
 8005726:	9b05      	ldr	r3, [sp, #20]
 8005728:	b1c3      	cbz	r3, 800575c <_strtod_l+0x604>
 800572a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800572e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005732:	2b00      	cmp	r3, #0
 8005734:	4649      	mov	r1, r9
 8005736:	dd11      	ble.n	800575c <_strtod_l+0x604>
 8005738:	2b1f      	cmp	r3, #31
 800573a:	f340 8127 	ble.w	800598c <_strtod_l+0x834>
 800573e:	2b34      	cmp	r3, #52	; 0x34
 8005740:	bfd8      	it	le
 8005742:	f04f 33ff 	movle.w	r3, #4294967295
 8005746:	f04f 0800 	mov.w	r8, #0
 800574a:	bfcf      	iteee	gt
 800574c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005750:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005754:	fa03 f202 	lslle.w	r2, r3, r2
 8005758:	ea02 0901 	andle.w	r9, r2, r1
 800575c:	2200      	movs	r2, #0
 800575e:	2300      	movs	r3, #0
 8005760:	4640      	mov	r0, r8
 8005762:	4649      	mov	r1, r9
 8005764:	f7fb f920 	bl	80009a8 <__aeabi_dcmpeq>
 8005768:	2800      	cmp	r0, #0
 800576a:	d1a1      	bne.n	80056b0 <_strtod_l+0x558>
 800576c:	9b06      	ldr	r3, [sp, #24]
 800576e:	465a      	mov	r2, fp
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	4650      	mov	r0, sl
 8005774:	4623      	mov	r3, r4
 8005776:	9908      	ldr	r1, [sp, #32]
 8005778:	f000 ffe6 	bl	8006748 <__s2b>
 800577c:	9008      	str	r0, [sp, #32]
 800577e:	2800      	cmp	r0, #0
 8005780:	f43f af21 	beq.w	80055c6 <_strtod_l+0x46e>
 8005784:	9b04      	ldr	r3, [sp, #16]
 8005786:	f04f 0b00 	mov.w	fp, #0
 800578a:	1b5d      	subs	r5, r3, r5
 800578c:	9b07      	ldr	r3, [sp, #28]
 800578e:	f8cd b010 	str.w	fp, [sp, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	bfb4      	ite	lt
 8005796:	462b      	movlt	r3, r5
 8005798:	2300      	movge	r3, #0
 800579a:	930e      	str	r3, [sp, #56]	; 0x38
 800579c:	9b07      	ldr	r3, [sp, #28]
 800579e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80057a2:	9314      	str	r3, [sp, #80]	; 0x50
 80057a4:	9b08      	ldr	r3, [sp, #32]
 80057a6:	4650      	mov	r0, sl
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	f000 ff25 	bl	80065f8 <_Balloc>
 80057ae:	9006      	str	r0, [sp, #24]
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f43f af10 	beq.w	80055d6 <_strtod_l+0x47e>
 80057b6:	9b08      	ldr	r3, [sp, #32]
 80057b8:	300c      	adds	r0, #12
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	f103 010c 	add.w	r1, r3, #12
 80057c0:	3202      	adds	r2, #2
 80057c2:	0092      	lsls	r2, r2, #2
 80057c4:	f7ff fa0e 	bl	8004be4 <memcpy>
 80057c8:	ab1c      	add	r3, sp, #112	; 0x70
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	ab1b      	add	r3, sp, #108	; 0x6c
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	4650      	mov	r0, sl
 80057d6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80057da:	f001 faf7 	bl	8006dcc <__d2b>
 80057de:	901a      	str	r0, [sp, #104]	; 0x68
 80057e0:	2800      	cmp	r0, #0
 80057e2:	f43f aef8 	beq.w	80055d6 <_strtod_l+0x47e>
 80057e6:	2101      	movs	r1, #1
 80057e8:	4650      	mov	r0, sl
 80057ea:	f001 f845 	bl	8006878 <__i2b>
 80057ee:	4603      	mov	r3, r0
 80057f0:	9004      	str	r0, [sp, #16]
 80057f2:	2800      	cmp	r0, #0
 80057f4:	f43f aeef 	beq.w	80055d6 <_strtod_l+0x47e>
 80057f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80057fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	bfab      	itete	ge
 8005800:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005802:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005804:	18ee      	addge	r6, r5, r3
 8005806:	1b5c      	sublt	r4, r3, r5
 8005808:	9b05      	ldr	r3, [sp, #20]
 800580a:	bfa8      	it	ge
 800580c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800580e:	eba5 0503 	sub.w	r5, r5, r3
 8005812:	4415      	add	r5, r2
 8005814:	4b6e      	ldr	r3, [pc, #440]	; (80059d0 <_strtod_l+0x878>)
 8005816:	f105 35ff 	add.w	r5, r5, #4294967295
 800581a:	bfb8      	it	lt
 800581c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800581e:	429d      	cmp	r5, r3
 8005820:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005824:	f280 80c4 	bge.w	80059b0 <_strtod_l+0x858>
 8005828:	1b5b      	subs	r3, r3, r5
 800582a:	2b1f      	cmp	r3, #31
 800582c:	f04f 0701 	mov.w	r7, #1
 8005830:	eba2 0203 	sub.w	r2, r2, r3
 8005834:	f300 80b1 	bgt.w	800599a <_strtod_l+0x842>
 8005838:	2500      	movs	r5, #0
 800583a:	fa07 f303 	lsl.w	r3, r7, r3
 800583e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005840:	18b7      	adds	r7, r6, r2
 8005842:	9b05      	ldr	r3, [sp, #20]
 8005844:	42be      	cmp	r6, r7
 8005846:	4414      	add	r4, r2
 8005848:	441c      	add	r4, r3
 800584a:	4633      	mov	r3, r6
 800584c:	bfa8      	it	ge
 800584e:	463b      	movge	r3, r7
 8005850:	42a3      	cmp	r3, r4
 8005852:	bfa8      	it	ge
 8005854:	4623      	movge	r3, r4
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfc2      	ittt	gt
 800585a:	1aff      	subgt	r7, r7, r3
 800585c:	1ae4      	subgt	r4, r4, r3
 800585e:	1af6      	subgt	r6, r6, r3
 8005860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	dd17      	ble.n	8005896 <_strtod_l+0x73e>
 8005866:	461a      	mov	r2, r3
 8005868:	4650      	mov	r0, sl
 800586a:	9904      	ldr	r1, [sp, #16]
 800586c:	f001 f8c2 	bl	80069f4 <__pow5mult>
 8005870:	9004      	str	r0, [sp, #16]
 8005872:	2800      	cmp	r0, #0
 8005874:	f43f aeaf 	beq.w	80055d6 <_strtod_l+0x47e>
 8005878:	4601      	mov	r1, r0
 800587a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800587c:	4650      	mov	r0, sl
 800587e:	f001 f811 	bl	80068a4 <__multiply>
 8005882:	9009      	str	r0, [sp, #36]	; 0x24
 8005884:	2800      	cmp	r0, #0
 8005886:	f43f aea6 	beq.w	80055d6 <_strtod_l+0x47e>
 800588a:	4650      	mov	r0, sl
 800588c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800588e:	f000 fef3 	bl	8006678 <_Bfree>
 8005892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005894:	931a      	str	r3, [sp, #104]	; 0x68
 8005896:	2f00      	cmp	r7, #0
 8005898:	f300 808e 	bgt.w	80059b8 <_strtod_l+0x860>
 800589c:	9b07      	ldr	r3, [sp, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dd08      	ble.n	80058b4 <_strtod_l+0x75c>
 80058a2:	4650      	mov	r0, sl
 80058a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80058a6:	9906      	ldr	r1, [sp, #24]
 80058a8:	f001 f8a4 	bl	80069f4 <__pow5mult>
 80058ac:	9006      	str	r0, [sp, #24]
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f43f ae91 	beq.w	80055d6 <_strtod_l+0x47e>
 80058b4:	2c00      	cmp	r4, #0
 80058b6:	dd08      	ble.n	80058ca <_strtod_l+0x772>
 80058b8:	4622      	mov	r2, r4
 80058ba:	4650      	mov	r0, sl
 80058bc:	9906      	ldr	r1, [sp, #24]
 80058be:	f001 f8f3 	bl	8006aa8 <__lshift>
 80058c2:	9006      	str	r0, [sp, #24]
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f43f ae86 	beq.w	80055d6 <_strtod_l+0x47e>
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	dd08      	ble.n	80058e0 <_strtod_l+0x788>
 80058ce:	4632      	mov	r2, r6
 80058d0:	4650      	mov	r0, sl
 80058d2:	9904      	ldr	r1, [sp, #16]
 80058d4:	f001 f8e8 	bl	8006aa8 <__lshift>
 80058d8:	9004      	str	r0, [sp, #16]
 80058da:	2800      	cmp	r0, #0
 80058dc:	f43f ae7b 	beq.w	80055d6 <_strtod_l+0x47e>
 80058e0:	4650      	mov	r0, sl
 80058e2:	9a06      	ldr	r2, [sp, #24]
 80058e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058e6:	f001 f96b 	bl	8006bc0 <__mdiff>
 80058ea:	4683      	mov	fp, r0
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f43f ae72 	beq.w	80055d6 <_strtod_l+0x47e>
 80058f2:	2400      	movs	r4, #0
 80058f4:	68c3      	ldr	r3, [r0, #12]
 80058f6:	9904      	ldr	r1, [sp, #16]
 80058f8:	60c4      	str	r4, [r0, #12]
 80058fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80058fc:	f001 f944 	bl	8006b88 <__mcmp>
 8005900:	42a0      	cmp	r0, r4
 8005902:	da6b      	bge.n	80059dc <_strtod_l+0x884>
 8005904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005906:	ea53 0308 	orrs.w	r3, r3, r8
 800590a:	f040 8091 	bne.w	8005a30 <_strtod_l+0x8d8>
 800590e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005912:	2b00      	cmp	r3, #0
 8005914:	f040 808c 	bne.w	8005a30 <_strtod_l+0x8d8>
 8005918:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800591c:	0d1b      	lsrs	r3, r3, #20
 800591e:	051b      	lsls	r3, r3, #20
 8005920:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005924:	f240 8084 	bls.w	8005a30 <_strtod_l+0x8d8>
 8005928:	f8db 3014 	ldr.w	r3, [fp, #20]
 800592c:	b91b      	cbnz	r3, 8005936 <_strtod_l+0x7de>
 800592e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005932:	2b01      	cmp	r3, #1
 8005934:	dd7c      	ble.n	8005a30 <_strtod_l+0x8d8>
 8005936:	4659      	mov	r1, fp
 8005938:	2201      	movs	r2, #1
 800593a:	4650      	mov	r0, sl
 800593c:	f001 f8b4 	bl	8006aa8 <__lshift>
 8005940:	9904      	ldr	r1, [sp, #16]
 8005942:	4683      	mov	fp, r0
 8005944:	f001 f920 	bl	8006b88 <__mcmp>
 8005948:	2800      	cmp	r0, #0
 800594a:	dd71      	ble.n	8005a30 <_strtod_l+0x8d8>
 800594c:	9905      	ldr	r1, [sp, #20]
 800594e:	464b      	mov	r3, r9
 8005950:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <_strtod_l+0x87c>)
 8005952:	2900      	cmp	r1, #0
 8005954:	f000 808c 	beq.w	8005a70 <_strtod_l+0x918>
 8005958:	ea02 0109 	and.w	r1, r2, r9
 800595c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005960:	f300 8086 	bgt.w	8005a70 <_strtod_l+0x918>
 8005964:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005968:	f77f aeaa 	ble.w	80056c0 <_strtod_l+0x568>
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <_strtod_l+0x880>)
 8005972:	2200      	movs	r2, #0
 8005974:	f7fa fdb0 	bl	80004d8 <__aeabi_dmul>
 8005978:	460b      	mov	r3, r1
 800597a:	4303      	orrs	r3, r0
 800597c:	bf08      	it	eq
 800597e:	2322      	moveq	r3, #34	; 0x22
 8005980:	4680      	mov	r8, r0
 8005982:	4689      	mov	r9, r1
 8005984:	bf08      	it	eq
 8005986:	f8ca 3000 	streq.w	r3, [sl]
 800598a:	e62f      	b.n	80055ec <_strtod_l+0x494>
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	ea03 0808 	and.w	r8, r3, r8
 8005998:	e6e0      	b.n	800575c <_strtod_l+0x604>
 800599a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800599e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80059a2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80059a6:	35e2      	adds	r5, #226	; 0xe2
 80059a8:	fa07 f505 	lsl.w	r5, r7, r5
 80059ac:	970f      	str	r7, [sp, #60]	; 0x3c
 80059ae:	e747      	b.n	8005840 <_strtod_l+0x6e8>
 80059b0:	2301      	movs	r3, #1
 80059b2:	2500      	movs	r5, #0
 80059b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80059b6:	e743      	b.n	8005840 <_strtod_l+0x6e8>
 80059b8:	463a      	mov	r2, r7
 80059ba:	4650      	mov	r0, sl
 80059bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059be:	f001 f873 	bl	8006aa8 <__lshift>
 80059c2:	901a      	str	r0, [sp, #104]	; 0x68
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f47f af69 	bne.w	800589c <_strtod_l+0x744>
 80059ca:	e604      	b.n	80055d6 <_strtod_l+0x47e>
 80059cc:	08008370 	.word	0x08008370
 80059d0:	fffffc02 	.word	0xfffffc02
 80059d4:	7ff00000 	.word	0x7ff00000
 80059d8:	39500000 	.word	0x39500000
 80059dc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059e0:	d165      	bne.n	8005aae <_strtod_l+0x956>
 80059e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059e8:	b35a      	cbz	r2, 8005a42 <_strtod_l+0x8ea>
 80059ea:	4a99      	ldr	r2, [pc, #612]	; (8005c50 <_strtod_l+0xaf8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d12b      	bne.n	8005a48 <_strtod_l+0x8f0>
 80059f0:	9b05      	ldr	r3, [sp, #20]
 80059f2:	4641      	mov	r1, r8
 80059f4:	b303      	cbz	r3, 8005a38 <_strtod_l+0x8e0>
 80059f6:	464a      	mov	r2, r9
 80059f8:	4b96      	ldr	r3, [pc, #600]	; (8005c54 <_strtod_l+0xafc>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295
 8005a04:	d81b      	bhi.n	8005a3e <_strtod_l+0x8e6>
 8005a06:	0d1b      	lsrs	r3, r3, #20
 8005a08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d119      	bne.n	8005a48 <_strtod_l+0x8f0>
 8005a14:	4b90      	ldr	r3, [pc, #576]	; (8005c58 <_strtod_l+0xb00>)
 8005a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d102      	bne.n	8005a22 <_strtod_l+0x8ca>
 8005a1c:	3101      	adds	r1, #1
 8005a1e:	f43f adda 	beq.w	80055d6 <_strtod_l+0x47e>
 8005a22:	f04f 0800 	mov.w	r8, #0
 8005a26:	4b8b      	ldr	r3, [pc, #556]	; (8005c54 <_strtod_l+0xafc>)
 8005a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005a30:	9b05      	ldr	r3, [sp, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d19a      	bne.n	800596c <_strtod_l+0x814>
 8005a36:	e5d9      	b.n	80055ec <_strtod_l+0x494>
 8005a38:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3c:	e7e8      	b.n	8005a10 <_strtod_l+0x8b8>
 8005a3e:	4613      	mov	r3, r2
 8005a40:	e7e6      	b.n	8005a10 <_strtod_l+0x8b8>
 8005a42:	ea53 0308 	orrs.w	r3, r3, r8
 8005a46:	d081      	beq.n	800594c <_strtod_l+0x7f4>
 8005a48:	b1e5      	cbz	r5, 8005a84 <_strtod_l+0x92c>
 8005a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4c:	421d      	tst	r5, r3
 8005a4e:	d0ef      	beq.n	8005a30 <_strtod_l+0x8d8>
 8005a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a52:	4640      	mov	r0, r8
 8005a54:	4649      	mov	r1, r9
 8005a56:	9a05      	ldr	r2, [sp, #20]
 8005a58:	b1c3      	cbz	r3, 8005a8c <_strtod_l+0x934>
 8005a5a:	f7ff fb5b 	bl	8005114 <sulp>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a66:	f7fa fb81 	bl	800016c <__adddf3>
 8005a6a:	4680      	mov	r8, r0
 8005a6c:	4689      	mov	r9, r1
 8005a6e:	e7df      	b.n	8005a30 <_strtod_l+0x8d8>
 8005a70:	4013      	ands	r3, r2
 8005a72:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a76:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005a7a:	f04f 38ff 	mov.w	r8, #4294967295
 8005a7e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005a82:	e7d5      	b.n	8005a30 <_strtod_l+0x8d8>
 8005a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a86:	ea13 0f08 	tst.w	r3, r8
 8005a8a:	e7e0      	b.n	8005a4e <_strtod_l+0x8f6>
 8005a8c:	f7ff fb42 	bl	8005114 <sulp>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a98:	f7fa fb66 	bl	8000168 <__aeabi_dsub>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	4689      	mov	r9, r1
 8005aa4:	f7fa ff80 	bl	80009a8 <__aeabi_dcmpeq>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d0c1      	beq.n	8005a30 <_strtod_l+0x8d8>
 8005aac:	e608      	b.n	80056c0 <_strtod_l+0x568>
 8005aae:	4658      	mov	r0, fp
 8005ab0:	9904      	ldr	r1, [sp, #16]
 8005ab2:	f001 f9e7 	bl	8006e84 <__ratio>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005abc:	4606      	mov	r6, r0
 8005abe:	460f      	mov	r7, r1
 8005ac0:	f7fa ff86 	bl	80009d0 <__aeabi_dcmple>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d070      	beq.n	8005baa <_strtod_l+0xa52>
 8005ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d042      	beq.n	8005b54 <_strtod_l+0x9fc>
 8005ace:	2600      	movs	r6, #0
 8005ad0:	4f62      	ldr	r7, [pc, #392]	; (8005c5c <_strtod_l+0xb04>)
 8005ad2:	4d62      	ldr	r5, [pc, #392]	; (8005c5c <_strtod_l+0xb04>)
 8005ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ada:	0d1b      	lsrs	r3, r3, #20
 8005adc:	051b      	lsls	r3, r3, #20
 8005ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ae2:	4b5f      	ldr	r3, [pc, #380]	; (8005c60 <_strtod_l+0xb08>)
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	f040 80c3 	bne.w	8005c70 <_strtod_l+0xb18>
 8005aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aec:	4640      	mov	r0, r8
 8005aee:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005af2:	4649      	mov	r1, r9
 8005af4:	f001 f8f0 	bl	8006cd8 <__ulp>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa fcea 	bl	80004d8 <__aeabi_dmul>
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	f7fa fb30 	bl	800016c <__adddf3>
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4951      	ldr	r1, [pc, #324]	; (8005c54 <_strtod_l+0xafc>)
 8005b10:	4a54      	ldr	r2, [pc, #336]	; (8005c64 <_strtod_l+0xb0c>)
 8005b12:	4019      	ands	r1, r3
 8005b14:	4291      	cmp	r1, r2
 8005b16:	4680      	mov	r8, r0
 8005b18:	d95d      	bls.n	8005bd6 <_strtod_l+0xa7e>
 8005b1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b1c:	4b4e      	ldr	r3, [pc, #312]	; (8005c58 <_strtod_l+0xb00>)
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d103      	bne.n	8005b2a <_strtod_l+0x9d2>
 8005b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b24:	3301      	adds	r3, #1
 8005b26:	f43f ad56 	beq.w	80055d6 <_strtod_l+0x47e>
 8005b2a:	f04f 38ff 	mov.w	r8, #4294967295
 8005b2e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005c58 <_strtod_l+0xb00>
 8005b32:	4650      	mov	r0, sl
 8005b34:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b36:	f000 fd9f 	bl	8006678 <_Bfree>
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	9906      	ldr	r1, [sp, #24]
 8005b3e:	f000 fd9b 	bl	8006678 <_Bfree>
 8005b42:	4650      	mov	r0, sl
 8005b44:	9904      	ldr	r1, [sp, #16]
 8005b46:	f000 fd97 	bl	8006678 <_Bfree>
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	4650      	mov	r0, sl
 8005b4e:	f000 fd93 	bl	8006678 <_Bfree>
 8005b52:	e627      	b.n	80057a4 <_strtod_l+0x64c>
 8005b54:	f1b8 0f00 	cmp.w	r8, #0
 8005b58:	d119      	bne.n	8005b8e <_strtod_l+0xa36>
 8005b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b60:	b9e3      	cbnz	r3, 8005b9c <_strtod_l+0xa44>
 8005b62:	2200      	movs	r2, #0
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	4b3c      	ldr	r3, [pc, #240]	; (8005c5c <_strtod_l+0xb04>)
 8005b6a:	f7fa ff27 	bl	80009bc <__aeabi_dcmplt>
 8005b6e:	b9c8      	cbnz	r0, 8005ba4 <_strtod_l+0xa4c>
 8005b70:	2200      	movs	r2, #0
 8005b72:	4630      	mov	r0, r6
 8005b74:	4639      	mov	r1, r7
 8005b76:	4b3c      	ldr	r3, [pc, #240]	; (8005c68 <_strtod_l+0xb10>)
 8005b78:	f7fa fcae 	bl	80004d8 <__aeabi_dmul>
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	460d      	mov	r5, r1
 8005b80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b84:	9416      	str	r4, [sp, #88]	; 0x58
 8005b86:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b88:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005b8c:	e7a2      	b.n	8005ad4 <_strtod_l+0x97c>
 8005b8e:	f1b8 0f01 	cmp.w	r8, #1
 8005b92:	d103      	bne.n	8005b9c <_strtod_l+0xa44>
 8005b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f43f ad92 	beq.w	80056c0 <_strtod_l+0x568>
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	2400      	movs	r4, #0
 8005ba0:	4f32      	ldr	r7, [pc, #200]	; (8005c6c <_strtod_l+0xb14>)
 8005ba2:	e796      	b.n	8005ad2 <_strtod_l+0x97a>
 8005ba4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005ba6:	4d30      	ldr	r5, [pc, #192]	; (8005c68 <_strtod_l+0xb10>)
 8005ba8:	e7ea      	b.n	8005b80 <_strtod_l+0xa28>
 8005baa:	4b2f      	ldr	r3, [pc, #188]	; (8005c68 <_strtod_l+0xb10>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	4630      	mov	r0, r6
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	f7fa fc91 	bl	80004d8 <__aeabi_dmul>
 8005bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb8:	4604      	mov	r4, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	b933      	cbnz	r3, 8005bcc <_strtod_l+0xa74>
 8005bbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bc2:	9010      	str	r0, [sp, #64]	; 0x40
 8005bc4:	9311      	str	r3, [sp, #68]	; 0x44
 8005bc6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005bca:	e783      	b.n	8005ad4 <_strtod_l+0x97c>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005bd4:	e7f7      	b.n	8005bc6 <_strtod_l+0xa6e>
 8005bd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005bda:	9b05      	ldr	r3, [sp, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1a8      	bne.n	8005b32 <_strtod_l+0x9da>
 8005be0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005be4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005be6:	0d1b      	lsrs	r3, r3, #20
 8005be8:	051b      	lsls	r3, r3, #20
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d1a1      	bne.n	8005b32 <_strtod_l+0x9da>
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa ff91 	bl	8000b18 <__aeabi_d2lz>
 8005bf6:	f7fa fc41 	bl	800047c <__aeabi_l2d>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fab1 	bl	8000168 <__aeabi_dsub>
 8005c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c0c:	ea43 0308 	orr.w	r3, r3, r8
 8005c10:	4313      	orrs	r3, r2
 8005c12:	4604      	mov	r4, r0
 8005c14:	460d      	mov	r5, r1
 8005c16:	d066      	beq.n	8005ce6 <_strtod_l+0xb8e>
 8005c18:	a309      	add	r3, pc, #36	; (adr r3, 8005c40 <_strtod_l+0xae8>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa fecd 	bl	80009bc <__aeabi_dcmplt>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	f47f ace2 	bne.w	80055ec <_strtod_l+0x494>
 8005c28:	a307      	add	r3, pc, #28	; (adr r3, 8005c48 <_strtod_l+0xaf0>)
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	f7fa fee1 	bl	80009f8 <__aeabi_dcmpgt>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	f43f af7b 	beq.w	8005b32 <_strtod_l+0x9da>
 8005c3c:	e4d6      	b.n	80055ec <_strtod_l+0x494>
 8005c3e:	bf00      	nop
 8005c40:	94a03595 	.word	0x94a03595
 8005c44:	3fdfffff 	.word	0x3fdfffff
 8005c48:	35afe535 	.word	0x35afe535
 8005c4c:	3fe00000 	.word	0x3fe00000
 8005c50:	000fffff 	.word	0x000fffff
 8005c54:	7ff00000 	.word	0x7ff00000
 8005c58:	7fefffff 	.word	0x7fefffff
 8005c5c:	3ff00000 	.word	0x3ff00000
 8005c60:	7fe00000 	.word	0x7fe00000
 8005c64:	7c9fffff 	.word	0x7c9fffff
 8005c68:	3fe00000 	.word	0x3fe00000
 8005c6c:	bff00000 	.word	0xbff00000
 8005c70:	9b05      	ldr	r3, [sp, #20]
 8005c72:	b313      	cbz	r3, 8005cba <_strtod_l+0xb62>
 8005c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c7a:	d81e      	bhi.n	8005cba <_strtod_l+0xb62>
 8005c7c:	a326      	add	r3, pc, #152	; (adr r3, 8005d18 <_strtod_l+0xbc0>)
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa fea3 	bl	80009d0 <__aeabi_dcmple>
 8005c8a:	b190      	cbz	r0, 8005cb2 <_strtod_l+0xb5a>
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f7fa fed2 	bl	8000a38 <__aeabi_d2uiz>
 8005c94:	2801      	cmp	r0, #1
 8005c96:	bf38      	it	cc
 8005c98:	2001      	movcc	r0, #1
 8005c9a:	f7fa fba3 	bl	80003e4 <__aeabi_ui2d>
 8005c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	460d      	mov	r5, r1
 8005ca4:	b9d3      	cbnz	r3, 8005cdc <_strtod_l+0xb84>
 8005ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005caa:	9012      	str	r0, [sp, #72]	; 0x48
 8005cac:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cb4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005cb8:	1a9f      	subs	r7, r3, r2
 8005cba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cbe:	f001 f80b 	bl	8006cd8 <__ulp>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	4639      	mov	r1, r7
 8005cca:	f7fa fc05 	bl	80004d8 <__aeabi_dmul>
 8005cce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cd2:	f7fa fa4b 	bl	800016c <__adddf3>
 8005cd6:	4680      	mov	r8, r0
 8005cd8:	4689      	mov	r9, r1
 8005cda:	e77e      	b.n	8005bda <_strtod_l+0xa82>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005ce4:	e7e3      	b.n	8005cae <_strtod_l+0xb56>
 8005ce6:	a30e      	add	r3, pc, #56	; (adr r3, 8005d20 <_strtod_l+0xbc8>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fe66 	bl	80009bc <__aeabi_dcmplt>
 8005cf0:	e7a1      	b.n	8005c36 <_strtod_l+0xade>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8005cf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cf8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	f7ff ba71 	b.w	80051e2 <_strtod_l+0x8a>
 8005d00:	2a65      	cmp	r2, #101	; 0x65
 8005d02:	f43f ab63 	beq.w	80053cc <_strtod_l+0x274>
 8005d06:	2a45      	cmp	r2, #69	; 0x45
 8005d08:	f43f ab60 	beq.w	80053cc <_strtod_l+0x274>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f7ff bb95 	b.w	800543c <_strtod_l+0x2e4>
 8005d12:	bf00      	nop
 8005d14:	f3af 8000 	nop.w
 8005d18:	ffc00000 	.word	0xffc00000
 8005d1c:	41dfffff 	.word	0x41dfffff
 8005d20:	94a03595 	.word	0x94a03595
 8005d24:	3fcfffff 	.word	0x3fcfffff

08005d28 <_strtod_r>:
 8005d28:	4b01      	ldr	r3, [pc, #4]	; (8005d30 <_strtod_r+0x8>)
 8005d2a:	f7ff ba15 	b.w	8005158 <_strtod_l>
 8005d2e:	bf00      	nop
 8005d30:	2000009c 	.word	0x2000009c

08005d34 <_strtol_l.constprop.0>:
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	d001      	beq.n	8005d42 <_strtol_l.constprop.0+0xe>
 8005d3e:	2b24      	cmp	r3, #36	; 0x24
 8005d40:	d906      	bls.n	8005d50 <_strtol_l.constprop.0+0x1c>
 8005d42:	f7fe ff25 	bl	8004b90 <__errno>
 8005d46:	2316      	movs	r3, #22
 8005d48:	6003      	str	r3, [r0, #0]
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d50:	460d      	mov	r5, r1
 8005d52:	4f35      	ldr	r7, [pc, #212]	; (8005e28 <_strtol_l.constprop.0+0xf4>)
 8005d54:	4628      	mov	r0, r5
 8005d56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d5a:	5de6      	ldrb	r6, [r4, r7]
 8005d5c:	f016 0608 	ands.w	r6, r6, #8
 8005d60:	d1f8      	bne.n	8005d54 <_strtol_l.constprop.0+0x20>
 8005d62:	2c2d      	cmp	r4, #45	; 0x2d
 8005d64:	d12f      	bne.n	8005dc6 <_strtol_l.constprop.0+0x92>
 8005d66:	2601      	movs	r6, #1
 8005d68:	782c      	ldrb	r4, [r5, #0]
 8005d6a:	1c85      	adds	r5, r0, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d057      	beq.n	8005e20 <_strtol_l.constprop.0+0xec>
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d109      	bne.n	8005d88 <_strtol_l.constprop.0+0x54>
 8005d74:	2c30      	cmp	r4, #48	; 0x30
 8005d76:	d107      	bne.n	8005d88 <_strtol_l.constprop.0+0x54>
 8005d78:	7828      	ldrb	r0, [r5, #0]
 8005d7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005d7e:	2858      	cmp	r0, #88	; 0x58
 8005d80:	d149      	bne.n	8005e16 <_strtol_l.constprop.0+0xe2>
 8005d82:	2310      	movs	r3, #16
 8005d84:	786c      	ldrb	r4, [r5, #1]
 8005d86:	3502      	adds	r5, #2
 8005d88:	2700      	movs	r7, #0
 8005d8a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005d8e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005d92:	fbbe f9f3 	udiv	r9, lr, r3
 8005d96:	4638      	mov	r0, r7
 8005d98:	fb03 ea19 	mls	sl, r3, r9, lr
 8005d9c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005da0:	f1bc 0f09 	cmp.w	ip, #9
 8005da4:	d814      	bhi.n	8005dd0 <_strtol_l.constprop.0+0x9c>
 8005da6:	4664      	mov	r4, ip
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	dd22      	ble.n	8005df2 <_strtol_l.constprop.0+0xbe>
 8005dac:	2f00      	cmp	r7, #0
 8005dae:	db1d      	blt.n	8005dec <_strtol_l.constprop.0+0xb8>
 8005db0:	4581      	cmp	r9, r0
 8005db2:	d31b      	bcc.n	8005dec <_strtol_l.constprop.0+0xb8>
 8005db4:	d101      	bne.n	8005dba <_strtol_l.constprop.0+0x86>
 8005db6:	45a2      	cmp	sl, r4
 8005db8:	db18      	blt.n	8005dec <_strtol_l.constprop.0+0xb8>
 8005dba:	2701      	movs	r7, #1
 8005dbc:	fb00 4003 	mla	r0, r0, r3, r4
 8005dc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dc4:	e7ea      	b.n	8005d9c <_strtol_l.constprop.0+0x68>
 8005dc6:	2c2b      	cmp	r4, #43	; 0x2b
 8005dc8:	bf04      	itt	eq
 8005dca:	782c      	ldrbeq	r4, [r5, #0]
 8005dcc:	1c85      	addeq	r5, r0, #2
 8005dce:	e7cd      	b.n	8005d6c <_strtol_l.constprop.0+0x38>
 8005dd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005dd4:	f1bc 0f19 	cmp.w	ip, #25
 8005dd8:	d801      	bhi.n	8005dde <_strtol_l.constprop.0+0xaa>
 8005dda:	3c37      	subs	r4, #55	; 0x37
 8005ddc:	e7e4      	b.n	8005da8 <_strtol_l.constprop.0+0x74>
 8005dde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005de2:	f1bc 0f19 	cmp.w	ip, #25
 8005de6:	d804      	bhi.n	8005df2 <_strtol_l.constprop.0+0xbe>
 8005de8:	3c57      	subs	r4, #87	; 0x57
 8005dea:	e7dd      	b.n	8005da8 <_strtol_l.constprop.0+0x74>
 8005dec:	f04f 37ff 	mov.w	r7, #4294967295
 8005df0:	e7e6      	b.n	8005dc0 <_strtol_l.constprop.0+0x8c>
 8005df2:	2f00      	cmp	r7, #0
 8005df4:	da07      	bge.n	8005e06 <_strtol_l.constprop.0+0xd2>
 8005df6:	2322      	movs	r3, #34	; 0x22
 8005df8:	4670      	mov	r0, lr
 8005dfa:	f8c8 3000 	str.w	r3, [r8]
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	d0a4      	beq.n	8005d4c <_strtol_l.constprop.0+0x18>
 8005e02:	1e69      	subs	r1, r5, #1
 8005e04:	e005      	b.n	8005e12 <_strtol_l.constprop.0+0xde>
 8005e06:	b106      	cbz	r6, 8005e0a <_strtol_l.constprop.0+0xd6>
 8005e08:	4240      	negs	r0, r0
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	d09e      	beq.n	8005d4c <_strtol_l.constprop.0+0x18>
 8005e0e:	2f00      	cmp	r7, #0
 8005e10:	d1f7      	bne.n	8005e02 <_strtol_l.constprop.0+0xce>
 8005e12:	6011      	str	r1, [r2, #0]
 8005e14:	e79a      	b.n	8005d4c <_strtol_l.constprop.0+0x18>
 8005e16:	2430      	movs	r4, #48	; 0x30
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1b5      	bne.n	8005d88 <_strtol_l.constprop.0+0x54>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	e7b3      	b.n	8005d88 <_strtol_l.constprop.0+0x54>
 8005e20:	2c30      	cmp	r4, #48	; 0x30
 8005e22:	d0a9      	beq.n	8005d78 <_strtol_l.constprop.0+0x44>
 8005e24:	230a      	movs	r3, #10
 8005e26:	e7af      	b.n	8005d88 <_strtol_l.constprop.0+0x54>
 8005e28:	080083d5 	.word	0x080083d5

08005e2c <_strtol_r>:
 8005e2c:	f7ff bf82 	b.w	8005d34 <_strtol_l.constprop.0>

08005e30 <_write_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4d05      	ldr	r5, [pc, #20]	; (8005e50 <_write_r+0x20>)
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fb fcb8 	bl	80017b4 <_write>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_write_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_write_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20000aa8 	.word	0x20000aa8

08005e54 <__assert_func>:
 8005e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e56:	4614      	mov	r4, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b09      	ldr	r3, [pc, #36]	; (8005e80 <__assert_func+0x2c>)
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68d8      	ldr	r0, [r3, #12]
 8005e62:	b14c      	cbz	r4, 8005e78 <__assert_func+0x24>
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <__assert_func+0x30>)
 8005e66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e6a:	9100      	str	r1, [sp, #0]
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	4906      	ldr	r1, [pc, #24]	; (8005e88 <__assert_func+0x34>)
 8005e70:	f000 f81e 	bl	8005eb0 <fiprintf>
 8005e74:	f001 febc 	bl	8007bf0 <abort>
 8005e78:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <__assert_func+0x38>)
 8005e7a:	461c      	mov	r4, r3
 8005e7c:	e7f3      	b.n	8005e66 <__assert_func+0x12>
 8005e7e:	bf00      	nop
 8005e80:	20000034 	.word	0x20000034
 8005e84:	08008398 	.word	0x08008398
 8005e88:	080083a5 	.word	0x080083a5
 8005e8c:	080083d3 	.word	0x080083d3

08005e90 <_close_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	2300      	movs	r3, #0
 8005e94:	4d05      	ldr	r5, [pc, #20]	; (8005eac <_close_r+0x1c>)
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fb fca6 	bl	80017ec <_close>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_close_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_close_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	20000aa8 	.word	0x20000aa8

08005eb0 <fiprintf>:
 8005eb0:	b40e      	push	{r1, r2, r3}
 8005eb2:	b503      	push	{r0, r1, lr}
 8005eb4:	4601      	mov	r1, r0
 8005eb6:	ab03      	add	r3, sp, #12
 8005eb8:	4805      	ldr	r0, [pc, #20]	; (8005ed0 <fiprintf+0x20>)
 8005eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ebe:	6800      	ldr	r0, [r0, #0]
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	f001 fac5 	bl	8007450 <_vfiprintf_r>
 8005ec6:	b002      	add	sp, #8
 8005ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ecc:	b003      	add	sp, #12
 8005ece:	4770      	bx	lr
 8005ed0:	20000034 	.word	0x20000034

08005ed4 <rshift>:
 8005ed4:	6903      	ldr	r3, [r0, #16]
 8005ed6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eda:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005ede:	f100 0414 	add.w	r4, r0, #20
 8005ee2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005ee6:	dd46      	ble.n	8005f76 <rshift+0xa2>
 8005ee8:	f011 011f 	ands.w	r1, r1, #31
 8005eec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005ef0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005ef4:	d10c      	bne.n	8005f10 <rshift+0x3c>
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f100 0710 	add.w	r7, r0, #16
 8005efc:	42b1      	cmp	r1, r6
 8005efe:	d335      	bcc.n	8005f6c <rshift+0x98>
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	1eea      	subs	r2, r5, #3
 8005f06:	4296      	cmp	r6, r2
 8005f08:	bf38      	it	cc
 8005f0a:	2300      	movcc	r3, #0
 8005f0c:	4423      	add	r3, r4
 8005f0e:	e015      	b.n	8005f3c <rshift+0x68>
 8005f10:	46a1      	mov	r9, r4
 8005f12:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005f16:	f1c1 0820 	rsb	r8, r1, #32
 8005f1a:	40cf      	lsrs	r7, r1
 8005f1c:	f105 0e04 	add.w	lr, r5, #4
 8005f20:	4576      	cmp	r6, lr
 8005f22:	46f4      	mov	ip, lr
 8005f24:	d816      	bhi.n	8005f54 <rshift+0x80>
 8005f26:	1a9a      	subs	r2, r3, r2
 8005f28:	0092      	lsls	r2, r2, #2
 8005f2a:	3a04      	subs	r2, #4
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	42ae      	cmp	r6, r5
 8005f30:	bf38      	it	cc
 8005f32:	2200      	movcc	r2, #0
 8005f34:	18a3      	adds	r3, r4, r2
 8005f36:	50a7      	str	r7, [r4, r2]
 8005f38:	b107      	cbz	r7, 8005f3c <rshift+0x68>
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	eba3 0204 	sub.w	r2, r3, r4
 8005f42:	bf08      	it	eq
 8005f44:	2300      	moveq	r3, #0
 8005f46:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005f4a:	6102      	str	r2, [r0, #16]
 8005f4c:	bf08      	it	eq
 8005f4e:	6143      	streq	r3, [r0, #20]
 8005f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f54:	f8dc c000 	ldr.w	ip, [ip]
 8005f58:	fa0c fc08 	lsl.w	ip, ip, r8
 8005f5c:	ea4c 0707 	orr.w	r7, ip, r7
 8005f60:	f849 7b04 	str.w	r7, [r9], #4
 8005f64:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f68:	40cf      	lsrs	r7, r1
 8005f6a:	e7d9      	b.n	8005f20 <rshift+0x4c>
 8005f6c:	f851 cb04 	ldr.w	ip, [r1], #4
 8005f70:	f847 cf04 	str.w	ip, [r7, #4]!
 8005f74:	e7c2      	b.n	8005efc <rshift+0x28>
 8005f76:	4623      	mov	r3, r4
 8005f78:	e7e0      	b.n	8005f3c <rshift+0x68>

08005f7a <__hexdig_fun>:
 8005f7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d802      	bhi.n	8005f88 <__hexdig_fun+0xe>
 8005f82:	3820      	subs	r0, #32
 8005f84:	b2c0      	uxtb	r0, r0
 8005f86:	4770      	bx	lr
 8005f88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005f8c:	2b05      	cmp	r3, #5
 8005f8e:	d801      	bhi.n	8005f94 <__hexdig_fun+0x1a>
 8005f90:	3847      	subs	r0, #71	; 0x47
 8005f92:	e7f7      	b.n	8005f84 <__hexdig_fun+0xa>
 8005f94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005f98:	2b05      	cmp	r3, #5
 8005f9a:	d801      	bhi.n	8005fa0 <__hexdig_fun+0x26>
 8005f9c:	3827      	subs	r0, #39	; 0x27
 8005f9e:	e7f1      	b.n	8005f84 <__hexdig_fun+0xa>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	4770      	bx	lr

08005fa4 <__gethex>:
 8005fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa8:	b08b      	sub	sp, #44	; 0x2c
 8005faa:	9305      	str	r3, [sp, #20]
 8005fac:	4bb2      	ldr	r3, [pc, #712]	; (8006278 <__gethex+0x2d4>)
 8005fae:	9002      	str	r0, [sp, #8]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	468b      	mov	fp, r1
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	4690      	mov	r8, r2
 8005fb8:	9303      	str	r3, [sp, #12]
 8005fba:	f7fa f8c9 	bl	8000150 <strlen>
 8005fbe:	4682      	mov	sl, r0
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	f8db 2000 	ldr.w	r2, [fp]
 8005fc6:	4403      	add	r3, r0
 8005fc8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005fcc:	9306      	str	r3, [sp, #24]
 8005fce:	1c93      	adds	r3, r2, #2
 8005fd0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005fd4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005fd8:	32fe      	adds	r2, #254	; 0xfe
 8005fda:	18d1      	adds	r1, r2, r3
 8005fdc:	461f      	mov	r7, r3
 8005fde:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005fe2:	9101      	str	r1, [sp, #4]
 8005fe4:	2830      	cmp	r0, #48	; 0x30
 8005fe6:	d0f8      	beq.n	8005fda <__gethex+0x36>
 8005fe8:	f7ff ffc7 	bl	8005f7a <__hexdig_fun>
 8005fec:	4604      	mov	r4, r0
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d13a      	bne.n	8006068 <__gethex+0xc4>
 8005ff2:	4652      	mov	r2, sl
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	9903      	ldr	r1, [sp, #12]
 8005ff8:	f001 fd18 	bl	8007a2c <strncmp>
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d166      	bne.n	80060d0 <__gethex+0x12c>
 8006002:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006006:	eb07 060a 	add.w	r6, r7, sl
 800600a:	f7ff ffb6 	bl	8005f7a <__hexdig_fun>
 800600e:	2800      	cmp	r0, #0
 8006010:	d060      	beq.n	80060d4 <__gethex+0x130>
 8006012:	4633      	mov	r3, r6
 8006014:	7818      	ldrb	r0, [r3, #0]
 8006016:	461f      	mov	r7, r3
 8006018:	2830      	cmp	r0, #48	; 0x30
 800601a:	f103 0301 	add.w	r3, r3, #1
 800601e:	d0f9      	beq.n	8006014 <__gethex+0x70>
 8006020:	f7ff ffab 	bl	8005f7a <__hexdig_fun>
 8006024:	2301      	movs	r3, #1
 8006026:	fab0 f480 	clz	r4, r0
 800602a:	4635      	mov	r5, r6
 800602c:	0964      	lsrs	r4, r4, #5
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	463a      	mov	r2, r7
 8006032:	4616      	mov	r6, r2
 8006034:	7830      	ldrb	r0, [r6, #0]
 8006036:	3201      	adds	r2, #1
 8006038:	f7ff ff9f 	bl	8005f7a <__hexdig_fun>
 800603c:	2800      	cmp	r0, #0
 800603e:	d1f8      	bne.n	8006032 <__gethex+0x8e>
 8006040:	4652      	mov	r2, sl
 8006042:	4630      	mov	r0, r6
 8006044:	9903      	ldr	r1, [sp, #12]
 8006046:	f001 fcf1 	bl	8007a2c <strncmp>
 800604a:	b980      	cbnz	r0, 800606e <__gethex+0xca>
 800604c:	b94d      	cbnz	r5, 8006062 <__gethex+0xbe>
 800604e:	eb06 050a 	add.w	r5, r6, sl
 8006052:	462a      	mov	r2, r5
 8006054:	4616      	mov	r6, r2
 8006056:	7830      	ldrb	r0, [r6, #0]
 8006058:	3201      	adds	r2, #1
 800605a:	f7ff ff8e 	bl	8005f7a <__hexdig_fun>
 800605e:	2800      	cmp	r0, #0
 8006060:	d1f8      	bne.n	8006054 <__gethex+0xb0>
 8006062:	1bad      	subs	r5, r5, r6
 8006064:	00ad      	lsls	r5, r5, #2
 8006066:	e004      	b.n	8006072 <__gethex+0xce>
 8006068:	2400      	movs	r4, #0
 800606a:	4625      	mov	r5, r4
 800606c:	e7e0      	b.n	8006030 <__gethex+0x8c>
 800606e:	2d00      	cmp	r5, #0
 8006070:	d1f7      	bne.n	8006062 <__gethex+0xbe>
 8006072:	7833      	ldrb	r3, [r6, #0]
 8006074:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006078:	2b50      	cmp	r3, #80	; 0x50
 800607a:	d139      	bne.n	80060f0 <__gethex+0x14c>
 800607c:	7873      	ldrb	r3, [r6, #1]
 800607e:	2b2b      	cmp	r3, #43	; 0x2b
 8006080:	d02a      	beq.n	80060d8 <__gethex+0x134>
 8006082:	2b2d      	cmp	r3, #45	; 0x2d
 8006084:	d02c      	beq.n	80060e0 <__gethex+0x13c>
 8006086:	f04f 0900 	mov.w	r9, #0
 800608a:	1c71      	adds	r1, r6, #1
 800608c:	7808      	ldrb	r0, [r1, #0]
 800608e:	f7ff ff74 	bl	8005f7a <__hexdig_fun>
 8006092:	1e43      	subs	r3, r0, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b18      	cmp	r3, #24
 8006098:	d82a      	bhi.n	80060f0 <__gethex+0x14c>
 800609a:	f1a0 0210 	sub.w	r2, r0, #16
 800609e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80060a2:	f7ff ff6a 	bl	8005f7a <__hexdig_fun>
 80060a6:	1e43      	subs	r3, r0, #1
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b18      	cmp	r3, #24
 80060ac:	d91b      	bls.n	80060e6 <__gethex+0x142>
 80060ae:	f1b9 0f00 	cmp.w	r9, #0
 80060b2:	d000      	beq.n	80060b6 <__gethex+0x112>
 80060b4:	4252      	negs	r2, r2
 80060b6:	4415      	add	r5, r2
 80060b8:	f8cb 1000 	str.w	r1, [fp]
 80060bc:	b1d4      	cbz	r4, 80060f4 <__gethex+0x150>
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bf14      	ite	ne
 80060c4:	2700      	movne	r7, #0
 80060c6:	2706      	moveq	r7, #6
 80060c8:	4638      	mov	r0, r7
 80060ca:	b00b      	add	sp, #44	; 0x2c
 80060cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d0:	463e      	mov	r6, r7
 80060d2:	4625      	mov	r5, r4
 80060d4:	2401      	movs	r4, #1
 80060d6:	e7cc      	b.n	8006072 <__gethex+0xce>
 80060d8:	f04f 0900 	mov.w	r9, #0
 80060dc:	1cb1      	adds	r1, r6, #2
 80060de:	e7d5      	b.n	800608c <__gethex+0xe8>
 80060e0:	f04f 0901 	mov.w	r9, #1
 80060e4:	e7fa      	b.n	80060dc <__gethex+0x138>
 80060e6:	230a      	movs	r3, #10
 80060e8:	fb03 0202 	mla	r2, r3, r2, r0
 80060ec:	3a10      	subs	r2, #16
 80060ee:	e7d6      	b.n	800609e <__gethex+0xfa>
 80060f0:	4631      	mov	r1, r6
 80060f2:	e7e1      	b.n	80060b8 <__gethex+0x114>
 80060f4:	4621      	mov	r1, r4
 80060f6:	1bf3      	subs	r3, r6, r7
 80060f8:	3b01      	subs	r3, #1
 80060fa:	2b07      	cmp	r3, #7
 80060fc:	dc0a      	bgt.n	8006114 <__gethex+0x170>
 80060fe:	9802      	ldr	r0, [sp, #8]
 8006100:	f000 fa7a 	bl	80065f8 <_Balloc>
 8006104:	4604      	mov	r4, r0
 8006106:	b940      	cbnz	r0, 800611a <__gethex+0x176>
 8006108:	4602      	mov	r2, r0
 800610a:	21de      	movs	r1, #222	; 0xde
 800610c:	4b5b      	ldr	r3, [pc, #364]	; (800627c <__gethex+0x2d8>)
 800610e:	485c      	ldr	r0, [pc, #368]	; (8006280 <__gethex+0x2dc>)
 8006110:	f7ff fea0 	bl	8005e54 <__assert_func>
 8006114:	3101      	adds	r1, #1
 8006116:	105b      	asrs	r3, r3, #1
 8006118:	e7ef      	b.n	80060fa <__gethex+0x156>
 800611a:	f04f 0b00 	mov.w	fp, #0
 800611e:	f100 0914 	add.w	r9, r0, #20
 8006122:	f1ca 0301 	rsb	r3, sl, #1
 8006126:	f8cd 9010 	str.w	r9, [sp, #16]
 800612a:	f8cd b004 	str.w	fp, [sp, #4]
 800612e:	9308      	str	r3, [sp, #32]
 8006130:	42b7      	cmp	r7, r6
 8006132:	d33f      	bcc.n	80061b4 <__gethex+0x210>
 8006134:	9f04      	ldr	r7, [sp, #16]
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	f847 3b04 	str.w	r3, [r7], #4
 800613c:	eba7 0709 	sub.w	r7, r7, r9
 8006140:	10bf      	asrs	r7, r7, #2
 8006142:	6127      	str	r7, [r4, #16]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fb49 	bl	80067dc <__hi0bits>
 800614a:	017f      	lsls	r7, r7, #5
 800614c:	f8d8 6000 	ldr.w	r6, [r8]
 8006150:	1a3f      	subs	r7, r7, r0
 8006152:	42b7      	cmp	r7, r6
 8006154:	dd62      	ble.n	800621c <__gethex+0x278>
 8006156:	1bbf      	subs	r7, r7, r6
 8006158:	4639      	mov	r1, r7
 800615a:	4620      	mov	r0, r4
 800615c:	f000 fee3 	bl	8006f26 <__any_on>
 8006160:	4682      	mov	sl, r0
 8006162:	b1a8      	cbz	r0, 8006190 <__gethex+0x1ec>
 8006164:	f04f 0a01 	mov.w	sl, #1
 8006168:	1e7b      	subs	r3, r7, #1
 800616a:	1159      	asrs	r1, r3, #5
 800616c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006170:	f003 021f 	and.w	r2, r3, #31
 8006174:	fa0a f202 	lsl.w	r2, sl, r2
 8006178:	420a      	tst	r2, r1
 800617a:	d009      	beq.n	8006190 <__gethex+0x1ec>
 800617c:	4553      	cmp	r3, sl
 800617e:	dd05      	ble.n	800618c <__gethex+0x1e8>
 8006180:	4620      	mov	r0, r4
 8006182:	1eb9      	subs	r1, r7, #2
 8006184:	f000 fecf 	bl	8006f26 <__any_on>
 8006188:	2800      	cmp	r0, #0
 800618a:	d144      	bne.n	8006216 <__gethex+0x272>
 800618c:	f04f 0a02 	mov.w	sl, #2
 8006190:	4639      	mov	r1, r7
 8006192:	4620      	mov	r0, r4
 8006194:	f7ff fe9e 	bl	8005ed4 <rshift>
 8006198:	443d      	add	r5, r7
 800619a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800619e:	42ab      	cmp	r3, r5
 80061a0:	da4a      	bge.n	8006238 <__gethex+0x294>
 80061a2:	4621      	mov	r1, r4
 80061a4:	9802      	ldr	r0, [sp, #8]
 80061a6:	f000 fa67 	bl	8006678 <_Bfree>
 80061aa:	2300      	movs	r3, #0
 80061ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061ae:	27a3      	movs	r7, #163	; 0xa3
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e789      	b.n	80060c8 <__gethex+0x124>
 80061b4:	1e73      	subs	r3, r6, #1
 80061b6:	9a06      	ldr	r2, [sp, #24]
 80061b8:	9307      	str	r3, [sp, #28]
 80061ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80061be:	4293      	cmp	r3, r2
 80061c0:	d019      	beq.n	80061f6 <__gethex+0x252>
 80061c2:	f1bb 0f20 	cmp.w	fp, #32
 80061c6:	d107      	bne.n	80061d8 <__gethex+0x234>
 80061c8:	9b04      	ldr	r3, [sp, #16]
 80061ca:	9a01      	ldr	r2, [sp, #4]
 80061cc:	f843 2b04 	str.w	r2, [r3], #4
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	2300      	movs	r3, #0
 80061d4:	469b      	mov	fp, r3
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80061dc:	f7ff fecd 	bl	8005f7a <__hexdig_fun>
 80061e0:	9b01      	ldr	r3, [sp, #4]
 80061e2:	f000 000f 	and.w	r0, r0, #15
 80061e6:	fa00 f00b 	lsl.w	r0, r0, fp
 80061ea:	4303      	orrs	r3, r0
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	f10b 0b04 	add.w	fp, fp, #4
 80061f2:	9b07      	ldr	r3, [sp, #28]
 80061f4:	e00d      	b.n	8006212 <__gethex+0x26e>
 80061f6:	9a08      	ldr	r2, [sp, #32]
 80061f8:	1e73      	subs	r3, r6, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	42bb      	cmp	r3, r7
 80061fe:	d3e0      	bcc.n	80061c2 <__gethex+0x21e>
 8006200:	4618      	mov	r0, r3
 8006202:	4652      	mov	r2, sl
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	9309      	str	r3, [sp, #36]	; 0x24
 8006208:	f001 fc10 	bl	8007a2c <strncmp>
 800620c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620e:	2800      	cmp	r0, #0
 8006210:	d1d7      	bne.n	80061c2 <__gethex+0x21e>
 8006212:	461e      	mov	r6, r3
 8006214:	e78c      	b.n	8006130 <__gethex+0x18c>
 8006216:	f04f 0a03 	mov.w	sl, #3
 800621a:	e7b9      	b.n	8006190 <__gethex+0x1ec>
 800621c:	da09      	bge.n	8006232 <__gethex+0x28e>
 800621e:	1bf7      	subs	r7, r6, r7
 8006220:	4621      	mov	r1, r4
 8006222:	463a      	mov	r2, r7
 8006224:	9802      	ldr	r0, [sp, #8]
 8006226:	f000 fc3f 	bl	8006aa8 <__lshift>
 800622a:	4604      	mov	r4, r0
 800622c:	1bed      	subs	r5, r5, r7
 800622e:	f100 0914 	add.w	r9, r0, #20
 8006232:	f04f 0a00 	mov.w	sl, #0
 8006236:	e7b0      	b.n	800619a <__gethex+0x1f6>
 8006238:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800623c:	42a8      	cmp	r0, r5
 800623e:	dd72      	ble.n	8006326 <__gethex+0x382>
 8006240:	1b45      	subs	r5, r0, r5
 8006242:	42ae      	cmp	r6, r5
 8006244:	dc35      	bgt.n	80062b2 <__gethex+0x30e>
 8006246:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d029      	beq.n	80062a2 <__gethex+0x2fe>
 800624e:	2b03      	cmp	r3, #3
 8006250:	d02b      	beq.n	80062aa <__gethex+0x306>
 8006252:	2b01      	cmp	r3, #1
 8006254:	d11c      	bne.n	8006290 <__gethex+0x2ec>
 8006256:	42ae      	cmp	r6, r5
 8006258:	d11a      	bne.n	8006290 <__gethex+0x2ec>
 800625a:	2e01      	cmp	r6, #1
 800625c:	d112      	bne.n	8006284 <__gethex+0x2e0>
 800625e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006262:	9a05      	ldr	r2, [sp, #20]
 8006264:	2762      	movs	r7, #98	; 0x62
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	2301      	movs	r3, #1
 800626a:	6123      	str	r3, [r4, #16]
 800626c:	f8c9 3000 	str.w	r3, [r9]
 8006270:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006272:	601c      	str	r4, [r3, #0]
 8006274:	e728      	b.n	80060c8 <__gethex+0x124>
 8006276:	bf00      	nop
 8006278:	0800854c 	.word	0x0800854c
 800627c:	080084d5 	.word	0x080084d5
 8006280:	080084e6 	.word	0x080084e6
 8006284:	4620      	mov	r0, r4
 8006286:	1e71      	subs	r1, r6, #1
 8006288:	f000 fe4d 	bl	8006f26 <__any_on>
 800628c:	2800      	cmp	r0, #0
 800628e:	d1e6      	bne.n	800625e <__gethex+0x2ba>
 8006290:	4621      	mov	r1, r4
 8006292:	9802      	ldr	r0, [sp, #8]
 8006294:	f000 f9f0 	bl	8006678 <_Bfree>
 8006298:	2300      	movs	r3, #0
 800629a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800629c:	2750      	movs	r7, #80	; 0x50
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e712      	b.n	80060c8 <__gethex+0x124>
 80062a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f3      	bne.n	8006290 <__gethex+0x2ec>
 80062a8:	e7d9      	b.n	800625e <__gethex+0x2ba>
 80062aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1d6      	bne.n	800625e <__gethex+0x2ba>
 80062b0:	e7ee      	b.n	8006290 <__gethex+0x2ec>
 80062b2:	1e6f      	subs	r7, r5, #1
 80062b4:	f1ba 0f00 	cmp.w	sl, #0
 80062b8:	d132      	bne.n	8006320 <__gethex+0x37c>
 80062ba:	b127      	cbz	r7, 80062c6 <__gethex+0x322>
 80062bc:	4639      	mov	r1, r7
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 fe31 	bl	8006f26 <__any_on>
 80062c4:	4682      	mov	sl, r0
 80062c6:	2101      	movs	r1, #1
 80062c8:	117b      	asrs	r3, r7, #5
 80062ca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80062ce:	f007 071f 	and.w	r7, r7, #31
 80062d2:	fa01 f707 	lsl.w	r7, r1, r7
 80062d6:	421f      	tst	r7, r3
 80062d8:	f04f 0702 	mov.w	r7, #2
 80062dc:	4629      	mov	r1, r5
 80062de:	4620      	mov	r0, r4
 80062e0:	bf18      	it	ne
 80062e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80062e6:	1b76      	subs	r6, r6, r5
 80062e8:	f7ff fdf4 	bl	8005ed4 <rshift>
 80062ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80062f0:	f1ba 0f00 	cmp.w	sl, #0
 80062f4:	d048      	beq.n	8006388 <__gethex+0x3e4>
 80062f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d015      	beq.n	800632a <__gethex+0x386>
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d017      	beq.n	8006332 <__gethex+0x38e>
 8006302:	2b01      	cmp	r3, #1
 8006304:	d109      	bne.n	800631a <__gethex+0x376>
 8006306:	f01a 0f02 	tst.w	sl, #2
 800630a:	d006      	beq.n	800631a <__gethex+0x376>
 800630c:	f8d9 0000 	ldr.w	r0, [r9]
 8006310:	ea4a 0a00 	orr.w	sl, sl, r0
 8006314:	f01a 0f01 	tst.w	sl, #1
 8006318:	d10e      	bne.n	8006338 <__gethex+0x394>
 800631a:	f047 0710 	orr.w	r7, r7, #16
 800631e:	e033      	b.n	8006388 <__gethex+0x3e4>
 8006320:	f04f 0a01 	mov.w	sl, #1
 8006324:	e7cf      	b.n	80062c6 <__gethex+0x322>
 8006326:	2701      	movs	r7, #1
 8006328:	e7e2      	b.n	80062f0 <__gethex+0x34c>
 800632a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800632c:	f1c3 0301 	rsb	r3, r3, #1
 8006330:	9315      	str	r3, [sp, #84]	; 0x54
 8006332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <__gethex+0x376>
 8006338:	f04f 0c00 	mov.w	ip, #0
 800633c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006340:	f104 0314 	add.w	r3, r4, #20
 8006344:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006348:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800634c:	4618      	mov	r0, r3
 800634e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006352:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006356:	d01c      	beq.n	8006392 <__gethex+0x3ee>
 8006358:	3201      	adds	r2, #1
 800635a:	6002      	str	r2, [r0, #0]
 800635c:	2f02      	cmp	r7, #2
 800635e:	f104 0314 	add.w	r3, r4, #20
 8006362:	d13d      	bne.n	80063e0 <__gethex+0x43c>
 8006364:	f8d8 2000 	ldr.w	r2, [r8]
 8006368:	3a01      	subs	r2, #1
 800636a:	42b2      	cmp	r2, r6
 800636c:	d10a      	bne.n	8006384 <__gethex+0x3e0>
 800636e:	2201      	movs	r2, #1
 8006370:	1171      	asrs	r1, r6, #5
 8006372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006376:	f006 061f 	and.w	r6, r6, #31
 800637a:	fa02 f606 	lsl.w	r6, r2, r6
 800637e:	421e      	tst	r6, r3
 8006380:	bf18      	it	ne
 8006382:	4617      	movne	r7, r2
 8006384:	f047 0720 	orr.w	r7, r7, #32
 8006388:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800638a:	601c      	str	r4, [r3, #0]
 800638c:	9b05      	ldr	r3, [sp, #20]
 800638e:	601d      	str	r5, [r3, #0]
 8006390:	e69a      	b.n	80060c8 <__gethex+0x124>
 8006392:	4299      	cmp	r1, r3
 8006394:	f843 cc04 	str.w	ip, [r3, #-4]
 8006398:	d8d8      	bhi.n	800634c <__gethex+0x3a8>
 800639a:	68a3      	ldr	r3, [r4, #8]
 800639c:	459b      	cmp	fp, r3
 800639e:	db17      	blt.n	80063d0 <__gethex+0x42c>
 80063a0:	6861      	ldr	r1, [r4, #4]
 80063a2:	9802      	ldr	r0, [sp, #8]
 80063a4:	3101      	adds	r1, #1
 80063a6:	f000 f927 	bl	80065f8 <_Balloc>
 80063aa:	4681      	mov	r9, r0
 80063ac:	b918      	cbnz	r0, 80063b6 <__gethex+0x412>
 80063ae:	4602      	mov	r2, r0
 80063b0:	2184      	movs	r1, #132	; 0x84
 80063b2:	4b19      	ldr	r3, [pc, #100]	; (8006418 <__gethex+0x474>)
 80063b4:	e6ab      	b.n	800610e <__gethex+0x16a>
 80063b6:	6922      	ldr	r2, [r4, #16]
 80063b8:	f104 010c 	add.w	r1, r4, #12
 80063bc:	3202      	adds	r2, #2
 80063be:	0092      	lsls	r2, r2, #2
 80063c0:	300c      	adds	r0, #12
 80063c2:	f7fe fc0f 	bl	8004be4 <memcpy>
 80063c6:	4621      	mov	r1, r4
 80063c8:	9802      	ldr	r0, [sp, #8]
 80063ca:	f000 f955 	bl	8006678 <_Bfree>
 80063ce:	464c      	mov	r4, r9
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	6122      	str	r2, [r4, #16]
 80063d6:	2201      	movs	r2, #1
 80063d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063dc:	615a      	str	r2, [r3, #20]
 80063de:	e7bd      	b.n	800635c <__gethex+0x3b8>
 80063e0:	6922      	ldr	r2, [r4, #16]
 80063e2:	455a      	cmp	r2, fp
 80063e4:	dd0b      	ble.n	80063fe <__gethex+0x45a>
 80063e6:	2101      	movs	r1, #1
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff fd73 	bl	8005ed4 <rshift>
 80063ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063f2:	3501      	adds	r5, #1
 80063f4:	42ab      	cmp	r3, r5
 80063f6:	f6ff aed4 	blt.w	80061a2 <__gethex+0x1fe>
 80063fa:	2701      	movs	r7, #1
 80063fc:	e7c2      	b.n	8006384 <__gethex+0x3e0>
 80063fe:	f016 061f 	ands.w	r6, r6, #31
 8006402:	d0fa      	beq.n	80063fa <__gethex+0x456>
 8006404:	4453      	add	r3, sl
 8006406:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800640a:	f000 f9e7 	bl	80067dc <__hi0bits>
 800640e:	f1c6 0620 	rsb	r6, r6, #32
 8006412:	42b0      	cmp	r0, r6
 8006414:	dbe7      	blt.n	80063e6 <__gethex+0x442>
 8006416:	e7f0      	b.n	80063fa <__gethex+0x456>
 8006418:	080084d5 	.word	0x080084d5

0800641c <L_shift>:
 800641c:	f1c2 0208 	rsb	r2, r2, #8
 8006420:	0092      	lsls	r2, r2, #2
 8006422:	b570      	push	{r4, r5, r6, lr}
 8006424:	f1c2 0620 	rsb	r6, r2, #32
 8006428:	6843      	ldr	r3, [r0, #4]
 800642a:	6804      	ldr	r4, [r0, #0]
 800642c:	fa03 f506 	lsl.w	r5, r3, r6
 8006430:	432c      	orrs	r4, r5
 8006432:	40d3      	lsrs	r3, r2
 8006434:	6004      	str	r4, [r0, #0]
 8006436:	f840 3f04 	str.w	r3, [r0, #4]!
 800643a:	4288      	cmp	r0, r1
 800643c:	d3f4      	bcc.n	8006428 <L_shift+0xc>
 800643e:	bd70      	pop	{r4, r5, r6, pc}

08006440 <__match>:
 8006440:	b530      	push	{r4, r5, lr}
 8006442:	6803      	ldr	r3, [r0, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800644a:	b914      	cbnz	r4, 8006452 <__match+0x12>
 800644c:	6003      	str	r3, [r0, #0]
 800644e:	2001      	movs	r0, #1
 8006450:	bd30      	pop	{r4, r5, pc}
 8006452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006456:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800645a:	2d19      	cmp	r5, #25
 800645c:	bf98      	it	ls
 800645e:	3220      	addls	r2, #32
 8006460:	42a2      	cmp	r2, r4
 8006462:	d0f0      	beq.n	8006446 <__match+0x6>
 8006464:	2000      	movs	r0, #0
 8006466:	e7f3      	b.n	8006450 <__match+0x10>

08006468 <__hexnan>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	2500      	movs	r5, #0
 800646e:	680b      	ldr	r3, [r1, #0]
 8006470:	4682      	mov	sl, r0
 8006472:	115e      	asrs	r6, r3, #5
 8006474:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006478:	f013 031f 	ands.w	r3, r3, #31
 800647c:	bf18      	it	ne
 800647e:	3604      	addne	r6, #4
 8006480:	1f37      	subs	r7, r6, #4
 8006482:	46b9      	mov	r9, r7
 8006484:	463c      	mov	r4, r7
 8006486:	46ab      	mov	fp, r5
 8006488:	b087      	sub	sp, #28
 800648a:	4690      	mov	r8, r2
 800648c:	6802      	ldr	r2, [r0, #0]
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	f846 5c04 	str.w	r5, [r6, #-4]
 8006494:	9502      	str	r5, [sp, #8]
 8006496:	7851      	ldrb	r1, [r2, #1]
 8006498:	1c53      	adds	r3, r2, #1
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	b341      	cbz	r1, 80064f0 <__hexnan+0x88>
 800649e:	4608      	mov	r0, r1
 80064a0:	9205      	str	r2, [sp, #20]
 80064a2:	9104      	str	r1, [sp, #16]
 80064a4:	f7ff fd69 	bl	8005f7a <__hexdig_fun>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d14f      	bne.n	800654c <__hexnan+0xe4>
 80064ac:	9904      	ldr	r1, [sp, #16]
 80064ae:	9a05      	ldr	r2, [sp, #20]
 80064b0:	2920      	cmp	r1, #32
 80064b2:	d818      	bhi.n	80064e6 <__hexnan+0x7e>
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	459b      	cmp	fp, r3
 80064b8:	dd13      	ble.n	80064e2 <__hexnan+0x7a>
 80064ba:	454c      	cmp	r4, r9
 80064bc:	d206      	bcs.n	80064cc <__hexnan+0x64>
 80064be:	2d07      	cmp	r5, #7
 80064c0:	dc04      	bgt.n	80064cc <__hexnan+0x64>
 80064c2:	462a      	mov	r2, r5
 80064c4:	4649      	mov	r1, r9
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff ffa8 	bl	800641c <L_shift>
 80064cc:	4544      	cmp	r4, r8
 80064ce:	d950      	bls.n	8006572 <__hexnan+0x10a>
 80064d0:	2300      	movs	r3, #0
 80064d2:	f1a4 0904 	sub.w	r9, r4, #4
 80064d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80064da:	461d      	mov	r5, r3
 80064dc:	464c      	mov	r4, r9
 80064de:	f8cd b008 	str.w	fp, [sp, #8]
 80064e2:	9a03      	ldr	r2, [sp, #12]
 80064e4:	e7d7      	b.n	8006496 <__hexnan+0x2e>
 80064e6:	2929      	cmp	r1, #41	; 0x29
 80064e8:	d156      	bne.n	8006598 <__hexnan+0x130>
 80064ea:	3202      	adds	r2, #2
 80064ec:	f8ca 2000 	str.w	r2, [sl]
 80064f0:	f1bb 0f00 	cmp.w	fp, #0
 80064f4:	d050      	beq.n	8006598 <__hexnan+0x130>
 80064f6:	454c      	cmp	r4, r9
 80064f8:	d206      	bcs.n	8006508 <__hexnan+0xa0>
 80064fa:	2d07      	cmp	r5, #7
 80064fc:	dc04      	bgt.n	8006508 <__hexnan+0xa0>
 80064fe:	462a      	mov	r2, r5
 8006500:	4649      	mov	r1, r9
 8006502:	4620      	mov	r0, r4
 8006504:	f7ff ff8a 	bl	800641c <L_shift>
 8006508:	4544      	cmp	r4, r8
 800650a:	d934      	bls.n	8006576 <__hexnan+0x10e>
 800650c:	4623      	mov	r3, r4
 800650e:	f1a8 0204 	sub.w	r2, r8, #4
 8006512:	f853 1b04 	ldr.w	r1, [r3], #4
 8006516:	429f      	cmp	r7, r3
 8006518:	f842 1f04 	str.w	r1, [r2, #4]!
 800651c:	d2f9      	bcs.n	8006512 <__hexnan+0xaa>
 800651e:	1b3b      	subs	r3, r7, r4
 8006520:	f023 0303 	bic.w	r3, r3, #3
 8006524:	3304      	adds	r3, #4
 8006526:	3401      	adds	r4, #1
 8006528:	3e03      	subs	r6, #3
 800652a:	42b4      	cmp	r4, r6
 800652c:	bf88      	it	hi
 800652e:	2304      	movhi	r3, #4
 8006530:	2200      	movs	r2, #0
 8006532:	4443      	add	r3, r8
 8006534:	f843 2b04 	str.w	r2, [r3], #4
 8006538:	429f      	cmp	r7, r3
 800653a:	d2fb      	bcs.n	8006534 <__hexnan+0xcc>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	b91b      	cbnz	r3, 8006548 <__hexnan+0xe0>
 8006540:	4547      	cmp	r7, r8
 8006542:	d127      	bne.n	8006594 <__hexnan+0x12c>
 8006544:	2301      	movs	r3, #1
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	2005      	movs	r0, #5
 800654a:	e026      	b.n	800659a <__hexnan+0x132>
 800654c:	3501      	adds	r5, #1
 800654e:	2d08      	cmp	r5, #8
 8006550:	f10b 0b01 	add.w	fp, fp, #1
 8006554:	dd06      	ble.n	8006564 <__hexnan+0xfc>
 8006556:	4544      	cmp	r4, r8
 8006558:	d9c3      	bls.n	80064e2 <__hexnan+0x7a>
 800655a:	2300      	movs	r3, #0
 800655c:	2501      	movs	r5, #1
 800655e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006562:	3c04      	subs	r4, #4
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	f000 000f 	and.w	r0, r0, #15
 800656a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800656e:	6022      	str	r2, [r4, #0]
 8006570:	e7b7      	b.n	80064e2 <__hexnan+0x7a>
 8006572:	2508      	movs	r5, #8
 8006574:	e7b5      	b.n	80064e2 <__hexnan+0x7a>
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0df      	beq.n	800653c <__hexnan+0xd4>
 800657c:	f04f 32ff 	mov.w	r2, #4294967295
 8006580:	f1c3 0320 	rsb	r3, r3, #32
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
 8006588:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800658c:	401a      	ands	r2, r3
 800658e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006592:	e7d3      	b.n	800653c <__hexnan+0xd4>
 8006594:	3f04      	subs	r7, #4
 8006596:	e7d1      	b.n	800653c <__hexnan+0xd4>
 8006598:	2004      	movs	r0, #4
 800659a:	b007      	add	sp, #28
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065a0 <_lseek_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	2200      	movs	r2, #0
 80065aa:	4d05      	ldr	r5, [pc, #20]	; (80065c0 <_lseek_r+0x20>)
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f7fb f940 	bl	8001834 <_lseek>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_lseek_r+0x1e>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_lseek_r+0x1e>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	20000aa8 	.word	0x20000aa8

080065c4 <malloc>:
 80065c4:	4b02      	ldr	r3, [pc, #8]	; (80065d0 <malloc+0xc>)
 80065c6:	4601      	mov	r1, r0
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	f000 bd49 	b.w	8007060 <_malloc_r>
 80065ce:	bf00      	nop
 80065d0:	20000034 	.word	0x20000034

080065d4 <__ascii_mbtowc>:
 80065d4:	b082      	sub	sp, #8
 80065d6:	b901      	cbnz	r1, 80065da <__ascii_mbtowc+0x6>
 80065d8:	a901      	add	r1, sp, #4
 80065da:	b142      	cbz	r2, 80065ee <__ascii_mbtowc+0x1a>
 80065dc:	b14b      	cbz	r3, 80065f2 <__ascii_mbtowc+0x1e>
 80065de:	7813      	ldrb	r3, [r2, #0]
 80065e0:	600b      	str	r3, [r1, #0]
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	1e10      	subs	r0, r2, #0
 80065e6:	bf18      	it	ne
 80065e8:	2001      	movne	r0, #1
 80065ea:	b002      	add	sp, #8
 80065ec:	4770      	bx	lr
 80065ee:	4610      	mov	r0, r2
 80065f0:	e7fb      	b.n	80065ea <__ascii_mbtowc+0x16>
 80065f2:	f06f 0001 	mvn.w	r0, #1
 80065f6:	e7f8      	b.n	80065ea <__ascii_mbtowc+0x16>

080065f8 <_Balloc>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065fc:	4604      	mov	r4, r0
 80065fe:	460d      	mov	r5, r1
 8006600:	b976      	cbnz	r6, 8006620 <_Balloc+0x28>
 8006602:	2010      	movs	r0, #16
 8006604:	f7ff ffde 	bl	80065c4 <malloc>
 8006608:	4602      	mov	r2, r0
 800660a:	6260      	str	r0, [r4, #36]	; 0x24
 800660c:	b920      	cbnz	r0, 8006618 <_Balloc+0x20>
 800660e:	2166      	movs	r1, #102	; 0x66
 8006610:	4b17      	ldr	r3, [pc, #92]	; (8006670 <_Balloc+0x78>)
 8006612:	4818      	ldr	r0, [pc, #96]	; (8006674 <_Balloc+0x7c>)
 8006614:	f7ff fc1e 	bl	8005e54 <__assert_func>
 8006618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800661c:	6006      	str	r6, [r0, #0]
 800661e:	60c6      	str	r6, [r0, #12]
 8006620:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006622:	68f3      	ldr	r3, [r6, #12]
 8006624:	b183      	cbz	r3, 8006648 <_Balloc+0x50>
 8006626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800662e:	b9b8      	cbnz	r0, 8006660 <_Balloc+0x68>
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f605 	lsl.w	r6, r1, r5
 8006636:	1d72      	adds	r2, r6, #5
 8006638:	4620      	mov	r0, r4
 800663a:	0092      	lsls	r2, r2, #2
 800663c:	f000 fc94 	bl	8006f68 <_calloc_r>
 8006640:	b160      	cbz	r0, 800665c <_Balloc+0x64>
 8006642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006646:	e00e      	b.n	8006666 <_Balloc+0x6e>
 8006648:	2221      	movs	r2, #33	; 0x21
 800664a:	2104      	movs	r1, #4
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fc8b 	bl	8006f68 <_calloc_r>
 8006652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006654:	60f0      	str	r0, [r6, #12]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e4      	bne.n	8006626 <_Balloc+0x2e>
 800665c:	2000      	movs	r0, #0
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	6802      	ldr	r2, [r0, #0]
 8006662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006666:	2300      	movs	r3, #0
 8006668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800666c:	e7f7      	b.n	800665e <_Balloc+0x66>
 800666e:	bf00      	nop
 8006670:	08008560 	.word	0x08008560
 8006674:	08008577 	.word	0x08008577

08006678 <_Bfree>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800667c:	4605      	mov	r5, r0
 800667e:	460c      	mov	r4, r1
 8006680:	b976      	cbnz	r6, 80066a0 <_Bfree+0x28>
 8006682:	2010      	movs	r0, #16
 8006684:	f7ff ff9e 	bl	80065c4 <malloc>
 8006688:	4602      	mov	r2, r0
 800668a:	6268      	str	r0, [r5, #36]	; 0x24
 800668c:	b920      	cbnz	r0, 8006698 <_Bfree+0x20>
 800668e:	218a      	movs	r1, #138	; 0x8a
 8006690:	4b08      	ldr	r3, [pc, #32]	; (80066b4 <_Bfree+0x3c>)
 8006692:	4809      	ldr	r0, [pc, #36]	; (80066b8 <_Bfree+0x40>)
 8006694:	f7ff fbde 	bl	8005e54 <__assert_func>
 8006698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800669c:	6006      	str	r6, [r0, #0]
 800669e:	60c6      	str	r6, [r0, #12]
 80066a0:	b13c      	cbz	r4, 80066b2 <_Bfree+0x3a>
 80066a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066a4:	6862      	ldr	r2, [r4, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066ac:	6021      	str	r1, [r4, #0]
 80066ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	08008560 	.word	0x08008560
 80066b8:	08008577 	.word	0x08008577

080066bc <__multadd>:
 80066bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c0:	4607      	mov	r7, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	461e      	mov	r6, r3
 80066c6:	2000      	movs	r0, #0
 80066c8:	690d      	ldr	r5, [r1, #16]
 80066ca:	f101 0c14 	add.w	ip, r1, #20
 80066ce:	f8dc 3000 	ldr.w	r3, [ip]
 80066d2:	3001      	adds	r0, #1
 80066d4:	b299      	uxth	r1, r3
 80066d6:	fb02 6101 	mla	r1, r2, r1, r6
 80066da:	0c1e      	lsrs	r6, r3, #16
 80066dc:	0c0b      	lsrs	r3, r1, #16
 80066de:	fb02 3306 	mla	r3, r2, r6, r3
 80066e2:	b289      	uxth	r1, r1
 80066e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066e8:	4285      	cmp	r5, r0
 80066ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066ee:	f84c 1b04 	str.w	r1, [ip], #4
 80066f2:	dcec      	bgt.n	80066ce <__multadd+0x12>
 80066f4:	b30e      	cbz	r6, 800673a <__multadd+0x7e>
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	dc19      	bgt.n	8006730 <__multadd+0x74>
 80066fc:	6861      	ldr	r1, [r4, #4]
 80066fe:	4638      	mov	r0, r7
 8006700:	3101      	adds	r1, #1
 8006702:	f7ff ff79 	bl	80065f8 <_Balloc>
 8006706:	4680      	mov	r8, r0
 8006708:	b928      	cbnz	r0, 8006716 <__multadd+0x5a>
 800670a:	4602      	mov	r2, r0
 800670c:	21b5      	movs	r1, #181	; 0xb5
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <__multadd+0x84>)
 8006710:	480c      	ldr	r0, [pc, #48]	; (8006744 <__multadd+0x88>)
 8006712:	f7ff fb9f 	bl	8005e54 <__assert_func>
 8006716:	6922      	ldr	r2, [r4, #16]
 8006718:	f104 010c 	add.w	r1, r4, #12
 800671c:	3202      	adds	r2, #2
 800671e:	0092      	lsls	r2, r2, #2
 8006720:	300c      	adds	r0, #12
 8006722:	f7fe fa5f 	bl	8004be4 <memcpy>
 8006726:	4621      	mov	r1, r4
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ffa5 	bl	8006678 <_Bfree>
 800672e:	4644      	mov	r4, r8
 8006730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006734:	3501      	adds	r5, #1
 8006736:	615e      	str	r6, [r3, #20]
 8006738:	6125      	str	r5, [r4, #16]
 800673a:	4620      	mov	r0, r4
 800673c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006740:	080084d5 	.word	0x080084d5
 8006744:	08008577 	.word	0x08008577

08006748 <__s2b>:
 8006748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800674c:	4615      	mov	r5, r2
 800674e:	2209      	movs	r2, #9
 8006750:	461f      	mov	r7, r3
 8006752:	3308      	adds	r3, #8
 8006754:	460c      	mov	r4, r1
 8006756:	fb93 f3f2 	sdiv	r3, r3, r2
 800675a:	4606      	mov	r6, r0
 800675c:	2201      	movs	r2, #1
 800675e:	2100      	movs	r1, #0
 8006760:	429a      	cmp	r2, r3
 8006762:	db09      	blt.n	8006778 <__s2b+0x30>
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff ff47 	bl	80065f8 <_Balloc>
 800676a:	b940      	cbnz	r0, 800677e <__s2b+0x36>
 800676c:	4602      	mov	r2, r0
 800676e:	21ce      	movs	r1, #206	; 0xce
 8006770:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <__s2b+0x8c>)
 8006772:	4819      	ldr	r0, [pc, #100]	; (80067d8 <__s2b+0x90>)
 8006774:	f7ff fb6e 	bl	8005e54 <__assert_func>
 8006778:	0052      	lsls	r2, r2, #1
 800677a:	3101      	adds	r1, #1
 800677c:	e7f0      	b.n	8006760 <__s2b+0x18>
 800677e:	9b08      	ldr	r3, [sp, #32]
 8006780:	2d09      	cmp	r5, #9
 8006782:	6143      	str	r3, [r0, #20]
 8006784:	f04f 0301 	mov.w	r3, #1
 8006788:	6103      	str	r3, [r0, #16]
 800678a:	dd16      	ble.n	80067ba <__s2b+0x72>
 800678c:	f104 0909 	add.w	r9, r4, #9
 8006790:	46c8      	mov	r8, r9
 8006792:	442c      	add	r4, r5
 8006794:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006798:	4601      	mov	r1, r0
 800679a:	220a      	movs	r2, #10
 800679c:	4630      	mov	r0, r6
 800679e:	3b30      	subs	r3, #48	; 0x30
 80067a0:	f7ff ff8c 	bl	80066bc <__multadd>
 80067a4:	45a0      	cmp	r8, r4
 80067a6:	d1f5      	bne.n	8006794 <__s2b+0x4c>
 80067a8:	f1a5 0408 	sub.w	r4, r5, #8
 80067ac:	444c      	add	r4, r9
 80067ae:	1b2d      	subs	r5, r5, r4
 80067b0:	1963      	adds	r3, r4, r5
 80067b2:	42bb      	cmp	r3, r7
 80067b4:	db04      	blt.n	80067c0 <__s2b+0x78>
 80067b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ba:	2509      	movs	r5, #9
 80067bc:	340a      	adds	r4, #10
 80067be:	e7f6      	b.n	80067ae <__s2b+0x66>
 80067c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80067c4:	4601      	mov	r1, r0
 80067c6:	220a      	movs	r2, #10
 80067c8:	4630      	mov	r0, r6
 80067ca:	3b30      	subs	r3, #48	; 0x30
 80067cc:	f7ff ff76 	bl	80066bc <__multadd>
 80067d0:	e7ee      	b.n	80067b0 <__s2b+0x68>
 80067d2:	bf00      	nop
 80067d4:	080084d5 	.word	0x080084d5
 80067d8:	08008577 	.word	0x08008577

080067dc <__hi0bits>:
 80067dc:	0c02      	lsrs	r2, r0, #16
 80067de:	0412      	lsls	r2, r2, #16
 80067e0:	4603      	mov	r3, r0
 80067e2:	b9ca      	cbnz	r2, 8006818 <__hi0bits+0x3c>
 80067e4:	0403      	lsls	r3, r0, #16
 80067e6:	2010      	movs	r0, #16
 80067e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067ec:	bf04      	itt	eq
 80067ee:	021b      	lsleq	r3, r3, #8
 80067f0:	3008      	addeq	r0, #8
 80067f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067f6:	bf04      	itt	eq
 80067f8:	011b      	lsleq	r3, r3, #4
 80067fa:	3004      	addeq	r0, #4
 80067fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006800:	bf04      	itt	eq
 8006802:	009b      	lsleq	r3, r3, #2
 8006804:	3002      	addeq	r0, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	db05      	blt.n	8006816 <__hi0bits+0x3a>
 800680a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800680e:	f100 0001 	add.w	r0, r0, #1
 8006812:	bf08      	it	eq
 8006814:	2020      	moveq	r0, #32
 8006816:	4770      	bx	lr
 8006818:	2000      	movs	r0, #0
 800681a:	e7e5      	b.n	80067e8 <__hi0bits+0xc>

0800681c <__lo0bits>:
 800681c:	6803      	ldr	r3, [r0, #0]
 800681e:	4602      	mov	r2, r0
 8006820:	f013 0007 	ands.w	r0, r3, #7
 8006824:	d00b      	beq.n	800683e <__lo0bits+0x22>
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d421      	bmi.n	800686e <__lo0bits+0x52>
 800682a:	0798      	lsls	r0, r3, #30
 800682c:	bf49      	itett	mi
 800682e:	085b      	lsrmi	r3, r3, #1
 8006830:	089b      	lsrpl	r3, r3, #2
 8006832:	2001      	movmi	r0, #1
 8006834:	6013      	strmi	r3, [r2, #0]
 8006836:	bf5c      	itt	pl
 8006838:	2002      	movpl	r0, #2
 800683a:	6013      	strpl	r3, [r2, #0]
 800683c:	4770      	bx	lr
 800683e:	b299      	uxth	r1, r3
 8006840:	b909      	cbnz	r1, 8006846 <__lo0bits+0x2a>
 8006842:	2010      	movs	r0, #16
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	b2d9      	uxtb	r1, r3
 8006848:	b909      	cbnz	r1, 800684e <__lo0bits+0x32>
 800684a:	3008      	adds	r0, #8
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	0719      	lsls	r1, r3, #28
 8006850:	bf04      	itt	eq
 8006852:	091b      	lsreq	r3, r3, #4
 8006854:	3004      	addeq	r0, #4
 8006856:	0799      	lsls	r1, r3, #30
 8006858:	bf04      	itt	eq
 800685a:	089b      	lsreq	r3, r3, #2
 800685c:	3002      	addeq	r0, #2
 800685e:	07d9      	lsls	r1, r3, #31
 8006860:	d403      	bmi.n	800686a <__lo0bits+0x4e>
 8006862:	085b      	lsrs	r3, r3, #1
 8006864:	f100 0001 	add.w	r0, r0, #1
 8006868:	d003      	beq.n	8006872 <__lo0bits+0x56>
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	4770      	bx	lr
 800686e:	2000      	movs	r0, #0
 8006870:	4770      	bx	lr
 8006872:	2020      	movs	r0, #32
 8006874:	4770      	bx	lr
	...

08006878 <__i2b>:
 8006878:	b510      	push	{r4, lr}
 800687a:	460c      	mov	r4, r1
 800687c:	2101      	movs	r1, #1
 800687e:	f7ff febb 	bl	80065f8 <_Balloc>
 8006882:	4602      	mov	r2, r0
 8006884:	b928      	cbnz	r0, 8006892 <__i2b+0x1a>
 8006886:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800688a:	4b04      	ldr	r3, [pc, #16]	; (800689c <__i2b+0x24>)
 800688c:	4804      	ldr	r0, [pc, #16]	; (80068a0 <__i2b+0x28>)
 800688e:	f7ff fae1 	bl	8005e54 <__assert_func>
 8006892:	2301      	movs	r3, #1
 8006894:	6144      	str	r4, [r0, #20]
 8006896:	6103      	str	r3, [r0, #16]
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	080084d5 	.word	0x080084d5
 80068a0:	08008577 	.word	0x08008577

080068a4 <__multiply>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	4691      	mov	r9, r2
 80068aa:	690a      	ldr	r2, [r1, #16]
 80068ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068b0:	460c      	mov	r4, r1
 80068b2:	429a      	cmp	r2, r3
 80068b4:	bfbe      	ittt	lt
 80068b6:	460b      	movlt	r3, r1
 80068b8:	464c      	movlt	r4, r9
 80068ba:	4699      	movlt	r9, r3
 80068bc:	6927      	ldr	r7, [r4, #16]
 80068be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068c2:	68a3      	ldr	r3, [r4, #8]
 80068c4:	6861      	ldr	r1, [r4, #4]
 80068c6:	eb07 060a 	add.w	r6, r7, sl
 80068ca:	42b3      	cmp	r3, r6
 80068cc:	b085      	sub	sp, #20
 80068ce:	bfb8      	it	lt
 80068d0:	3101      	addlt	r1, #1
 80068d2:	f7ff fe91 	bl	80065f8 <_Balloc>
 80068d6:	b930      	cbnz	r0, 80068e6 <__multiply+0x42>
 80068d8:	4602      	mov	r2, r0
 80068da:	f240 115d 	movw	r1, #349	; 0x15d
 80068de:	4b43      	ldr	r3, [pc, #268]	; (80069ec <__multiply+0x148>)
 80068e0:	4843      	ldr	r0, [pc, #268]	; (80069f0 <__multiply+0x14c>)
 80068e2:	f7ff fab7 	bl	8005e54 <__assert_func>
 80068e6:	f100 0514 	add.w	r5, r0, #20
 80068ea:	462b      	mov	r3, r5
 80068ec:	2200      	movs	r2, #0
 80068ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068f2:	4543      	cmp	r3, r8
 80068f4:	d321      	bcc.n	800693a <__multiply+0x96>
 80068f6:	f104 0314 	add.w	r3, r4, #20
 80068fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068fe:	f109 0314 	add.w	r3, r9, #20
 8006902:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006906:	9202      	str	r2, [sp, #8]
 8006908:	1b3a      	subs	r2, r7, r4
 800690a:	3a15      	subs	r2, #21
 800690c:	f022 0203 	bic.w	r2, r2, #3
 8006910:	3204      	adds	r2, #4
 8006912:	f104 0115 	add.w	r1, r4, #21
 8006916:	428f      	cmp	r7, r1
 8006918:	bf38      	it	cc
 800691a:	2204      	movcc	r2, #4
 800691c:	9201      	str	r2, [sp, #4]
 800691e:	9a02      	ldr	r2, [sp, #8]
 8006920:	9303      	str	r3, [sp, #12]
 8006922:	429a      	cmp	r2, r3
 8006924:	d80c      	bhi.n	8006940 <__multiply+0x9c>
 8006926:	2e00      	cmp	r6, #0
 8006928:	dd03      	ble.n	8006932 <__multiply+0x8e>
 800692a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800692e:	2b00      	cmp	r3, #0
 8006930:	d059      	beq.n	80069e6 <__multiply+0x142>
 8006932:	6106      	str	r6, [r0, #16]
 8006934:	b005      	add	sp, #20
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693a:	f843 2b04 	str.w	r2, [r3], #4
 800693e:	e7d8      	b.n	80068f2 <__multiply+0x4e>
 8006940:	f8b3 a000 	ldrh.w	sl, [r3]
 8006944:	f1ba 0f00 	cmp.w	sl, #0
 8006948:	d023      	beq.n	8006992 <__multiply+0xee>
 800694a:	46a9      	mov	r9, r5
 800694c:	f04f 0c00 	mov.w	ip, #0
 8006950:	f104 0e14 	add.w	lr, r4, #20
 8006954:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006958:	f8d9 1000 	ldr.w	r1, [r9]
 800695c:	fa1f fb82 	uxth.w	fp, r2
 8006960:	b289      	uxth	r1, r1
 8006962:	fb0a 110b 	mla	r1, sl, fp, r1
 8006966:	4461      	add	r1, ip
 8006968:	f8d9 c000 	ldr.w	ip, [r9]
 800696c:	0c12      	lsrs	r2, r2, #16
 800696e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006972:	fb0a c202 	mla	r2, sl, r2, ip
 8006976:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800697a:	b289      	uxth	r1, r1
 800697c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006980:	4577      	cmp	r7, lr
 8006982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006986:	f849 1b04 	str.w	r1, [r9], #4
 800698a:	d8e3      	bhi.n	8006954 <__multiply+0xb0>
 800698c:	9a01      	ldr	r2, [sp, #4]
 800698e:	f845 c002 	str.w	ip, [r5, r2]
 8006992:	9a03      	ldr	r2, [sp, #12]
 8006994:	3304      	adds	r3, #4
 8006996:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800699a:	f1b9 0f00 	cmp.w	r9, #0
 800699e:	d020      	beq.n	80069e2 <__multiply+0x13e>
 80069a0:	46ae      	mov	lr, r5
 80069a2:	f04f 0a00 	mov.w	sl, #0
 80069a6:	6829      	ldr	r1, [r5, #0]
 80069a8:	f104 0c14 	add.w	ip, r4, #20
 80069ac:	f8bc b000 	ldrh.w	fp, [ip]
 80069b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80069b4:	b289      	uxth	r1, r1
 80069b6:	fb09 220b 	mla	r2, r9, fp, r2
 80069ba:	4492      	add	sl, r2
 80069bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80069c0:	f84e 1b04 	str.w	r1, [lr], #4
 80069c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069c8:	f8be 1000 	ldrh.w	r1, [lr]
 80069cc:	0c12      	lsrs	r2, r2, #16
 80069ce:	fb09 1102 	mla	r1, r9, r2, r1
 80069d2:	4567      	cmp	r7, ip
 80069d4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80069d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80069dc:	d8e6      	bhi.n	80069ac <__multiply+0x108>
 80069de:	9a01      	ldr	r2, [sp, #4]
 80069e0:	50a9      	str	r1, [r5, r2]
 80069e2:	3504      	adds	r5, #4
 80069e4:	e79b      	b.n	800691e <__multiply+0x7a>
 80069e6:	3e01      	subs	r6, #1
 80069e8:	e79d      	b.n	8006926 <__multiply+0x82>
 80069ea:	bf00      	nop
 80069ec:	080084d5 	.word	0x080084d5
 80069f0:	08008577 	.word	0x08008577

080069f4 <__pow5mult>:
 80069f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f8:	4615      	mov	r5, r2
 80069fa:	f012 0203 	ands.w	r2, r2, #3
 80069fe:	4606      	mov	r6, r0
 8006a00:	460f      	mov	r7, r1
 8006a02:	d007      	beq.n	8006a14 <__pow5mult+0x20>
 8006a04:	4c25      	ldr	r4, [pc, #148]	; (8006a9c <__pow5mult+0xa8>)
 8006a06:	3a01      	subs	r2, #1
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a0e:	f7ff fe55 	bl	80066bc <__multadd>
 8006a12:	4607      	mov	r7, r0
 8006a14:	10ad      	asrs	r5, r5, #2
 8006a16:	d03d      	beq.n	8006a94 <__pow5mult+0xa0>
 8006a18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a1a:	b97c      	cbnz	r4, 8006a3c <__pow5mult+0x48>
 8006a1c:	2010      	movs	r0, #16
 8006a1e:	f7ff fdd1 	bl	80065c4 <malloc>
 8006a22:	4602      	mov	r2, r0
 8006a24:	6270      	str	r0, [r6, #36]	; 0x24
 8006a26:	b928      	cbnz	r0, 8006a34 <__pow5mult+0x40>
 8006a28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <__pow5mult+0xac>)
 8006a2e:	481d      	ldr	r0, [pc, #116]	; (8006aa4 <__pow5mult+0xb0>)
 8006a30:	f7ff fa10 	bl	8005e54 <__assert_func>
 8006a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a38:	6004      	str	r4, [r0, #0]
 8006a3a:	60c4      	str	r4, [r0, #12]
 8006a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a44:	b94c      	cbnz	r4, 8006a5a <__pow5mult+0x66>
 8006a46:	f240 2171 	movw	r1, #625	; 0x271
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7ff ff14 	bl	8006878 <__i2b>
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a58:	6003      	str	r3, [r0, #0]
 8006a5a:	f04f 0900 	mov.w	r9, #0
 8006a5e:	07eb      	lsls	r3, r5, #31
 8006a60:	d50a      	bpl.n	8006a78 <__pow5mult+0x84>
 8006a62:	4639      	mov	r1, r7
 8006a64:	4622      	mov	r2, r4
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff ff1c 	bl	80068a4 <__multiply>
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	4639      	mov	r1, r7
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7ff fe01 	bl	8006678 <_Bfree>
 8006a76:	4647      	mov	r7, r8
 8006a78:	106d      	asrs	r5, r5, #1
 8006a7a:	d00b      	beq.n	8006a94 <__pow5mult+0xa0>
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	b938      	cbnz	r0, 8006a90 <__pow5mult+0x9c>
 8006a80:	4622      	mov	r2, r4
 8006a82:	4621      	mov	r1, r4
 8006a84:	4630      	mov	r0, r6
 8006a86:	f7ff ff0d 	bl	80068a4 <__multiply>
 8006a8a:	6020      	str	r0, [r4, #0]
 8006a8c:	f8c0 9000 	str.w	r9, [r0]
 8006a90:	4604      	mov	r4, r0
 8006a92:	e7e4      	b.n	8006a5e <__pow5mult+0x6a>
 8006a94:	4638      	mov	r0, r7
 8006a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9a:	bf00      	nop
 8006a9c:	080086c8 	.word	0x080086c8
 8006aa0:	08008560 	.word	0x08008560
 8006aa4:	08008577 	.word	0x08008577

08006aa8 <__lshift>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	4607      	mov	r7, r0
 8006ab0:	4691      	mov	r9, r2
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	6849      	ldr	r1, [r1, #4]
 8006ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ac0:	f108 0601 	add.w	r6, r8, #1
 8006ac4:	42b3      	cmp	r3, r6
 8006ac6:	db0b      	blt.n	8006ae0 <__lshift+0x38>
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7ff fd95 	bl	80065f8 <_Balloc>
 8006ace:	4605      	mov	r5, r0
 8006ad0:	b948      	cbnz	r0, 8006ae6 <__lshift+0x3e>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ad8:	4b29      	ldr	r3, [pc, #164]	; (8006b80 <__lshift+0xd8>)
 8006ada:	482a      	ldr	r0, [pc, #168]	; (8006b84 <__lshift+0xdc>)
 8006adc:	f7ff f9ba 	bl	8005e54 <__assert_func>
 8006ae0:	3101      	adds	r1, #1
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	e7ee      	b.n	8006ac4 <__lshift+0x1c>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f100 0114 	add.w	r1, r0, #20
 8006aec:	f100 0210 	add.w	r2, r0, #16
 8006af0:	4618      	mov	r0, r3
 8006af2:	4553      	cmp	r3, sl
 8006af4:	db37      	blt.n	8006b66 <__lshift+0xbe>
 8006af6:	6920      	ldr	r0, [r4, #16]
 8006af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006afc:	f104 0314 	add.w	r3, r4, #20
 8006b00:	f019 091f 	ands.w	r9, r9, #31
 8006b04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b0c:	d02f      	beq.n	8006b6e <__lshift+0xc6>
 8006b0e:	468a      	mov	sl, r1
 8006b10:	f04f 0c00 	mov.w	ip, #0
 8006b14:	f1c9 0e20 	rsb	lr, r9, #32
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	fa02 f209 	lsl.w	r2, r2, r9
 8006b1e:	ea42 020c 	orr.w	r2, r2, ip
 8006b22:	f84a 2b04 	str.w	r2, [sl], #4
 8006b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2a:	4298      	cmp	r0, r3
 8006b2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b30:	d8f2      	bhi.n	8006b18 <__lshift+0x70>
 8006b32:	1b03      	subs	r3, r0, r4
 8006b34:	3b15      	subs	r3, #21
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	f104 0215 	add.w	r2, r4, #21
 8006b40:	4290      	cmp	r0, r2
 8006b42:	bf38      	it	cc
 8006b44:	2304      	movcc	r3, #4
 8006b46:	f841 c003 	str.w	ip, [r1, r3]
 8006b4a:	f1bc 0f00 	cmp.w	ip, #0
 8006b4e:	d001      	beq.n	8006b54 <__lshift+0xac>
 8006b50:	f108 0602 	add.w	r6, r8, #2
 8006b54:	3e01      	subs	r6, #1
 8006b56:	4638      	mov	r0, r7
 8006b58:	4621      	mov	r1, r4
 8006b5a:	612e      	str	r6, [r5, #16]
 8006b5c:	f7ff fd8c 	bl	8006678 <_Bfree>
 8006b60:	4628      	mov	r0, r5
 8006b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b66:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	e7c1      	b.n	8006af2 <__lshift+0x4a>
 8006b6e:	3904      	subs	r1, #4
 8006b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b74:	4298      	cmp	r0, r3
 8006b76:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b7a:	d8f9      	bhi.n	8006b70 <__lshift+0xc8>
 8006b7c:	e7ea      	b.n	8006b54 <__lshift+0xac>
 8006b7e:	bf00      	nop
 8006b80:	080084d5 	.word	0x080084d5
 8006b84:	08008577 	.word	0x08008577

08006b88 <__mcmp>:
 8006b88:	4603      	mov	r3, r0
 8006b8a:	690a      	ldr	r2, [r1, #16]
 8006b8c:	6900      	ldr	r0, [r0, #16]
 8006b8e:	b530      	push	{r4, r5, lr}
 8006b90:	1a80      	subs	r0, r0, r2
 8006b92:	d10d      	bne.n	8006bb0 <__mcmp+0x28>
 8006b94:	3314      	adds	r3, #20
 8006b96:	3114      	adds	r1, #20
 8006b98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ba0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ba4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ba8:	4295      	cmp	r5, r2
 8006baa:	d002      	beq.n	8006bb2 <__mcmp+0x2a>
 8006bac:	d304      	bcc.n	8006bb8 <__mcmp+0x30>
 8006bae:	2001      	movs	r0, #1
 8006bb0:	bd30      	pop	{r4, r5, pc}
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	d3f4      	bcc.n	8006ba0 <__mcmp+0x18>
 8006bb6:	e7fb      	b.n	8006bb0 <__mcmp+0x28>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e7f8      	b.n	8006bb0 <__mcmp+0x28>
	...

08006bc0 <__mdiff>:
 8006bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	460d      	mov	r5, r1
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4628      	mov	r0, r5
 8006bcc:	4614      	mov	r4, r2
 8006bce:	f7ff ffdb 	bl	8006b88 <__mcmp>
 8006bd2:	1e06      	subs	r6, r0, #0
 8006bd4:	d111      	bne.n	8006bfa <__mdiff+0x3a>
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff fd0d 	bl	80065f8 <_Balloc>
 8006bde:	4602      	mov	r2, r0
 8006be0:	b928      	cbnz	r0, 8006bee <__mdiff+0x2e>
 8006be2:	f240 2132 	movw	r1, #562	; 0x232
 8006be6:	4b3a      	ldr	r3, [pc, #232]	; (8006cd0 <__mdiff+0x110>)
 8006be8:	483a      	ldr	r0, [pc, #232]	; (8006cd4 <__mdiff+0x114>)
 8006bea:	f7ff f933 	bl	8005e54 <__assert_func>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfa:	bfa4      	itt	ge
 8006bfc:	4623      	movge	r3, r4
 8006bfe:	462c      	movge	r4, r5
 8006c00:	4638      	mov	r0, r7
 8006c02:	6861      	ldr	r1, [r4, #4]
 8006c04:	bfa6      	itte	ge
 8006c06:	461d      	movge	r5, r3
 8006c08:	2600      	movge	r6, #0
 8006c0a:	2601      	movlt	r6, #1
 8006c0c:	f7ff fcf4 	bl	80065f8 <_Balloc>
 8006c10:	4602      	mov	r2, r0
 8006c12:	b918      	cbnz	r0, 8006c1c <__mdiff+0x5c>
 8006c14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c18:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <__mdiff+0x110>)
 8006c1a:	e7e5      	b.n	8006be8 <__mdiff+0x28>
 8006c1c:	f102 0814 	add.w	r8, r2, #20
 8006c20:	46c2      	mov	sl, r8
 8006c22:	f04f 0c00 	mov.w	ip, #0
 8006c26:	6927      	ldr	r7, [r4, #16]
 8006c28:	60c6      	str	r6, [r0, #12]
 8006c2a:	692e      	ldr	r6, [r5, #16]
 8006c2c:	f104 0014 	add.w	r0, r4, #20
 8006c30:	f105 0914 	add.w	r9, r5, #20
 8006c34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006c38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c3c:	3410      	adds	r4, #16
 8006c3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006c42:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c46:	fa1f f18b 	uxth.w	r1, fp
 8006c4a:	448c      	add	ip, r1
 8006c4c:	b299      	uxth	r1, r3
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	ebac 0101 	sub.w	r1, ip, r1
 8006c54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c5c:	b289      	uxth	r1, r1
 8006c5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c62:	454e      	cmp	r6, r9
 8006c64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c68:	f84a 3b04 	str.w	r3, [sl], #4
 8006c6c:	d8e7      	bhi.n	8006c3e <__mdiff+0x7e>
 8006c6e:	1b73      	subs	r3, r6, r5
 8006c70:	3b15      	subs	r3, #21
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	3515      	adds	r5, #21
 8006c78:	3304      	adds	r3, #4
 8006c7a:	42ae      	cmp	r6, r5
 8006c7c:	bf38      	it	cc
 8006c7e:	2304      	movcc	r3, #4
 8006c80:	4418      	add	r0, r3
 8006c82:	4443      	add	r3, r8
 8006c84:	461e      	mov	r6, r3
 8006c86:	4605      	mov	r5, r0
 8006c88:	4575      	cmp	r5, lr
 8006c8a:	d30e      	bcc.n	8006caa <__mdiff+0xea>
 8006c8c:	f10e 0103 	add.w	r1, lr, #3
 8006c90:	1a09      	subs	r1, r1, r0
 8006c92:	f021 0103 	bic.w	r1, r1, #3
 8006c96:	3803      	subs	r0, #3
 8006c98:	4586      	cmp	lr, r0
 8006c9a:	bf38      	it	cc
 8006c9c:	2100      	movcc	r1, #0
 8006c9e:	4419      	add	r1, r3
 8006ca0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006ca4:	b18b      	cbz	r3, 8006cca <__mdiff+0x10a>
 8006ca6:	6117      	str	r7, [r2, #16]
 8006ca8:	e7a4      	b.n	8006bf4 <__mdiff+0x34>
 8006caa:	f855 8b04 	ldr.w	r8, [r5], #4
 8006cae:	fa1f f188 	uxth.w	r1, r8
 8006cb2:	4461      	add	r1, ip
 8006cb4:	140c      	asrs	r4, r1, #16
 8006cb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006cba:	b289      	uxth	r1, r1
 8006cbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006cc0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006cc4:	f846 1b04 	str.w	r1, [r6], #4
 8006cc8:	e7de      	b.n	8006c88 <__mdiff+0xc8>
 8006cca:	3f01      	subs	r7, #1
 8006ccc:	e7e8      	b.n	8006ca0 <__mdiff+0xe0>
 8006cce:	bf00      	nop
 8006cd0:	080084d5 	.word	0x080084d5
 8006cd4:	08008577 	.word	0x08008577

08006cd8 <__ulp>:
 8006cd8:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <__ulp+0x48>)
 8006cda:	400b      	ands	r3, r1
 8006cdc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	dd02      	ble.n	8006cea <__ulp+0x12>
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4770      	bx	lr
 8006cea:	425b      	negs	r3, r3
 8006cec:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006cf0:	f04f 0000 	mov.w	r0, #0
 8006cf4:	f04f 0100 	mov.w	r1, #0
 8006cf8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006cfc:	da04      	bge.n	8006d08 <__ulp+0x30>
 8006cfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d02:	fa43 f102 	asr.w	r1, r3, r2
 8006d06:	4770      	bx	lr
 8006d08:	f1a2 0314 	sub.w	r3, r2, #20
 8006d0c:	2b1e      	cmp	r3, #30
 8006d0e:	bfd6      	itet	le
 8006d10:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006d14:	2301      	movgt	r3, #1
 8006d16:	fa22 f303 	lsrle.w	r3, r2, r3
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	7ff00000 	.word	0x7ff00000

08006d24 <__b2d>:
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d28:	6907      	ldr	r7, [r0, #16]
 8006d2a:	f100 0914 	add.w	r9, r0, #20
 8006d2e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006d32:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006d36:	f1a7 0804 	sub.w	r8, r7, #4
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7ff fd4e 	bl	80067dc <__hi0bits>
 8006d40:	f1c0 0320 	rsb	r3, r0, #32
 8006d44:	280a      	cmp	r0, #10
 8006d46:	600b      	str	r3, [r1, #0]
 8006d48:	491f      	ldr	r1, [pc, #124]	; (8006dc8 <__b2d+0xa4>)
 8006d4a:	dc17      	bgt.n	8006d7c <__b2d+0x58>
 8006d4c:	45c1      	cmp	r9, r8
 8006d4e:	bf28      	it	cs
 8006d50:	2200      	movcs	r2, #0
 8006d52:	f1c0 0c0b 	rsb	ip, r0, #11
 8006d56:	fa26 f30c 	lsr.w	r3, r6, ip
 8006d5a:	bf38      	it	cc
 8006d5c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006d60:	ea43 0501 	orr.w	r5, r3, r1
 8006d64:	f100 0315 	add.w	r3, r0, #21
 8006d68:	fa06 f303 	lsl.w	r3, r6, r3
 8006d6c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006d70:	ea43 0402 	orr.w	r4, r3, r2
 8006d74:	4620      	mov	r0, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d7c:	45c1      	cmp	r9, r8
 8006d7e:	bf2e      	itee	cs
 8006d80:	2200      	movcs	r2, #0
 8006d82:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006d86:	f1a7 0808 	subcc.w	r8, r7, #8
 8006d8a:	f1b0 030b 	subs.w	r3, r0, #11
 8006d8e:	d016      	beq.n	8006dbe <__b2d+0x9a>
 8006d90:	f1c3 0720 	rsb	r7, r3, #32
 8006d94:	fa22 f107 	lsr.w	r1, r2, r7
 8006d98:	45c8      	cmp	r8, r9
 8006d9a:	fa06 f603 	lsl.w	r6, r6, r3
 8006d9e:	ea46 0601 	orr.w	r6, r6, r1
 8006da2:	bf94      	ite	ls
 8006da4:	2100      	movls	r1, #0
 8006da6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006daa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006dae:	fa02 f003 	lsl.w	r0, r2, r3
 8006db2:	40f9      	lsrs	r1, r7
 8006db4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006db8:	ea40 0401 	orr.w	r4, r0, r1
 8006dbc:	e7da      	b.n	8006d74 <__b2d+0x50>
 8006dbe:	4614      	mov	r4, r2
 8006dc0:	ea46 0501 	orr.w	r5, r6, r1
 8006dc4:	e7d6      	b.n	8006d74 <__b2d+0x50>
 8006dc6:	bf00      	nop
 8006dc8:	3ff00000 	.word	0x3ff00000

08006dcc <__d2b>:
 8006dcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006dd6:	4690      	mov	r8, r2
 8006dd8:	461d      	mov	r5, r3
 8006dda:	f7ff fc0d 	bl	80065f8 <_Balloc>
 8006dde:	4604      	mov	r4, r0
 8006de0:	b930      	cbnz	r0, 8006df0 <__d2b+0x24>
 8006de2:	4602      	mov	r2, r0
 8006de4:	f240 310a 	movw	r1, #778	; 0x30a
 8006de8:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <__d2b+0xb0>)
 8006dea:	4825      	ldr	r0, [pc, #148]	; (8006e80 <__d2b+0xb4>)
 8006dec:	f7ff f832 	bl	8005e54 <__assert_func>
 8006df0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006df4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006df8:	bb2d      	cbnz	r5, 8006e46 <__d2b+0x7a>
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	f1b8 0300 	subs.w	r3, r8, #0
 8006e00:	d026      	beq.n	8006e50 <__d2b+0x84>
 8006e02:	4668      	mov	r0, sp
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	f7ff fd09 	bl	800681c <__lo0bits>
 8006e0a:	9900      	ldr	r1, [sp, #0]
 8006e0c:	b1f0      	cbz	r0, 8006e4c <__d2b+0x80>
 8006e0e:	9a01      	ldr	r2, [sp, #4]
 8006e10:	f1c0 0320 	rsb	r3, r0, #32
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	40c2      	lsrs	r2, r0
 8006e1c:	6163      	str	r3, [r4, #20]
 8006e1e:	9201      	str	r2, [sp, #4]
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	bf14      	ite	ne
 8006e26:	2102      	movne	r1, #2
 8006e28:	2101      	moveq	r1, #1
 8006e2a:	61a3      	str	r3, [r4, #24]
 8006e2c:	6121      	str	r1, [r4, #16]
 8006e2e:	b1c5      	cbz	r5, 8006e62 <__d2b+0x96>
 8006e30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e34:	4405      	add	r5, r0
 8006e36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e3a:	603d      	str	r5, [r7, #0]
 8006e3c:	6030      	str	r0, [r6, #0]
 8006e3e:	4620      	mov	r0, r4
 8006e40:	b002      	add	sp, #8
 8006e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e4a:	e7d6      	b.n	8006dfa <__d2b+0x2e>
 8006e4c:	6161      	str	r1, [r4, #20]
 8006e4e:	e7e7      	b.n	8006e20 <__d2b+0x54>
 8006e50:	a801      	add	r0, sp, #4
 8006e52:	f7ff fce3 	bl	800681c <__lo0bits>
 8006e56:	2101      	movs	r1, #1
 8006e58:	9b01      	ldr	r3, [sp, #4]
 8006e5a:	6121      	str	r1, [r4, #16]
 8006e5c:	6163      	str	r3, [r4, #20]
 8006e5e:	3020      	adds	r0, #32
 8006e60:	e7e5      	b.n	8006e2e <__d2b+0x62>
 8006e62:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006e66:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e6a:	6038      	str	r0, [r7, #0]
 8006e6c:	6918      	ldr	r0, [r3, #16]
 8006e6e:	f7ff fcb5 	bl	80067dc <__hi0bits>
 8006e72:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006e76:	6031      	str	r1, [r6, #0]
 8006e78:	e7e1      	b.n	8006e3e <__d2b+0x72>
 8006e7a:	bf00      	nop
 8006e7c:	080084d5 	.word	0x080084d5
 8006e80:	08008577 	.word	0x08008577

08006e84 <__ratio>:
 8006e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	4688      	mov	r8, r1
 8006e8a:	4669      	mov	r1, sp
 8006e8c:	4681      	mov	r9, r0
 8006e8e:	f7ff ff49 	bl	8006d24 <__b2d>
 8006e92:	460f      	mov	r7, r1
 8006e94:	4604      	mov	r4, r0
 8006e96:	460d      	mov	r5, r1
 8006e98:	4640      	mov	r0, r8
 8006e9a:	a901      	add	r1, sp, #4
 8006e9c:	f7ff ff42 	bl	8006d24 <__b2d>
 8006ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ea4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006ea8:	468b      	mov	fp, r1
 8006eaa:	eba3 0c02 	sub.w	ip, r3, r2
 8006eae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfd5      	itete	le
 8006ebc:	460a      	movle	r2, r1
 8006ebe:	462a      	movgt	r2, r5
 8006ec0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006ec4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006ec8:	bfd8      	it	le
 8006eca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006ece:	465b      	mov	r3, fp
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4639      	mov	r1, r7
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7f9 fc29 	bl	800072c <__aeabi_ddiv>
 8006eda:	b003      	add	sp, #12
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ee0 <__copybits>:
 8006ee0:	3901      	subs	r1, #1
 8006ee2:	b570      	push	{r4, r5, r6, lr}
 8006ee4:	1149      	asrs	r1, r1, #5
 8006ee6:	6914      	ldr	r4, [r2, #16]
 8006ee8:	3101      	adds	r1, #1
 8006eea:	f102 0314 	add.w	r3, r2, #20
 8006eee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ef2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ef6:	1f05      	subs	r5, r0, #4
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	d30c      	bcc.n	8006f16 <__copybits+0x36>
 8006efc:	1aa3      	subs	r3, r4, r2
 8006efe:	3b11      	subs	r3, #17
 8006f00:	f023 0303 	bic.w	r3, r3, #3
 8006f04:	3211      	adds	r2, #17
 8006f06:	42a2      	cmp	r2, r4
 8006f08:	bf88      	it	hi
 8006f0a:	2300      	movhi	r3, #0
 8006f0c:	4418      	add	r0, r3
 8006f0e:	2300      	movs	r3, #0
 8006f10:	4288      	cmp	r0, r1
 8006f12:	d305      	bcc.n	8006f20 <__copybits+0x40>
 8006f14:	bd70      	pop	{r4, r5, r6, pc}
 8006f16:	f853 6b04 	ldr.w	r6, [r3], #4
 8006f1a:	f845 6f04 	str.w	r6, [r5, #4]!
 8006f1e:	e7eb      	b.n	8006ef8 <__copybits+0x18>
 8006f20:	f840 3b04 	str.w	r3, [r0], #4
 8006f24:	e7f4      	b.n	8006f10 <__copybits+0x30>

08006f26 <__any_on>:
 8006f26:	f100 0214 	add.w	r2, r0, #20
 8006f2a:	6900      	ldr	r0, [r0, #16]
 8006f2c:	114b      	asrs	r3, r1, #5
 8006f2e:	4298      	cmp	r0, r3
 8006f30:	b510      	push	{r4, lr}
 8006f32:	db11      	blt.n	8006f58 <__any_on+0x32>
 8006f34:	dd0a      	ble.n	8006f4c <__any_on+0x26>
 8006f36:	f011 011f 	ands.w	r1, r1, #31
 8006f3a:	d007      	beq.n	8006f4c <__any_on+0x26>
 8006f3c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006f40:	fa24 f001 	lsr.w	r0, r4, r1
 8006f44:	fa00 f101 	lsl.w	r1, r0, r1
 8006f48:	428c      	cmp	r4, r1
 8006f4a:	d10b      	bne.n	8006f64 <__any_on+0x3e>
 8006f4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d803      	bhi.n	8006f5c <__any_on+0x36>
 8006f54:	2000      	movs	r0, #0
 8006f56:	bd10      	pop	{r4, pc}
 8006f58:	4603      	mov	r3, r0
 8006f5a:	e7f7      	b.n	8006f4c <__any_on+0x26>
 8006f5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f60:	2900      	cmp	r1, #0
 8006f62:	d0f5      	beq.n	8006f50 <__any_on+0x2a>
 8006f64:	2001      	movs	r0, #1
 8006f66:	e7f6      	b.n	8006f56 <__any_on+0x30>

08006f68 <_calloc_r>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	fba1 5402 	umull	r5, r4, r1, r2
 8006f6e:	b934      	cbnz	r4, 8006f7e <_calloc_r+0x16>
 8006f70:	4629      	mov	r1, r5
 8006f72:	f000 f875 	bl	8007060 <_malloc_r>
 8006f76:	4606      	mov	r6, r0
 8006f78:	b928      	cbnz	r0, 8006f86 <_calloc_r+0x1e>
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}
 8006f7e:	220c      	movs	r2, #12
 8006f80:	2600      	movs	r6, #0
 8006f82:	6002      	str	r2, [r0, #0]
 8006f84:	e7f9      	b.n	8006f7a <_calloc_r+0x12>
 8006f86:	462a      	mov	r2, r5
 8006f88:	4621      	mov	r1, r4
 8006f8a:	f7fd fe39 	bl	8004c00 <memset>
 8006f8e:	e7f4      	b.n	8006f7a <_calloc_r+0x12>

08006f90 <_free_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4605      	mov	r5, r0
 8006f94:	2900      	cmp	r1, #0
 8006f96:	d040      	beq.n	800701a <_free_r+0x8a>
 8006f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9c:	1f0c      	subs	r4, r1, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bfb8      	it	lt
 8006fa2:	18e4      	addlt	r4, r4, r3
 8006fa4:	f001 f870 	bl	8008088 <__malloc_lock>
 8006fa8:	4a1c      	ldr	r2, [pc, #112]	; (800701c <_free_r+0x8c>)
 8006faa:	6813      	ldr	r3, [r2, #0]
 8006fac:	b933      	cbnz	r3, 8006fbc <_free_r+0x2c>
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	6014      	str	r4, [r2, #0]
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fb8:	f001 b86c 	b.w	8008094 <__malloc_unlock>
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	d908      	bls.n	8006fd2 <_free_r+0x42>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	1821      	adds	r1, r4, r0
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	bf01      	itttt	eq
 8006fc8:	6819      	ldreq	r1, [r3, #0]
 8006fca:	685b      	ldreq	r3, [r3, #4]
 8006fcc:	1809      	addeq	r1, r1, r0
 8006fce:	6021      	streq	r1, [r4, #0]
 8006fd0:	e7ed      	b.n	8006fae <_free_r+0x1e>
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	b10b      	cbz	r3, 8006fdc <_free_r+0x4c>
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	d9fa      	bls.n	8006fd2 <_free_r+0x42>
 8006fdc:	6811      	ldr	r1, [r2, #0]
 8006fde:	1850      	adds	r0, r2, r1
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	d10b      	bne.n	8006ffc <_free_r+0x6c>
 8006fe4:	6820      	ldr	r0, [r4, #0]
 8006fe6:	4401      	add	r1, r0
 8006fe8:	1850      	adds	r0, r2, r1
 8006fea:	4283      	cmp	r3, r0
 8006fec:	6011      	str	r1, [r2, #0]
 8006fee:	d1e0      	bne.n	8006fb2 <_free_r+0x22>
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4401      	add	r1, r0
 8006ff6:	6011      	str	r1, [r2, #0]
 8006ff8:	6053      	str	r3, [r2, #4]
 8006ffa:	e7da      	b.n	8006fb2 <_free_r+0x22>
 8006ffc:	d902      	bls.n	8007004 <_free_r+0x74>
 8006ffe:	230c      	movs	r3, #12
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	e7d6      	b.n	8006fb2 <_free_r+0x22>
 8007004:	6820      	ldr	r0, [r4, #0]
 8007006:	1821      	adds	r1, r4, r0
 8007008:	428b      	cmp	r3, r1
 800700a:	bf01      	itttt	eq
 800700c:	6819      	ldreq	r1, [r3, #0]
 800700e:	685b      	ldreq	r3, [r3, #4]
 8007010:	1809      	addeq	r1, r1, r0
 8007012:	6021      	streq	r1, [r4, #0]
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	6054      	str	r4, [r2, #4]
 8007018:	e7cb      	b.n	8006fb2 <_free_r+0x22>
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20000aa0 	.word	0x20000aa0

08007020 <sbrk_aligned>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	4e0e      	ldr	r6, [pc, #56]	; (800705c <sbrk_aligned+0x3c>)
 8007024:	460c      	mov	r4, r1
 8007026:	6831      	ldr	r1, [r6, #0]
 8007028:	4605      	mov	r5, r0
 800702a:	b911      	cbnz	r1, 8007032 <sbrk_aligned+0x12>
 800702c:	f000 fcee 	bl	8007a0c <_sbrk_r>
 8007030:	6030      	str	r0, [r6, #0]
 8007032:	4621      	mov	r1, r4
 8007034:	4628      	mov	r0, r5
 8007036:	f000 fce9 	bl	8007a0c <_sbrk_r>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	d00a      	beq.n	8007054 <sbrk_aligned+0x34>
 800703e:	1cc4      	adds	r4, r0, #3
 8007040:	f024 0403 	bic.w	r4, r4, #3
 8007044:	42a0      	cmp	r0, r4
 8007046:	d007      	beq.n	8007058 <sbrk_aligned+0x38>
 8007048:	1a21      	subs	r1, r4, r0
 800704a:	4628      	mov	r0, r5
 800704c:	f000 fcde 	bl	8007a0c <_sbrk_r>
 8007050:	3001      	adds	r0, #1
 8007052:	d101      	bne.n	8007058 <sbrk_aligned+0x38>
 8007054:	f04f 34ff 	mov.w	r4, #4294967295
 8007058:	4620      	mov	r0, r4
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	20000aa4 	.word	0x20000aa4

08007060 <_malloc_r>:
 8007060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007064:	1ccd      	adds	r5, r1, #3
 8007066:	f025 0503 	bic.w	r5, r5, #3
 800706a:	3508      	adds	r5, #8
 800706c:	2d0c      	cmp	r5, #12
 800706e:	bf38      	it	cc
 8007070:	250c      	movcc	r5, #12
 8007072:	2d00      	cmp	r5, #0
 8007074:	4607      	mov	r7, r0
 8007076:	db01      	blt.n	800707c <_malloc_r+0x1c>
 8007078:	42a9      	cmp	r1, r5
 800707a:	d905      	bls.n	8007088 <_malloc_r+0x28>
 800707c:	230c      	movs	r3, #12
 800707e:	2600      	movs	r6, #0
 8007080:	603b      	str	r3, [r7, #0]
 8007082:	4630      	mov	r0, r6
 8007084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007088:	4e2e      	ldr	r6, [pc, #184]	; (8007144 <_malloc_r+0xe4>)
 800708a:	f000 fffd 	bl	8008088 <__malloc_lock>
 800708e:	6833      	ldr	r3, [r6, #0]
 8007090:	461c      	mov	r4, r3
 8007092:	bb34      	cbnz	r4, 80070e2 <_malloc_r+0x82>
 8007094:	4629      	mov	r1, r5
 8007096:	4638      	mov	r0, r7
 8007098:	f7ff ffc2 	bl	8007020 <sbrk_aligned>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	4604      	mov	r4, r0
 80070a0:	d14d      	bne.n	800713e <_malloc_r+0xde>
 80070a2:	6834      	ldr	r4, [r6, #0]
 80070a4:	4626      	mov	r6, r4
 80070a6:	2e00      	cmp	r6, #0
 80070a8:	d140      	bne.n	800712c <_malloc_r+0xcc>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	4631      	mov	r1, r6
 80070ae:	4638      	mov	r0, r7
 80070b0:	eb04 0803 	add.w	r8, r4, r3
 80070b4:	f000 fcaa 	bl	8007a0c <_sbrk_r>
 80070b8:	4580      	cmp	r8, r0
 80070ba:	d13a      	bne.n	8007132 <_malloc_r+0xd2>
 80070bc:	6821      	ldr	r1, [r4, #0]
 80070be:	3503      	adds	r5, #3
 80070c0:	1a6d      	subs	r5, r5, r1
 80070c2:	f025 0503 	bic.w	r5, r5, #3
 80070c6:	3508      	adds	r5, #8
 80070c8:	2d0c      	cmp	r5, #12
 80070ca:	bf38      	it	cc
 80070cc:	250c      	movcc	r5, #12
 80070ce:	4638      	mov	r0, r7
 80070d0:	4629      	mov	r1, r5
 80070d2:	f7ff ffa5 	bl	8007020 <sbrk_aligned>
 80070d6:	3001      	adds	r0, #1
 80070d8:	d02b      	beq.n	8007132 <_malloc_r+0xd2>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	442b      	add	r3, r5
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	e00e      	b.n	8007100 <_malloc_r+0xa0>
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	1b52      	subs	r2, r2, r5
 80070e6:	d41e      	bmi.n	8007126 <_malloc_r+0xc6>
 80070e8:	2a0b      	cmp	r2, #11
 80070ea:	d916      	bls.n	800711a <_malloc_r+0xba>
 80070ec:	1961      	adds	r1, r4, r5
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	6025      	str	r5, [r4, #0]
 80070f2:	bf18      	it	ne
 80070f4:	6059      	strne	r1, [r3, #4]
 80070f6:	6863      	ldr	r3, [r4, #4]
 80070f8:	bf08      	it	eq
 80070fa:	6031      	streq	r1, [r6, #0]
 80070fc:	5162      	str	r2, [r4, r5]
 80070fe:	604b      	str	r3, [r1, #4]
 8007100:	4638      	mov	r0, r7
 8007102:	f104 060b 	add.w	r6, r4, #11
 8007106:	f000 ffc5 	bl	8008094 <__malloc_unlock>
 800710a:	f026 0607 	bic.w	r6, r6, #7
 800710e:	1d23      	adds	r3, r4, #4
 8007110:	1af2      	subs	r2, r6, r3
 8007112:	d0b6      	beq.n	8007082 <_malloc_r+0x22>
 8007114:	1b9b      	subs	r3, r3, r6
 8007116:	50a3      	str	r3, [r4, r2]
 8007118:	e7b3      	b.n	8007082 <_malloc_r+0x22>
 800711a:	6862      	ldr	r2, [r4, #4]
 800711c:	42a3      	cmp	r3, r4
 800711e:	bf0c      	ite	eq
 8007120:	6032      	streq	r2, [r6, #0]
 8007122:	605a      	strne	r2, [r3, #4]
 8007124:	e7ec      	b.n	8007100 <_malloc_r+0xa0>
 8007126:	4623      	mov	r3, r4
 8007128:	6864      	ldr	r4, [r4, #4]
 800712a:	e7b2      	b.n	8007092 <_malloc_r+0x32>
 800712c:	4634      	mov	r4, r6
 800712e:	6876      	ldr	r6, [r6, #4]
 8007130:	e7b9      	b.n	80070a6 <_malloc_r+0x46>
 8007132:	230c      	movs	r3, #12
 8007134:	4638      	mov	r0, r7
 8007136:	603b      	str	r3, [r7, #0]
 8007138:	f000 ffac 	bl	8008094 <__malloc_unlock>
 800713c:	e7a1      	b.n	8007082 <_malloc_r+0x22>
 800713e:	6025      	str	r5, [r4, #0]
 8007140:	e7de      	b.n	8007100 <_malloc_r+0xa0>
 8007142:	bf00      	nop
 8007144:	20000aa0 	.word	0x20000aa0

08007148 <__ssputs_r>:
 8007148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	688e      	ldr	r6, [r1, #8]
 800714e:	4682      	mov	sl, r0
 8007150:	429e      	cmp	r6, r3
 8007152:	460c      	mov	r4, r1
 8007154:	4690      	mov	r8, r2
 8007156:	461f      	mov	r7, r3
 8007158:	d838      	bhi.n	80071cc <__ssputs_r+0x84>
 800715a:	898a      	ldrh	r2, [r1, #12]
 800715c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007160:	d032      	beq.n	80071c8 <__ssputs_r+0x80>
 8007162:	6825      	ldr	r5, [r4, #0]
 8007164:	6909      	ldr	r1, [r1, #16]
 8007166:	3301      	adds	r3, #1
 8007168:	eba5 0901 	sub.w	r9, r5, r1
 800716c:	6965      	ldr	r5, [r4, #20]
 800716e:	444b      	add	r3, r9
 8007170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007178:	106d      	asrs	r5, r5, #1
 800717a:	429d      	cmp	r5, r3
 800717c:	bf38      	it	cc
 800717e:	461d      	movcc	r5, r3
 8007180:	0553      	lsls	r3, r2, #21
 8007182:	d531      	bpl.n	80071e8 <__ssputs_r+0xa0>
 8007184:	4629      	mov	r1, r5
 8007186:	f7ff ff6b 	bl	8007060 <_malloc_r>
 800718a:	4606      	mov	r6, r0
 800718c:	b950      	cbnz	r0, 80071a4 <__ssputs_r+0x5c>
 800718e:	230c      	movs	r3, #12
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	f8ca 3000 	str.w	r3, [sl]
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800719e:	81a3      	strh	r3, [r4, #12]
 80071a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a4:	464a      	mov	r2, r9
 80071a6:	6921      	ldr	r1, [r4, #16]
 80071a8:	f7fd fd1c 	bl	8004be4 <memcpy>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b6:	81a3      	strh	r3, [r4, #12]
 80071b8:	6126      	str	r6, [r4, #16]
 80071ba:	444e      	add	r6, r9
 80071bc:	6026      	str	r6, [r4, #0]
 80071be:	463e      	mov	r6, r7
 80071c0:	6165      	str	r5, [r4, #20]
 80071c2:	eba5 0509 	sub.w	r5, r5, r9
 80071c6:	60a5      	str	r5, [r4, #8]
 80071c8:	42be      	cmp	r6, r7
 80071ca:	d900      	bls.n	80071ce <__ssputs_r+0x86>
 80071cc:	463e      	mov	r6, r7
 80071ce:	4632      	mov	r2, r6
 80071d0:	4641      	mov	r1, r8
 80071d2:	6820      	ldr	r0, [r4, #0]
 80071d4:	f000 ff3e 	bl	8008054 <memmove>
 80071d8:	68a3      	ldr	r3, [r4, #8]
 80071da:	2000      	movs	r0, #0
 80071dc:	1b9b      	subs	r3, r3, r6
 80071de:	60a3      	str	r3, [r4, #8]
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	4433      	add	r3, r6
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	e7db      	b.n	80071a0 <__ssputs_r+0x58>
 80071e8:	462a      	mov	r2, r5
 80071ea:	f000 ff59 	bl	80080a0 <_realloc_r>
 80071ee:	4606      	mov	r6, r0
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d1e1      	bne.n	80071b8 <__ssputs_r+0x70>
 80071f4:	4650      	mov	r0, sl
 80071f6:	6921      	ldr	r1, [r4, #16]
 80071f8:	f7ff feca 	bl	8006f90 <_free_r>
 80071fc:	e7c7      	b.n	800718e <__ssputs_r+0x46>
	...

08007200 <_svfiprintf_r>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	4698      	mov	r8, r3
 8007206:	898b      	ldrh	r3, [r1, #12]
 8007208:	4607      	mov	r7, r0
 800720a:	061b      	lsls	r3, r3, #24
 800720c:	460d      	mov	r5, r1
 800720e:	4614      	mov	r4, r2
 8007210:	b09d      	sub	sp, #116	; 0x74
 8007212:	d50e      	bpl.n	8007232 <_svfiprintf_r+0x32>
 8007214:	690b      	ldr	r3, [r1, #16]
 8007216:	b963      	cbnz	r3, 8007232 <_svfiprintf_r+0x32>
 8007218:	2140      	movs	r1, #64	; 0x40
 800721a:	f7ff ff21 	bl	8007060 <_malloc_r>
 800721e:	6028      	str	r0, [r5, #0]
 8007220:	6128      	str	r0, [r5, #16]
 8007222:	b920      	cbnz	r0, 800722e <_svfiprintf_r+0x2e>
 8007224:	230c      	movs	r3, #12
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	e0d1      	b.n	80073d2 <_svfiprintf_r+0x1d2>
 800722e:	2340      	movs	r3, #64	; 0x40
 8007230:	616b      	str	r3, [r5, #20]
 8007232:	2300      	movs	r3, #0
 8007234:	9309      	str	r3, [sp, #36]	; 0x24
 8007236:	2320      	movs	r3, #32
 8007238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800723c:	2330      	movs	r3, #48	; 0x30
 800723e:	f04f 0901 	mov.w	r9, #1
 8007242:	f8cd 800c 	str.w	r8, [sp, #12]
 8007246:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073ec <_svfiprintf_r+0x1ec>
 800724a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800724e:	4623      	mov	r3, r4
 8007250:	469a      	mov	sl, r3
 8007252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007256:	b10a      	cbz	r2, 800725c <_svfiprintf_r+0x5c>
 8007258:	2a25      	cmp	r2, #37	; 0x25
 800725a:	d1f9      	bne.n	8007250 <_svfiprintf_r+0x50>
 800725c:	ebba 0b04 	subs.w	fp, sl, r4
 8007260:	d00b      	beq.n	800727a <_svfiprintf_r+0x7a>
 8007262:	465b      	mov	r3, fp
 8007264:	4622      	mov	r2, r4
 8007266:	4629      	mov	r1, r5
 8007268:	4638      	mov	r0, r7
 800726a:	f7ff ff6d 	bl	8007148 <__ssputs_r>
 800726e:	3001      	adds	r0, #1
 8007270:	f000 80aa 	beq.w	80073c8 <_svfiprintf_r+0x1c8>
 8007274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007276:	445a      	add	r2, fp
 8007278:	9209      	str	r2, [sp, #36]	; 0x24
 800727a:	f89a 3000 	ldrb.w	r3, [sl]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 80a2 	beq.w	80073c8 <_svfiprintf_r+0x1c8>
 8007284:	2300      	movs	r3, #0
 8007286:	f04f 32ff 	mov.w	r2, #4294967295
 800728a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800728e:	f10a 0a01 	add.w	sl, sl, #1
 8007292:	9304      	str	r3, [sp, #16]
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800729a:	931a      	str	r3, [sp, #104]	; 0x68
 800729c:	4654      	mov	r4, sl
 800729e:	2205      	movs	r2, #5
 80072a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a4:	4851      	ldr	r0, [pc, #324]	; (80073ec <_svfiprintf_r+0x1ec>)
 80072a6:	f000 fec7 	bl	8008038 <memchr>
 80072aa:	9a04      	ldr	r2, [sp, #16]
 80072ac:	b9d8      	cbnz	r0, 80072e6 <_svfiprintf_r+0xe6>
 80072ae:	06d0      	lsls	r0, r2, #27
 80072b0:	bf44      	itt	mi
 80072b2:	2320      	movmi	r3, #32
 80072b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b8:	0711      	lsls	r1, r2, #28
 80072ba:	bf44      	itt	mi
 80072bc:	232b      	movmi	r3, #43	; 0x2b
 80072be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c2:	f89a 3000 	ldrb.w	r3, [sl]
 80072c6:	2b2a      	cmp	r3, #42	; 0x2a
 80072c8:	d015      	beq.n	80072f6 <_svfiprintf_r+0xf6>
 80072ca:	4654      	mov	r4, sl
 80072cc:	2000      	movs	r0, #0
 80072ce:	f04f 0c0a 	mov.w	ip, #10
 80072d2:	9a07      	ldr	r2, [sp, #28]
 80072d4:	4621      	mov	r1, r4
 80072d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072da:	3b30      	subs	r3, #48	; 0x30
 80072dc:	2b09      	cmp	r3, #9
 80072de:	d94e      	bls.n	800737e <_svfiprintf_r+0x17e>
 80072e0:	b1b0      	cbz	r0, 8007310 <_svfiprintf_r+0x110>
 80072e2:	9207      	str	r2, [sp, #28]
 80072e4:	e014      	b.n	8007310 <_svfiprintf_r+0x110>
 80072e6:	eba0 0308 	sub.w	r3, r0, r8
 80072ea:	fa09 f303 	lsl.w	r3, r9, r3
 80072ee:	4313      	orrs	r3, r2
 80072f0:	46a2      	mov	sl, r4
 80072f2:	9304      	str	r3, [sp, #16]
 80072f4:	e7d2      	b.n	800729c <_svfiprintf_r+0x9c>
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	1d19      	adds	r1, r3, #4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	9103      	str	r1, [sp, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfbb      	ittet	lt
 8007302:	425b      	neglt	r3, r3
 8007304:	f042 0202 	orrlt.w	r2, r2, #2
 8007308:	9307      	strge	r3, [sp, #28]
 800730a:	9307      	strlt	r3, [sp, #28]
 800730c:	bfb8      	it	lt
 800730e:	9204      	strlt	r2, [sp, #16]
 8007310:	7823      	ldrb	r3, [r4, #0]
 8007312:	2b2e      	cmp	r3, #46	; 0x2e
 8007314:	d10c      	bne.n	8007330 <_svfiprintf_r+0x130>
 8007316:	7863      	ldrb	r3, [r4, #1]
 8007318:	2b2a      	cmp	r3, #42	; 0x2a
 800731a:	d135      	bne.n	8007388 <_svfiprintf_r+0x188>
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	3402      	adds	r4, #2
 8007320:	1d1a      	adds	r2, r3, #4
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	9203      	str	r2, [sp, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	bfb8      	it	lt
 800732a:	f04f 33ff 	movlt.w	r3, #4294967295
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80073f0 <_svfiprintf_r+0x1f0>
 8007334:	2203      	movs	r2, #3
 8007336:	4650      	mov	r0, sl
 8007338:	7821      	ldrb	r1, [r4, #0]
 800733a:	f000 fe7d 	bl	8008038 <memchr>
 800733e:	b140      	cbz	r0, 8007352 <_svfiprintf_r+0x152>
 8007340:	2340      	movs	r3, #64	; 0x40
 8007342:	eba0 000a 	sub.w	r0, r0, sl
 8007346:	fa03 f000 	lsl.w	r0, r3, r0
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	3401      	adds	r4, #1
 800734e:	4303      	orrs	r3, r0
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007356:	2206      	movs	r2, #6
 8007358:	4826      	ldr	r0, [pc, #152]	; (80073f4 <_svfiprintf_r+0x1f4>)
 800735a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800735e:	f000 fe6b 	bl	8008038 <memchr>
 8007362:	2800      	cmp	r0, #0
 8007364:	d038      	beq.n	80073d8 <_svfiprintf_r+0x1d8>
 8007366:	4b24      	ldr	r3, [pc, #144]	; (80073f8 <_svfiprintf_r+0x1f8>)
 8007368:	bb1b      	cbnz	r3, 80073b2 <_svfiprintf_r+0x1b2>
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	3307      	adds	r3, #7
 800736e:	f023 0307 	bic.w	r3, r3, #7
 8007372:	3308      	adds	r3, #8
 8007374:	9303      	str	r3, [sp, #12]
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	4433      	add	r3, r6
 800737a:	9309      	str	r3, [sp, #36]	; 0x24
 800737c:	e767      	b.n	800724e <_svfiprintf_r+0x4e>
 800737e:	460c      	mov	r4, r1
 8007380:	2001      	movs	r0, #1
 8007382:	fb0c 3202 	mla	r2, ip, r2, r3
 8007386:	e7a5      	b.n	80072d4 <_svfiprintf_r+0xd4>
 8007388:	2300      	movs	r3, #0
 800738a:	f04f 0c0a 	mov.w	ip, #10
 800738e:	4619      	mov	r1, r3
 8007390:	3401      	adds	r4, #1
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	4620      	mov	r0, r4
 8007396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800739a:	3a30      	subs	r2, #48	; 0x30
 800739c:	2a09      	cmp	r2, #9
 800739e:	d903      	bls.n	80073a8 <_svfiprintf_r+0x1a8>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0c5      	beq.n	8007330 <_svfiprintf_r+0x130>
 80073a4:	9105      	str	r1, [sp, #20]
 80073a6:	e7c3      	b.n	8007330 <_svfiprintf_r+0x130>
 80073a8:	4604      	mov	r4, r0
 80073aa:	2301      	movs	r3, #1
 80073ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b0:	e7f0      	b.n	8007394 <_svfiprintf_r+0x194>
 80073b2:	ab03      	add	r3, sp, #12
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	462a      	mov	r2, r5
 80073b8:	4638      	mov	r0, r7
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <_svfiprintf_r+0x1fc>)
 80073bc:	a904      	add	r1, sp, #16
 80073be:	f3af 8000 	nop.w
 80073c2:	1c42      	adds	r2, r0, #1
 80073c4:	4606      	mov	r6, r0
 80073c6:	d1d6      	bne.n	8007376 <_svfiprintf_r+0x176>
 80073c8:	89ab      	ldrh	r3, [r5, #12]
 80073ca:	065b      	lsls	r3, r3, #25
 80073cc:	f53f af2c 	bmi.w	8007228 <_svfiprintf_r+0x28>
 80073d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073d2:	b01d      	add	sp, #116	; 0x74
 80073d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d8:	ab03      	add	r3, sp, #12
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	462a      	mov	r2, r5
 80073de:	4638      	mov	r0, r7
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <_svfiprintf_r+0x1fc>)
 80073e2:	a904      	add	r1, sp, #16
 80073e4:	f000 f9d4 	bl	8007790 <_printf_i>
 80073e8:	e7eb      	b.n	80073c2 <_svfiprintf_r+0x1c2>
 80073ea:	bf00      	nop
 80073ec:	080086d4 	.word	0x080086d4
 80073f0:	080086da 	.word	0x080086da
 80073f4:	080086de 	.word	0x080086de
 80073f8:	00000000 	.word	0x00000000
 80073fc:	08007149 	.word	0x08007149

08007400 <__sfputc_r>:
 8007400:	6893      	ldr	r3, [r2, #8]
 8007402:	b410      	push	{r4}
 8007404:	3b01      	subs	r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	6093      	str	r3, [r2, #8]
 800740a:	da07      	bge.n	800741c <__sfputc_r+0x1c>
 800740c:	6994      	ldr	r4, [r2, #24]
 800740e:	42a3      	cmp	r3, r4
 8007410:	db01      	blt.n	8007416 <__sfputc_r+0x16>
 8007412:	290a      	cmp	r1, #10
 8007414:	d102      	bne.n	800741c <__sfputc_r+0x1c>
 8007416:	bc10      	pop	{r4}
 8007418:	f000 bb1c 	b.w	8007a54 <__swbuf_r>
 800741c:	6813      	ldr	r3, [r2, #0]
 800741e:	1c58      	adds	r0, r3, #1
 8007420:	6010      	str	r0, [r2, #0]
 8007422:	7019      	strb	r1, [r3, #0]
 8007424:	4608      	mov	r0, r1
 8007426:	bc10      	pop	{r4}
 8007428:	4770      	bx	lr

0800742a <__sfputs_r>:
 800742a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742c:	4606      	mov	r6, r0
 800742e:	460f      	mov	r7, r1
 8007430:	4614      	mov	r4, r2
 8007432:	18d5      	adds	r5, r2, r3
 8007434:	42ac      	cmp	r4, r5
 8007436:	d101      	bne.n	800743c <__sfputs_r+0x12>
 8007438:	2000      	movs	r0, #0
 800743a:	e007      	b.n	800744c <__sfputs_r+0x22>
 800743c:	463a      	mov	r2, r7
 800743e:	4630      	mov	r0, r6
 8007440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007444:	f7ff ffdc 	bl	8007400 <__sfputc_r>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d1f3      	bne.n	8007434 <__sfputs_r+0xa>
 800744c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007450 <_vfiprintf_r>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	460d      	mov	r5, r1
 8007456:	4614      	mov	r4, r2
 8007458:	4698      	mov	r8, r3
 800745a:	4606      	mov	r6, r0
 800745c:	b09d      	sub	sp, #116	; 0x74
 800745e:	b118      	cbz	r0, 8007468 <_vfiprintf_r+0x18>
 8007460:	6983      	ldr	r3, [r0, #24]
 8007462:	b90b      	cbnz	r3, 8007468 <_vfiprintf_r+0x18>
 8007464:	f000 fce2 	bl	8007e2c <__sinit>
 8007468:	4b89      	ldr	r3, [pc, #548]	; (8007690 <_vfiprintf_r+0x240>)
 800746a:	429d      	cmp	r5, r3
 800746c:	d11b      	bne.n	80074a6 <_vfiprintf_r+0x56>
 800746e:	6875      	ldr	r5, [r6, #4]
 8007470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007472:	07d9      	lsls	r1, r3, #31
 8007474:	d405      	bmi.n	8007482 <_vfiprintf_r+0x32>
 8007476:	89ab      	ldrh	r3, [r5, #12]
 8007478:	059a      	lsls	r2, r3, #22
 800747a:	d402      	bmi.n	8007482 <_vfiprintf_r+0x32>
 800747c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800747e:	f000 fd73 	bl	8007f68 <__retarget_lock_acquire_recursive>
 8007482:	89ab      	ldrh	r3, [r5, #12]
 8007484:	071b      	lsls	r3, r3, #28
 8007486:	d501      	bpl.n	800748c <_vfiprintf_r+0x3c>
 8007488:	692b      	ldr	r3, [r5, #16]
 800748a:	b9eb      	cbnz	r3, 80074c8 <_vfiprintf_r+0x78>
 800748c:	4629      	mov	r1, r5
 800748e:	4630      	mov	r0, r6
 8007490:	f000 fb40 	bl	8007b14 <__swsetup_r>
 8007494:	b1c0      	cbz	r0, 80074c8 <_vfiprintf_r+0x78>
 8007496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007498:	07dc      	lsls	r4, r3, #31
 800749a:	d50e      	bpl.n	80074ba <_vfiprintf_r+0x6a>
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	b01d      	add	sp, #116	; 0x74
 80074a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a6:	4b7b      	ldr	r3, [pc, #492]	; (8007694 <_vfiprintf_r+0x244>)
 80074a8:	429d      	cmp	r5, r3
 80074aa:	d101      	bne.n	80074b0 <_vfiprintf_r+0x60>
 80074ac:	68b5      	ldr	r5, [r6, #8]
 80074ae:	e7df      	b.n	8007470 <_vfiprintf_r+0x20>
 80074b0:	4b79      	ldr	r3, [pc, #484]	; (8007698 <_vfiprintf_r+0x248>)
 80074b2:	429d      	cmp	r5, r3
 80074b4:	bf08      	it	eq
 80074b6:	68f5      	ldreq	r5, [r6, #12]
 80074b8:	e7da      	b.n	8007470 <_vfiprintf_r+0x20>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	0598      	lsls	r0, r3, #22
 80074be:	d4ed      	bmi.n	800749c <_vfiprintf_r+0x4c>
 80074c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074c2:	f000 fd52 	bl	8007f6a <__retarget_lock_release_recursive>
 80074c6:	e7e9      	b.n	800749c <_vfiprintf_r+0x4c>
 80074c8:	2300      	movs	r3, #0
 80074ca:	9309      	str	r3, [sp, #36]	; 0x24
 80074cc:	2320      	movs	r3, #32
 80074ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074d2:	2330      	movs	r3, #48	; 0x30
 80074d4:	f04f 0901 	mov.w	r9, #1
 80074d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80074dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800769c <_vfiprintf_r+0x24c>
 80074e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074e4:	4623      	mov	r3, r4
 80074e6:	469a      	mov	sl, r3
 80074e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ec:	b10a      	cbz	r2, 80074f2 <_vfiprintf_r+0xa2>
 80074ee:	2a25      	cmp	r2, #37	; 0x25
 80074f0:	d1f9      	bne.n	80074e6 <_vfiprintf_r+0x96>
 80074f2:	ebba 0b04 	subs.w	fp, sl, r4
 80074f6:	d00b      	beq.n	8007510 <_vfiprintf_r+0xc0>
 80074f8:	465b      	mov	r3, fp
 80074fa:	4622      	mov	r2, r4
 80074fc:	4629      	mov	r1, r5
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff ff93 	bl	800742a <__sfputs_r>
 8007504:	3001      	adds	r0, #1
 8007506:	f000 80aa 	beq.w	800765e <_vfiprintf_r+0x20e>
 800750a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800750c:	445a      	add	r2, fp
 800750e:	9209      	str	r2, [sp, #36]	; 0x24
 8007510:	f89a 3000 	ldrb.w	r3, [sl]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80a2 	beq.w	800765e <_vfiprintf_r+0x20e>
 800751a:	2300      	movs	r3, #0
 800751c:	f04f 32ff 	mov.w	r2, #4294967295
 8007520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007524:	f10a 0a01 	add.w	sl, sl, #1
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	9307      	str	r3, [sp, #28]
 800752c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007530:	931a      	str	r3, [sp, #104]	; 0x68
 8007532:	4654      	mov	r4, sl
 8007534:	2205      	movs	r2, #5
 8007536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753a:	4858      	ldr	r0, [pc, #352]	; (800769c <_vfiprintf_r+0x24c>)
 800753c:	f000 fd7c 	bl	8008038 <memchr>
 8007540:	9a04      	ldr	r2, [sp, #16]
 8007542:	b9d8      	cbnz	r0, 800757c <_vfiprintf_r+0x12c>
 8007544:	06d1      	lsls	r1, r2, #27
 8007546:	bf44      	itt	mi
 8007548:	2320      	movmi	r3, #32
 800754a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800754e:	0713      	lsls	r3, r2, #28
 8007550:	bf44      	itt	mi
 8007552:	232b      	movmi	r3, #43	; 0x2b
 8007554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007558:	f89a 3000 	ldrb.w	r3, [sl]
 800755c:	2b2a      	cmp	r3, #42	; 0x2a
 800755e:	d015      	beq.n	800758c <_vfiprintf_r+0x13c>
 8007560:	4654      	mov	r4, sl
 8007562:	2000      	movs	r0, #0
 8007564:	f04f 0c0a 	mov.w	ip, #10
 8007568:	9a07      	ldr	r2, [sp, #28]
 800756a:	4621      	mov	r1, r4
 800756c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007570:	3b30      	subs	r3, #48	; 0x30
 8007572:	2b09      	cmp	r3, #9
 8007574:	d94e      	bls.n	8007614 <_vfiprintf_r+0x1c4>
 8007576:	b1b0      	cbz	r0, 80075a6 <_vfiprintf_r+0x156>
 8007578:	9207      	str	r2, [sp, #28]
 800757a:	e014      	b.n	80075a6 <_vfiprintf_r+0x156>
 800757c:	eba0 0308 	sub.w	r3, r0, r8
 8007580:	fa09 f303 	lsl.w	r3, r9, r3
 8007584:	4313      	orrs	r3, r2
 8007586:	46a2      	mov	sl, r4
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	e7d2      	b.n	8007532 <_vfiprintf_r+0xe2>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	1d19      	adds	r1, r3, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	9103      	str	r1, [sp, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	bfbb      	ittet	lt
 8007598:	425b      	neglt	r3, r3
 800759a:	f042 0202 	orrlt.w	r2, r2, #2
 800759e:	9307      	strge	r3, [sp, #28]
 80075a0:	9307      	strlt	r3, [sp, #28]
 80075a2:	bfb8      	it	lt
 80075a4:	9204      	strlt	r2, [sp, #16]
 80075a6:	7823      	ldrb	r3, [r4, #0]
 80075a8:	2b2e      	cmp	r3, #46	; 0x2e
 80075aa:	d10c      	bne.n	80075c6 <_vfiprintf_r+0x176>
 80075ac:	7863      	ldrb	r3, [r4, #1]
 80075ae:	2b2a      	cmp	r3, #42	; 0x2a
 80075b0:	d135      	bne.n	800761e <_vfiprintf_r+0x1ce>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	3402      	adds	r4, #2
 80075b6:	1d1a      	adds	r2, r3, #4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	9203      	str	r2, [sp, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bfb8      	it	lt
 80075c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80075c4:	9305      	str	r3, [sp, #20]
 80075c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80076a0 <_vfiprintf_r+0x250>
 80075ca:	2203      	movs	r2, #3
 80075cc:	4650      	mov	r0, sl
 80075ce:	7821      	ldrb	r1, [r4, #0]
 80075d0:	f000 fd32 	bl	8008038 <memchr>
 80075d4:	b140      	cbz	r0, 80075e8 <_vfiprintf_r+0x198>
 80075d6:	2340      	movs	r3, #64	; 0x40
 80075d8:	eba0 000a 	sub.w	r0, r0, sl
 80075dc:	fa03 f000 	lsl.w	r0, r3, r0
 80075e0:	9b04      	ldr	r3, [sp, #16]
 80075e2:	3401      	adds	r4, #1
 80075e4:	4303      	orrs	r3, r0
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ec:	2206      	movs	r2, #6
 80075ee:	482d      	ldr	r0, [pc, #180]	; (80076a4 <_vfiprintf_r+0x254>)
 80075f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075f4:	f000 fd20 	bl	8008038 <memchr>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d03f      	beq.n	800767c <_vfiprintf_r+0x22c>
 80075fc:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <_vfiprintf_r+0x258>)
 80075fe:	bb1b      	cbnz	r3, 8007648 <_vfiprintf_r+0x1f8>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	3307      	adds	r3, #7
 8007604:	f023 0307 	bic.w	r3, r3, #7
 8007608:	3308      	adds	r3, #8
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760e:	443b      	add	r3, r7
 8007610:	9309      	str	r3, [sp, #36]	; 0x24
 8007612:	e767      	b.n	80074e4 <_vfiprintf_r+0x94>
 8007614:	460c      	mov	r4, r1
 8007616:	2001      	movs	r0, #1
 8007618:	fb0c 3202 	mla	r2, ip, r2, r3
 800761c:	e7a5      	b.n	800756a <_vfiprintf_r+0x11a>
 800761e:	2300      	movs	r3, #0
 8007620:	f04f 0c0a 	mov.w	ip, #10
 8007624:	4619      	mov	r1, r3
 8007626:	3401      	adds	r4, #1
 8007628:	9305      	str	r3, [sp, #20]
 800762a:	4620      	mov	r0, r4
 800762c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007630:	3a30      	subs	r2, #48	; 0x30
 8007632:	2a09      	cmp	r2, #9
 8007634:	d903      	bls.n	800763e <_vfiprintf_r+0x1ee>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0c5      	beq.n	80075c6 <_vfiprintf_r+0x176>
 800763a:	9105      	str	r1, [sp, #20]
 800763c:	e7c3      	b.n	80075c6 <_vfiprintf_r+0x176>
 800763e:	4604      	mov	r4, r0
 8007640:	2301      	movs	r3, #1
 8007642:	fb0c 2101 	mla	r1, ip, r1, r2
 8007646:	e7f0      	b.n	800762a <_vfiprintf_r+0x1da>
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	462a      	mov	r2, r5
 800764e:	4630      	mov	r0, r6
 8007650:	4b16      	ldr	r3, [pc, #88]	; (80076ac <_vfiprintf_r+0x25c>)
 8007652:	a904      	add	r1, sp, #16
 8007654:	f3af 8000 	nop.w
 8007658:	4607      	mov	r7, r0
 800765a:	1c78      	adds	r0, r7, #1
 800765c:	d1d6      	bne.n	800760c <_vfiprintf_r+0x1bc>
 800765e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007660:	07d9      	lsls	r1, r3, #31
 8007662:	d405      	bmi.n	8007670 <_vfiprintf_r+0x220>
 8007664:	89ab      	ldrh	r3, [r5, #12]
 8007666:	059a      	lsls	r2, r3, #22
 8007668:	d402      	bmi.n	8007670 <_vfiprintf_r+0x220>
 800766a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800766c:	f000 fc7d 	bl	8007f6a <__retarget_lock_release_recursive>
 8007670:	89ab      	ldrh	r3, [r5, #12]
 8007672:	065b      	lsls	r3, r3, #25
 8007674:	f53f af12 	bmi.w	800749c <_vfiprintf_r+0x4c>
 8007678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800767a:	e711      	b.n	80074a0 <_vfiprintf_r+0x50>
 800767c:	ab03      	add	r3, sp, #12
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	462a      	mov	r2, r5
 8007682:	4630      	mov	r0, r6
 8007684:	4b09      	ldr	r3, [pc, #36]	; (80076ac <_vfiprintf_r+0x25c>)
 8007686:	a904      	add	r1, sp, #16
 8007688:	f000 f882 	bl	8007790 <_printf_i>
 800768c:	e7e4      	b.n	8007658 <_vfiprintf_r+0x208>
 800768e:	bf00      	nop
 8007690:	08008728 	.word	0x08008728
 8007694:	08008748 	.word	0x08008748
 8007698:	08008708 	.word	0x08008708
 800769c:	080086d4 	.word	0x080086d4
 80076a0:	080086da 	.word	0x080086da
 80076a4:	080086de 	.word	0x080086de
 80076a8:	00000000 	.word	0x00000000
 80076ac:	0800742b 	.word	0x0800742b

080076b0 <_printf_common>:
 80076b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	4616      	mov	r6, r2
 80076b6:	4699      	mov	r9, r3
 80076b8:	688a      	ldr	r2, [r1, #8]
 80076ba:	690b      	ldr	r3, [r1, #16]
 80076bc:	4607      	mov	r7, r0
 80076be:	4293      	cmp	r3, r2
 80076c0:	bfb8      	it	lt
 80076c2:	4613      	movlt	r3, r2
 80076c4:	6033      	str	r3, [r6, #0]
 80076c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076ca:	460c      	mov	r4, r1
 80076cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076d0:	b10a      	cbz	r2, 80076d6 <_printf_common+0x26>
 80076d2:	3301      	adds	r3, #1
 80076d4:	6033      	str	r3, [r6, #0]
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	0699      	lsls	r1, r3, #26
 80076da:	bf42      	ittt	mi
 80076dc:	6833      	ldrmi	r3, [r6, #0]
 80076de:	3302      	addmi	r3, #2
 80076e0:	6033      	strmi	r3, [r6, #0]
 80076e2:	6825      	ldr	r5, [r4, #0]
 80076e4:	f015 0506 	ands.w	r5, r5, #6
 80076e8:	d106      	bne.n	80076f8 <_printf_common+0x48>
 80076ea:	f104 0a19 	add.w	sl, r4, #25
 80076ee:	68e3      	ldr	r3, [r4, #12]
 80076f0:	6832      	ldr	r2, [r6, #0]
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	42ab      	cmp	r3, r5
 80076f6:	dc28      	bgt.n	800774a <_printf_common+0x9a>
 80076f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076fc:	1e13      	subs	r3, r2, #0
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	bf18      	it	ne
 8007702:	2301      	movne	r3, #1
 8007704:	0692      	lsls	r2, r2, #26
 8007706:	d42d      	bmi.n	8007764 <_printf_common+0xb4>
 8007708:	4649      	mov	r1, r9
 800770a:	4638      	mov	r0, r7
 800770c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007710:	47c0      	blx	r8
 8007712:	3001      	adds	r0, #1
 8007714:	d020      	beq.n	8007758 <_printf_common+0xa8>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	68e5      	ldr	r5, [r4, #12]
 800771a:	f003 0306 	and.w	r3, r3, #6
 800771e:	2b04      	cmp	r3, #4
 8007720:	bf18      	it	ne
 8007722:	2500      	movne	r5, #0
 8007724:	6832      	ldr	r2, [r6, #0]
 8007726:	f04f 0600 	mov.w	r6, #0
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	bf08      	it	eq
 800772e:	1aad      	subeq	r5, r5, r2
 8007730:	6922      	ldr	r2, [r4, #16]
 8007732:	bf08      	it	eq
 8007734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007738:	4293      	cmp	r3, r2
 800773a:	bfc4      	itt	gt
 800773c:	1a9b      	subgt	r3, r3, r2
 800773e:	18ed      	addgt	r5, r5, r3
 8007740:	341a      	adds	r4, #26
 8007742:	42b5      	cmp	r5, r6
 8007744:	d11a      	bne.n	800777c <_printf_common+0xcc>
 8007746:	2000      	movs	r0, #0
 8007748:	e008      	b.n	800775c <_printf_common+0xac>
 800774a:	2301      	movs	r3, #1
 800774c:	4652      	mov	r2, sl
 800774e:	4649      	mov	r1, r9
 8007750:	4638      	mov	r0, r7
 8007752:	47c0      	blx	r8
 8007754:	3001      	adds	r0, #1
 8007756:	d103      	bne.n	8007760 <_printf_common+0xb0>
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	3501      	adds	r5, #1
 8007762:	e7c4      	b.n	80076ee <_printf_common+0x3e>
 8007764:	2030      	movs	r0, #48	; 0x30
 8007766:	18e1      	adds	r1, r4, r3
 8007768:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007772:	4422      	add	r2, r4
 8007774:	3302      	adds	r3, #2
 8007776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800777a:	e7c5      	b.n	8007708 <_printf_common+0x58>
 800777c:	2301      	movs	r3, #1
 800777e:	4622      	mov	r2, r4
 8007780:	4649      	mov	r1, r9
 8007782:	4638      	mov	r0, r7
 8007784:	47c0      	blx	r8
 8007786:	3001      	adds	r0, #1
 8007788:	d0e6      	beq.n	8007758 <_printf_common+0xa8>
 800778a:	3601      	adds	r6, #1
 800778c:	e7d9      	b.n	8007742 <_printf_common+0x92>
	...

08007790 <_printf_i>:
 8007790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	7e0f      	ldrb	r7, [r1, #24]
 8007796:	4691      	mov	r9, r2
 8007798:	2f78      	cmp	r7, #120	; 0x78
 800779a:	4680      	mov	r8, r0
 800779c:	460c      	mov	r4, r1
 800779e:	469a      	mov	sl, r3
 80077a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077a6:	d807      	bhi.n	80077b8 <_printf_i+0x28>
 80077a8:	2f62      	cmp	r7, #98	; 0x62
 80077aa:	d80a      	bhi.n	80077c2 <_printf_i+0x32>
 80077ac:	2f00      	cmp	r7, #0
 80077ae:	f000 80d9 	beq.w	8007964 <_printf_i+0x1d4>
 80077b2:	2f58      	cmp	r7, #88	; 0x58
 80077b4:	f000 80a4 	beq.w	8007900 <_printf_i+0x170>
 80077b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077c0:	e03a      	b.n	8007838 <_printf_i+0xa8>
 80077c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077c6:	2b15      	cmp	r3, #21
 80077c8:	d8f6      	bhi.n	80077b8 <_printf_i+0x28>
 80077ca:	a101      	add	r1, pc, #4	; (adr r1, 80077d0 <_printf_i+0x40>)
 80077cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077d0:	08007829 	.word	0x08007829
 80077d4:	0800783d 	.word	0x0800783d
 80077d8:	080077b9 	.word	0x080077b9
 80077dc:	080077b9 	.word	0x080077b9
 80077e0:	080077b9 	.word	0x080077b9
 80077e4:	080077b9 	.word	0x080077b9
 80077e8:	0800783d 	.word	0x0800783d
 80077ec:	080077b9 	.word	0x080077b9
 80077f0:	080077b9 	.word	0x080077b9
 80077f4:	080077b9 	.word	0x080077b9
 80077f8:	080077b9 	.word	0x080077b9
 80077fc:	0800794b 	.word	0x0800794b
 8007800:	0800786d 	.word	0x0800786d
 8007804:	0800792d 	.word	0x0800792d
 8007808:	080077b9 	.word	0x080077b9
 800780c:	080077b9 	.word	0x080077b9
 8007810:	0800796d 	.word	0x0800796d
 8007814:	080077b9 	.word	0x080077b9
 8007818:	0800786d 	.word	0x0800786d
 800781c:	080077b9 	.word	0x080077b9
 8007820:	080077b9 	.word	0x080077b9
 8007824:	08007935 	.word	0x08007935
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	1d1a      	adds	r2, r3, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	602a      	str	r2, [r5, #0]
 8007830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007838:	2301      	movs	r3, #1
 800783a:	e0a4      	b.n	8007986 <_printf_i+0x1f6>
 800783c:	6820      	ldr	r0, [r4, #0]
 800783e:	6829      	ldr	r1, [r5, #0]
 8007840:	0606      	lsls	r6, r0, #24
 8007842:	f101 0304 	add.w	r3, r1, #4
 8007846:	d50a      	bpl.n	800785e <_printf_i+0xce>
 8007848:	680e      	ldr	r6, [r1, #0]
 800784a:	602b      	str	r3, [r5, #0]
 800784c:	2e00      	cmp	r6, #0
 800784e:	da03      	bge.n	8007858 <_printf_i+0xc8>
 8007850:	232d      	movs	r3, #45	; 0x2d
 8007852:	4276      	negs	r6, r6
 8007854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007858:	230a      	movs	r3, #10
 800785a:	485e      	ldr	r0, [pc, #376]	; (80079d4 <_printf_i+0x244>)
 800785c:	e019      	b.n	8007892 <_printf_i+0x102>
 800785e:	680e      	ldr	r6, [r1, #0]
 8007860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007864:	602b      	str	r3, [r5, #0]
 8007866:	bf18      	it	ne
 8007868:	b236      	sxthne	r6, r6
 800786a:	e7ef      	b.n	800784c <_printf_i+0xbc>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	6820      	ldr	r0, [r4, #0]
 8007870:	1d19      	adds	r1, r3, #4
 8007872:	6029      	str	r1, [r5, #0]
 8007874:	0601      	lsls	r1, r0, #24
 8007876:	d501      	bpl.n	800787c <_printf_i+0xec>
 8007878:	681e      	ldr	r6, [r3, #0]
 800787a:	e002      	b.n	8007882 <_printf_i+0xf2>
 800787c:	0646      	lsls	r6, r0, #25
 800787e:	d5fb      	bpl.n	8007878 <_printf_i+0xe8>
 8007880:	881e      	ldrh	r6, [r3, #0]
 8007882:	2f6f      	cmp	r7, #111	; 0x6f
 8007884:	bf0c      	ite	eq
 8007886:	2308      	moveq	r3, #8
 8007888:	230a      	movne	r3, #10
 800788a:	4852      	ldr	r0, [pc, #328]	; (80079d4 <_printf_i+0x244>)
 800788c:	2100      	movs	r1, #0
 800788e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007892:	6865      	ldr	r5, [r4, #4]
 8007894:	2d00      	cmp	r5, #0
 8007896:	bfa8      	it	ge
 8007898:	6821      	ldrge	r1, [r4, #0]
 800789a:	60a5      	str	r5, [r4, #8]
 800789c:	bfa4      	itt	ge
 800789e:	f021 0104 	bicge.w	r1, r1, #4
 80078a2:	6021      	strge	r1, [r4, #0]
 80078a4:	b90e      	cbnz	r6, 80078aa <_printf_i+0x11a>
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	d04d      	beq.n	8007946 <_printf_i+0x1b6>
 80078aa:	4615      	mov	r5, r2
 80078ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80078b0:	fb03 6711 	mls	r7, r3, r1, r6
 80078b4:	5dc7      	ldrb	r7, [r0, r7]
 80078b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078ba:	4637      	mov	r7, r6
 80078bc:	42bb      	cmp	r3, r7
 80078be:	460e      	mov	r6, r1
 80078c0:	d9f4      	bls.n	80078ac <_printf_i+0x11c>
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d10b      	bne.n	80078de <_printf_i+0x14e>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	07de      	lsls	r6, r3, #31
 80078ca:	d508      	bpl.n	80078de <_printf_i+0x14e>
 80078cc:	6923      	ldr	r3, [r4, #16]
 80078ce:	6861      	ldr	r1, [r4, #4]
 80078d0:	4299      	cmp	r1, r3
 80078d2:	bfde      	ittt	le
 80078d4:	2330      	movle	r3, #48	; 0x30
 80078d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078de:	1b52      	subs	r2, r2, r5
 80078e0:	6122      	str	r2, [r4, #16]
 80078e2:	464b      	mov	r3, r9
 80078e4:	4621      	mov	r1, r4
 80078e6:	4640      	mov	r0, r8
 80078e8:	f8cd a000 	str.w	sl, [sp]
 80078ec:	aa03      	add	r2, sp, #12
 80078ee:	f7ff fedf 	bl	80076b0 <_printf_common>
 80078f2:	3001      	adds	r0, #1
 80078f4:	d14c      	bne.n	8007990 <_printf_i+0x200>
 80078f6:	f04f 30ff 	mov.w	r0, #4294967295
 80078fa:	b004      	add	sp, #16
 80078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007900:	4834      	ldr	r0, [pc, #208]	; (80079d4 <_printf_i+0x244>)
 8007902:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007906:	6829      	ldr	r1, [r5, #0]
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	f851 6b04 	ldr.w	r6, [r1], #4
 800790e:	6029      	str	r1, [r5, #0]
 8007910:	061d      	lsls	r5, r3, #24
 8007912:	d514      	bpl.n	800793e <_printf_i+0x1ae>
 8007914:	07df      	lsls	r7, r3, #31
 8007916:	bf44      	itt	mi
 8007918:	f043 0320 	orrmi.w	r3, r3, #32
 800791c:	6023      	strmi	r3, [r4, #0]
 800791e:	b91e      	cbnz	r6, 8007928 <_printf_i+0x198>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	f023 0320 	bic.w	r3, r3, #32
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	2310      	movs	r3, #16
 800792a:	e7af      	b.n	800788c <_printf_i+0xfc>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	f043 0320 	orr.w	r3, r3, #32
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	2378      	movs	r3, #120	; 0x78
 8007936:	4828      	ldr	r0, [pc, #160]	; (80079d8 <_printf_i+0x248>)
 8007938:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800793c:	e7e3      	b.n	8007906 <_printf_i+0x176>
 800793e:	0659      	lsls	r1, r3, #25
 8007940:	bf48      	it	mi
 8007942:	b2b6      	uxthmi	r6, r6
 8007944:	e7e6      	b.n	8007914 <_printf_i+0x184>
 8007946:	4615      	mov	r5, r2
 8007948:	e7bb      	b.n	80078c2 <_printf_i+0x132>
 800794a:	682b      	ldr	r3, [r5, #0]
 800794c:	6826      	ldr	r6, [r4, #0]
 800794e:	1d18      	adds	r0, r3, #4
 8007950:	6961      	ldr	r1, [r4, #20]
 8007952:	6028      	str	r0, [r5, #0]
 8007954:	0635      	lsls	r5, r6, #24
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	d501      	bpl.n	800795e <_printf_i+0x1ce>
 800795a:	6019      	str	r1, [r3, #0]
 800795c:	e002      	b.n	8007964 <_printf_i+0x1d4>
 800795e:	0670      	lsls	r0, r6, #25
 8007960:	d5fb      	bpl.n	800795a <_printf_i+0x1ca>
 8007962:	8019      	strh	r1, [r3, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	4615      	mov	r5, r2
 8007968:	6123      	str	r3, [r4, #16]
 800796a:	e7ba      	b.n	80078e2 <_printf_i+0x152>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	2100      	movs	r1, #0
 8007970:	1d1a      	adds	r2, r3, #4
 8007972:	602a      	str	r2, [r5, #0]
 8007974:	681d      	ldr	r5, [r3, #0]
 8007976:	6862      	ldr	r2, [r4, #4]
 8007978:	4628      	mov	r0, r5
 800797a:	f000 fb5d 	bl	8008038 <memchr>
 800797e:	b108      	cbz	r0, 8007984 <_printf_i+0x1f4>
 8007980:	1b40      	subs	r0, r0, r5
 8007982:	6060      	str	r0, [r4, #4]
 8007984:	6863      	ldr	r3, [r4, #4]
 8007986:	6123      	str	r3, [r4, #16]
 8007988:	2300      	movs	r3, #0
 800798a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798e:	e7a8      	b.n	80078e2 <_printf_i+0x152>
 8007990:	462a      	mov	r2, r5
 8007992:	4649      	mov	r1, r9
 8007994:	4640      	mov	r0, r8
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	47d0      	blx	sl
 800799a:	3001      	adds	r0, #1
 800799c:	d0ab      	beq.n	80078f6 <_printf_i+0x166>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	079b      	lsls	r3, r3, #30
 80079a2:	d413      	bmi.n	80079cc <_printf_i+0x23c>
 80079a4:	68e0      	ldr	r0, [r4, #12]
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	4298      	cmp	r0, r3
 80079aa:	bfb8      	it	lt
 80079ac:	4618      	movlt	r0, r3
 80079ae:	e7a4      	b.n	80078fa <_printf_i+0x16a>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4632      	mov	r2, r6
 80079b4:	4649      	mov	r1, r9
 80079b6:	4640      	mov	r0, r8
 80079b8:	47d0      	blx	sl
 80079ba:	3001      	adds	r0, #1
 80079bc:	d09b      	beq.n	80078f6 <_printf_i+0x166>
 80079be:	3501      	adds	r5, #1
 80079c0:	68e3      	ldr	r3, [r4, #12]
 80079c2:	9903      	ldr	r1, [sp, #12]
 80079c4:	1a5b      	subs	r3, r3, r1
 80079c6:	42ab      	cmp	r3, r5
 80079c8:	dcf2      	bgt.n	80079b0 <_printf_i+0x220>
 80079ca:	e7eb      	b.n	80079a4 <_printf_i+0x214>
 80079cc:	2500      	movs	r5, #0
 80079ce:	f104 0619 	add.w	r6, r4, #25
 80079d2:	e7f5      	b.n	80079c0 <_printf_i+0x230>
 80079d4:	080086e5 	.word	0x080086e5
 80079d8:	080086f6 	.word	0x080086f6

080079dc <_read_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	2200      	movs	r2, #0
 80079e6:	4d05      	ldr	r5, [pc, #20]	; (80079fc <_read_r+0x20>)
 80079e8:	602a      	str	r2, [r5, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f7f9 fec5 	bl	800177a <_read>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_read_r+0x1e>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_read_r+0x1e>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	20000aa8 	.word	0x20000aa8

08007a00 <nan>:
 8007a00:	2000      	movs	r0, #0
 8007a02:	4901      	ldr	r1, [pc, #4]	; (8007a08 <nan+0x8>)
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	7ff80000 	.word	0x7ff80000

08007a0c <_sbrk_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4d05      	ldr	r5, [pc, #20]	; (8007a28 <_sbrk_r+0x1c>)
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7f9 ff18 	bl	800184c <_sbrk>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_sbrk_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_sbrk_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	20000aa8 	.word	0x20000aa8

08007a2c <strncmp>:
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	b172      	cbz	r2, 8007a50 <strncmp+0x24>
 8007a32:	3901      	subs	r1, #1
 8007a34:	1884      	adds	r4, r0, r2
 8007a36:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a3e:	4290      	cmp	r0, r2
 8007a40:	d101      	bne.n	8007a46 <strncmp+0x1a>
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	d101      	bne.n	8007a4a <strncmp+0x1e>
 8007a46:	1a80      	subs	r0, r0, r2
 8007a48:	bd10      	pop	{r4, pc}
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d1f3      	bne.n	8007a36 <strncmp+0xa>
 8007a4e:	e7fa      	b.n	8007a46 <strncmp+0x1a>
 8007a50:	4610      	mov	r0, r2
 8007a52:	e7f9      	b.n	8007a48 <strncmp+0x1c>

08007a54 <__swbuf_r>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	460e      	mov	r6, r1
 8007a58:	4614      	mov	r4, r2
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	b118      	cbz	r0, 8007a66 <__swbuf_r+0x12>
 8007a5e:	6983      	ldr	r3, [r0, #24]
 8007a60:	b90b      	cbnz	r3, 8007a66 <__swbuf_r+0x12>
 8007a62:	f000 f9e3 	bl	8007e2c <__sinit>
 8007a66:	4b21      	ldr	r3, [pc, #132]	; (8007aec <__swbuf_r+0x98>)
 8007a68:	429c      	cmp	r4, r3
 8007a6a:	d12b      	bne.n	8007ac4 <__swbuf_r+0x70>
 8007a6c:	686c      	ldr	r4, [r5, #4]
 8007a6e:	69a3      	ldr	r3, [r4, #24]
 8007a70:	60a3      	str	r3, [r4, #8]
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	071a      	lsls	r2, r3, #28
 8007a76:	d52f      	bpl.n	8007ad8 <__swbuf_r+0x84>
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	b36b      	cbz	r3, 8007ad8 <__swbuf_r+0x84>
 8007a7c:	6923      	ldr	r3, [r4, #16]
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	b2f6      	uxtb	r6, r6
 8007a82:	1ac0      	subs	r0, r0, r3
 8007a84:	6963      	ldr	r3, [r4, #20]
 8007a86:	4637      	mov	r7, r6
 8007a88:	4283      	cmp	r3, r0
 8007a8a:	dc04      	bgt.n	8007a96 <__swbuf_r+0x42>
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 f938 	bl	8007d04 <_fflush_r>
 8007a94:	bb30      	cbnz	r0, 8007ae4 <__swbuf_r+0x90>
 8007a96:	68a3      	ldr	r3, [r4, #8]
 8007a98:	3001      	adds	r0, #1
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	6022      	str	r2, [r4, #0]
 8007aa4:	701e      	strb	r6, [r3, #0]
 8007aa6:	6963      	ldr	r3, [r4, #20]
 8007aa8:	4283      	cmp	r3, r0
 8007aaa:	d004      	beq.n	8007ab6 <__swbuf_r+0x62>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	07db      	lsls	r3, r3, #31
 8007ab0:	d506      	bpl.n	8007ac0 <__swbuf_r+0x6c>
 8007ab2:	2e0a      	cmp	r6, #10
 8007ab4:	d104      	bne.n	8007ac0 <__swbuf_r+0x6c>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 f923 	bl	8007d04 <_fflush_r>
 8007abe:	b988      	cbnz	r0, 8007ae4 <__swbuf_r+0x90>
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <__swbuf_r+0x9c>)
 8007ac6:	429c      	cmp	r4, r3
 8007ac8:	d101      	bne.n	8007ace <__swbuf_r+0x7a>
 8007aca:	68ac      	ldr	r4, [r5, #8]
 8007acc:	e7cf      	b.n	8007a6e <__swbuf_r+0x1a>
 8007ace:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <__swbuf_r+0xa0>)
 8007ad0:	429c      	cmp	r4, r3
 8007ad2:	bf08      	it	eq
 8007ad4:	68ec      	ldreq	r4, [r5, #12]
 8007ad6:	e7ca      	b.n	8007a6e <__swbuf_r+0x1a>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 f81a 	bl	8007b14 <__swsetup_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d0cb      	beq.n	8007a7c <__swbuf_r+0x28>
 8007ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae8:	e7ea      	b.n	8007ac0 <__swbuf_r+0x6c>
 8007aea:	bf00      	nop
 8007aec:	08008728 	.word	0x08008728
 8007af0:	08008748 	.word	0x08008748
 8007af4:	08008708 	.word	0x08008708

08007af8 <__ascii_wctomb>:
 8007af8:	4603      	mov	r3, r0
 8007afa:	4608      	mov	r0, r1
 8007afc:	b141      	cbz	r1, 8007b10 <__ascii_wctomb+0x18>
 8007afe:	2aff      	cmp	r2, #255	; 0xff
 8007b00:	d904      	bls.n	8007b0c <__ascii_wctomb+0x14>
 8007b02:	228a      	movs	r2, #138	; 0x8a
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	4770      	bx	lr
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	700a      	strb	r2, [r1, #0]
 8007b10:	4770      	bx	lr
	...

08007b14 <__swsetup_r>:
 8007b14:	4b32      	ldr	r3, [pc, #200]	; (8007be0 <__swsetup_r+0xcc>)
 8007b16:	b570      	push	{r4, r5, r6, lr}
 8007b18:	681d      	ldr	r5, [r3, #0]
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	b125      	cbz	r5, 8007b2a <__swsetup_r+0x16>
 8007b20:	69ab      	ldr	r3, [r5, #24]
 8007b22:	b913      	cbnz	r3, 8007b2a <__swsetup_r+0x16>
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 f981 	bl	8007e2c <__sinit>
 8007b2a:	4b2e      	ldr	r3, [pc, #184]	; (8007be4 <__swsetup_r+0xd0>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	d10f      	bne.n	8007b50 <__swsetup_r+0x3c>
 8007b30:	686c      	ldr	r4, [r5, #4]
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b38:	0719      	lsls	r1, r3, #28
 8007b3a:	d42c      	bmi.n	8007b96 <__swsetup_r+0x82>
 8007b3c:	06dd      	lsls	r5, r3, #27
 8007b3e:	d411      	bmi.n	8007b64 <__swsetup_r+0x50>
 8007b40:	2309      	movs	r3, #9
 8007b42:	6033      	str	r3, [r6, #0]
 8007b44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	e03e      	b.n	8007bce <__swsetup_r+0xba>
 8007b50:	4b25      	ldr	r3, [pc, #148]	; (8007be8 <__swsetup_r+0xd4>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	d101      	bne.n	8007b5a <__swsetup_r+0x46>
 8007b56:	68ac      	ldr	r4, [r5, #8]
 8007b58:	e7eb      	b.n	8007b32 <__swsetup_r+0x1e>
 8007b5a:	4b24      	ldr	r3, [pc, #144]	; (8007bec <__swsetup_r+0xd8>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	bf08      	it	eq
 8007b60:	68ec      	ldreq	r4, [r5, #12]
 8007b62:	e7e6      	b.n	8007b32 <__swsetup_r+0x1e>
 8007b64:	0758      	lsls	r0, r3, #29
 8007b66:	d512      	bpl.n	8007b8e <__swsetup_r+0x7a>
 8007b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b6a:	b141      	cbz	r1, 8007b7e <__swsetup_r+0x6a>
 8007b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b70:	4299      	cmp	r1, r3
 8007b72:	d002      	beq.n	8007b7a <__swsetup_r+0x66>
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7ff fa0b 	bl	8006f90 <_free_r>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	2300      	movs	r3, #0
 8007b88:	6063      	str	r3, [r4, #4]
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f043 0308 	orr.w	r3, r3, #8
 8007b94:	81a3      	strh	r3, [r4, #12]
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	b94b      	cbnz	r3, 8007bae <__swsetup_r+0x9a>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba4:	d003      	beq.n	8007bae <__swsetup_r+0x9a>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 fa05 	bl	8007fb8 <__smakebuf_r>
 8007bae:	89a0      	ldrh	r0, [r4, #12]
 8007bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bb4:	f010 0301 	ands.w	r3, r0, #1
 8007bb8:	d00a      	beq.n	8007bd0 <__swsetup_r+0xbc>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	6963      	ldr	r3, [r4, #20]
 8007bc0:	425b      	negs	r3, r3
 8007bc2:	61a3      	str	r3, [r4, #24]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	b943      	cbnz	r3, 8007bda <__swsetup_r+0xc6>
 8007bc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bcc:	d1ba      	bne.n	8007b44 <__swsetup_r+0x30>
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	0781      	lsls	r1, r0, #30
 8007bd2:	bf58      	it	pl
 8007bd4:	6963      	ldrpl	r3, [r4, #20]
 8007bd6:	60a3      	str	r3, [r4, #8]
 8007bd8:	e7f4      	b.n	8007bc4 <__swsetup_r+0xb0>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e7f7      	b.n	8007bce <__swsetup_r+0xba>
 8007bde:	bf00      	nop
 8007be0:	20000034 	.word	0x20000034
 8007be4:	08008728 	.word	0x08008728
 8007be8:	08008748 	.word	0x08008748
 8007bec:	08008708 	.word	0x08008708

08007bf0 <abort>:
 8007bf0:	2006      	movs	r0, #6
 8007bf2:	b508      	push	{r3, lr}
 8007bf4:	f000 faac 	bl	8008150 <raise>
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	f7f9 fdb4 	bl	8001766 <_exit>
	...

08007c00 <__sflush_r>:
 8007c00:	898a      	ldrh	r2, [r1, #12]
 8007c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c04:	4605      	mov	r5, r0
 8007c06:	0710      	lsls	r0, r2, #28
 8007c08:	460c      	mov	r4, r1
 8007c0a:	d457      	bmi.n	8007cbc <__sflush_r+0xbc>
 8007c0c:	684b      	ldr	r3, [r1, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dc04      	bgt.n	8007c1c <__sflush_r+0x1c>
 8007c12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dc01      	bgt.n	8007c1c <__sflush_r+0x1c>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	d0fa      	beq.n	8007c18 <__sflush_r+0x18>
 8007c22:	2300      	movs	r3, #0
 8007c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c28:	682f      	ldr	r7, [r5, #0]
 8007c2a:	602b      	str	r3, [r5, #0]
 8007c2c:	d032      	beq.n	8007c94 <__sflush_r+0x94>
 8007c2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	075a      	lsls	r2, r3, #29
 8007c34:	d505      	bpl.n	8007c42 <__sflush_r+0x42>
 8007c36:	6863      	ldr	r3, [r4, #4]
 8007c38:	1ac0      	subs	r0, r0, r3
 8007c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c3c:	b10b      	cbz	r3, 8007c42 <__sflush_r+0x42>
 8007c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c40:	1ac0      	subs	r0, r0, r3
 8007c42:	2300      	movs	r3, #0
 8007c44:	4602      	mov	r2, r0
 8007c46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c48:	4628      	mov	r0, r5
 8007c4a:	6a21      	ldr	r1, [r4, #32]
 8007c4c:	47b0      	blx	r6
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	d106      	bne.n	8007c62 <__sflush_r+0x62>
 8007c54:	6829      	ldr	r1, [r5, #0]
 8007c56:	291d      	cmp	r1, #29
 8007c58:	d82c      	bhi.n	8007cb4 <__sflush_r+0xb4>
 8007c5a:	4a29      	ldr	r2, [pc, #164]	; (8007d00 <__sflush_r+0x100>)
 8007c5c:	40ca      	lsrs	r2, r1
 8007c5e:	07d6      	lsls	r6, r2, #31
 8007c60:	d528      	bpl.n	8007cb4 <__sflush_r+0xb4>
 8007c62:	2200      	movs	r2, #0
 8007c64:	6062      	str	r2, [r4, #4]
 8007c66:	6922      	ldr	r2, [r4, #16]
 8007c68:	04d9      	lsls	r1, r3, #19
 8007c6a:	6022      	str	r2, [r4, #0]
 8007c6c:	d504      	bpl.n	8007c78 <__sflush_r+0x78>
 8007c6e:	1c42      	adds	r2, r0, #1
 8007c70:	d101      	bne.n	8007c76 <__sflush_r+0x76>
 8007c72:	682b      	ldr	r3, [r5, #0]
 8007c74:	b903      	cbnz	r3, 8007c78 <__sflush_r+0x78>
 8007c76:	6560      	str	r0, [r4, #84]	; 0x54
 8007c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c7a:	602f      	str	r7, [r5, #0]
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d0cb      	beq.n	8007c18 <__sflush_r+0x18>
 8007c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c84:	4299      	cmp	r1, r3
 8007c86:	d002      	beq.n	8007c8e <__sflush_r+0x8e>
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f7ff f981 	bl	8006f90 <_free_r>
 8007c8e:	2000      	movs	r0, #0
 8007c90:	6360      	str	r0, [r4, #52]	; 0x34
 8007c92:	e7c2      	b.n	8007c1a <__sflush_r+0x1a>
 8007c94:	6a21      	ldr	r1, [r4, #32]
 8007c96:	2301      	movs	r3, #1
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b0      	blx	r6
 8007c9c:	1c41      	adds	r1, r0, #1
 8007c9e:	d1c7      	bne.n	8007c30 <__sflush_r+0x30>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0c4      	beq.n	8007c30 <__sflush_r+0x30>
 8007ca6:	2b1d      	cmp	r3, #29
 8007ca8:	d001      	beq.n	8007cae <__sflush_r+0xae>
 8007caa:	2b16      	cmp	r3, #22
 8007cac:	d101      	bne.n	8007cb2 <__sflush_r+0xb2>
 8007cae:	602f      	str	r7, [r5, #0]
 8007cb0:	e7b2      	b.n	8007c18 <__sflush_r+0x18>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb8:	81a3      	strh	r3, [r4, #12]
 8007cba:	e7ae      	b.n	8007c1a <__sflush_r+0x1a>
 8007cbc:	690f      	ldr	r7, [r1, #16]
 8007cbe:	2f00      	cmp	r7, #0
 8007cc0:	d0aa      	beq.n	8007c18 <__sflush_r+0x18>
 8007cc2:	0793      	lsls	r3, r2, #30
 8007cc4:	bf18      	it	ne
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	680e      	ldr	r6, [r1, #0]
 8007cca:	bf08      	it	eq
 8007ccc:	694b      	ldreq	r3, [r1, #20]
 8007cce:	1bf6      	subs	r6, r6, r7
 8007cd0:	600f      	str	r7, [r1, #0]
 8007cd2:	608b      	str	r3, [r1, #8]
 8007cd4:	2e00      	cmp	r6, #0
 8007cd6:	dd9f      	ble.n	8007c18 <__sflush_r+0x18>
 8007cd8:	4633      	mov	r3, r6
 8007cda:	463a      	mov	r2, r7
 8007cdc:	4628      	mov	r0, r5
 8007cde:	6a21      	ldr	r1, [r4, #32]
 8007ce0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ce4:	47e0      	blx	ip
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	dc06      	bgt.n	8007cf8 <__sflush_r+0xf8>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	e790      	b.n	8007c1a <__sflush_r+0x1a>
 8007cf8:	4407      	add	r7, r0
 8007cfa:	1a36      	subs	r6, r6, r0
 8007cfc:	e7ea      	b.n	8007cd4 <__sflush_r+0xd4>
 8007cfe:	bf00      	nop
 8007d00:	20400001 	.word	0x20400001

08007d04 <_fflush_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	690b      	ldr	r3, [r1, #16]
 8007d08:	4605      	mov	r5, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b913      	cbnz	r3, 8007d14 <_fflush_r+0x10>
 8007d0e:	2500      	movs	r5, #0
 8007d10:	4628      	mov	r0, r5
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	b118      	cbz	r0, 8007d1e <_fflush_r+0x1a>
 8007d16:	6983      	ldr	r3, [r0, #24]
 8007d18:	b90b      	cbnz	r3, 8007d1e <_fflush_r+0x1a>
 8007d1a:	f000 f887 	bl	8007e2c <__sinit>
 8007d1e:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <_fflush_r+0x6c>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	d11b      	bne.n	8007d5c <_fflush_r+0x58>
 8007d24:	686c      	ldr	r4, [r5, #4]
 8007d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0ef      	beq.n	8007d0e <_fflush_r+0xa>
 8007d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d30:	07d0      	lsls	r0, r2, #31
 8007d32:	d404      	bmi.n	8007d3e <_fflush_r+0x3a>
 8007d34:	0599      	lsls	r1, r3, #22
 8007d36:	d402      	bmi.n	8007d3e <_fflush_r+0x3a>
 8007d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3a:	f000 f915 	bl	8007f68 <__retarget_lock_acquire_recursive>
 8007d3e:	4628      	mov	r0, r5
 8007d40:	4621      	mov	r1, r4
 8007d42:	f7ff ff5d 	bl	8007c00 <__sflush_r>
 8007d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d48:	4605      	mov	r5, r0
 8007d4a:	07da      	lsls	r2, r3, #31
 8007d4c:	d4e0      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	059b      	lsls	r3, r3, #22
 8007d52:	d4dd      	bmi.n	8007d10 <_fflush_r+0xc>
 8007d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d56:	f000 f908 	bl	8007f6a <__retarget_lock_release_recursive>
 8007d5a:	e7d9      	b.n	8007d10 <_fflush_r+0xc>
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <_fflush_r+0x70>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	d101      	bne.n	8007d66 <_fflush_r+0x62>
 8007d62:	68ac      	ldr	r4, [r5, #8]
 8007d64:	e7df      	b.n	8007d26 <_fflush_r+0x22>
 8007d66:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <_fflush_r+0x74>)
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	bf08      	it	eq
 8007d6c:	68ec      	ldreq	r4, [r5, #12]
 8007d6e:	e7da      	b.n	8007d26 <_fflush_r+0x22>
 8007d70:	08008728 	.word	0x08008728
 8007d74:	08008748 	.word	0x08008748
 8007d78:	08008708 	.word	0x08008708

08007d7c <std>:
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	4604      	mov	r4, r0
 8007d82:	e9c0 3300 	strd	r3, r3, [r0]
 8007d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d8a:	6083      	str	r3, [r0, #8]
 8007d8c:	8181      	strh	r1, [r0, #12]
 8007d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d90:	81c2      	strh	r2, [r0, #14]
 8007d92:	6183      	str	r3, [r0, #24]
 8007d94:	4619      	mov	r1, r3
 8007d96:	2208      	movs	r2, #8
 8007d98:	305c      	adds	r0, #92	; 0x5c
 8007d9a:	f7fc ff31 	bl	8004c00 <memset>
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <std+0x38>)
 8007da0:	6224      	str	r4, [r4, #32]
 8007da2:	6263      	str	r3, [r4, #36]	; 0x24
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <std+0x3c>)
 8007da6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <std+0x40>)
 8007daa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <std+0x44>)
 8007dae:	6323      	str	r3, [r4, #48]	; 0x30
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	bf00      	nop
 8007db4:	08005075 	.word	0x08005075
 8007db8:	08005097 	.word	0x08005097
 8007dbc:	080050cf 	.word	0x080050cf
 8007dc0:	080050f3 	.word	0x080050f3

08007dc4 <_cleanup_r>:
 8007dc4:	4901      	ldr	r1, [pc, #4]	; (8007dcc <_cleanup_r+0x8>)
 8007dc6:	f000 b8af 	b.w	8007f28 <_fwalk_reent>
 8007dca:	bf00      	nop
 8007dcc:	08007d05 	.word	0x08007d05

08007dd0 <__sfmoreglue>:
 8007dd0:	2268      	movs	r2, #104	; 0x68
 8007dd2:	b570      	push	{r4, r5, r6, lr}
 8007dd4:	1e4d      	subs	r5, r1, #1
 8007dd6:	4355      	muls	r5, r2
 8007dd8:	460e      	mov	r6, r1
 8007dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dde:	f7ff f93f 	bl	8007060 <_malloc_r>
 8007de2:	4604      	mov	r4, r0
 8007de4:	b140      	cbz	r0, 8007df8 <__sfmoreglue+0x28>
 8007de6:	2100      	movs	r1, #0
 8007de8:	e9c0 1600 	strd	r1, r6, [r0]
 8007dec:	300c      	adds	r0, #12
 8007dee:	60a0      	str	r0, [r4, #8]
 8007df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007df4:	f7fc ff04 	bl	8004c00 <memset>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}

08007dfc <__sfp_lock_acquire>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__sfp_lock_acquire+0x8>)
 8007dfe:	f000 b8b3 	b.w	8007f68 <__retarget_lock_acquire_recursive>
 8007e02:	bf00      	nop
 8007e04:	20000aad 	.word	0x20000aad

08007e08 <__sfp_lock_release>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__sfp_lock_release+0x8>)
 8007e0a:	f000 b8ae 	b.w	8007f6a <__retarget_lock_release_recursive>
 8007e0e:	bf00      	nop
 8007e10:	20000aad 	.word	0x20000aad

08007e14 <__sinit_lock_acquire>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__sinit_lock_acquire+0x8>)
 8007e16:	f000 b8a7 	b.w	8007f68 <__retarget_lock_acquire_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	20000aae 	.word	0x20000aae

08007e20 <__sinit_lock_release>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__sinit_lock_release+0x8>)
 8007e22:	f000 b8a2 	b.w	8007f6a <__retarget_lock_release_recursive>
 8007e26:	bf00      	nop
 8007e28:	20000aae 	.word	0x20000aae

08007e2c <__sinit>:
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	4604      	mov	r4, r0
 8007e30:	f7ff fff0 	bl	8007e14 <__sinit_lock_acquire>
 8007e34:	69a3      	ldr	r3, [r4, #24]
 8007e36:	b11b      	cbz	r3, 8007e40 <__sinit+0x14>
 8007e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3c:	f7ff bff0 	b.w	8007e20 <__sinit_lock_release>
 8007e40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e44:	6523      	str	r3, [r4, #80]	; 0x50
 8007e46:	4b13      	ldr	r3, [pc, #76]	; (8007e94 <__sinit+0x68>)
 8007e48:	4a13      	ldr	r2, [pc, #76]	; (8007e98 <__sinit+0x6c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	bf08      	it	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	4620      	mov	r0, r4
 8007e56:	bf08      	it	eq
 8007e58:	61a3      	streq	r3, [r4, #24]
 8007e5a:	f000 f81f 	bl	8007e9c <__sfp>
 8007e5e:	6060      	str	r0, [r4, #4]
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 f81b 	bl	8007e9c <__sfp>
 8007e66:	60a0      	str	r0, [r4, #8]
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 f817 	bl	8007e9c <__sfp>
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2104      	movs	r1, #4
 8007e72:	60e0      	str	r0, [r4, #12]
 8007e74:	6860      	ldr	r0, [r4, #4]
 8007e76:	f7ff ff81 	bl	8007d7c <std>
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	2109      	movs	r1, #9
 8007e7e:	68a0      	ldr	r0, [r4, #8]
 8007e80:	f7ff ff7c 	bl	8007d7c <std>
 8007e84:	2202      	movs	r2, #2
 8007e86:	2112      	movs	r1, #18
 8007e88:	68e0      	ldr	r0, [r4, #12]
 8007e8a:	f7ff ff77 	bl	8007d7c <std>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	61a3      	str	r3, [r4, #24]
 8007e92:	e7d1      	b.n	8007e38 <__sinit+0xc>
 8007e94:	0800832c 	.word	0x0800832c
 8007e98:	08007dc5 	.word	0x08007dc5

08007e9c <__sfp>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	f7ff ffac 	bl	8007dfc <__sfp_lock_acquire>
 8007ea4:	4b1e      	ldr	r3, [pc, #120]	; (8007f20 <__sfp+0x84>)
 8007ea6:	681e      	ldr	r6, [r3, #0]
 8007ea8:	69b3      	ldr	r3, [r6, #24]
 8007eaa:	b913      	cbnz	r3, 8007eb2 <__sfp+0x16>
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff ffbd 	bl	8007e2c <__sinit>
 8007eb2:	3648      	adds	r6, #72	; 0x48
 8007eb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	d503      	bpl.n	8007ec4 <__sfp+0x28>
 8007ebc:	6833      	ldr	r3, [r6, #0]
 8007ebe:	b30b      	cbz	r3, 8007f04 <__sfp+0x68>
 8007ec0:	6836      	ldr	r6, [r6, #0]
 8007ec2:	e7f7      	b.n	8007eb4 <__sfp+0x18>
 8007ec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ec8:	b9d5      	cbnz	r5, 8007f00 <__sfp+0x64>
 8007eca:	4b16      	ldr	r3, [pc, #88]	; (8007f24 <__sfp+0x88>)
 8007ecc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ed0:	60e3      	str	r3, [r4, #12]
 8007ed2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ed4:	f000 f847 	bl	8007f66 <__retarget_lock_init_recursive>
 8007ed8:	f7ff ff96 	bl	8007e08 <__sfp_lock_release>
 8007edc:	2208      	movs	r2, #8
 8007ede:	4629      	mov	r1, r5
 8007ee0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ee4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ee8:	6025      	str	r5, [r4, #0]
 8007eea:	61a5      	str	r5, [r4, #24]
 8007eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ef0:	f7fc fe86 	bl	8004c00 <memset>
 8007ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007efc:	4620      	mov	r0, r4
 8007efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f00:	3468      	adds	r4, #104	; 0x68
 8007f02:	e7d9      	b.n	8007eb8 <__sfp+0x1c>
 8007f04:	2104      	movs	r1, #4
 8007f06:	4638      	mov	r0, r7
 8007f08:	f7ff ff62 	bl	8007dd0 <__sfmoreglue>
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	6030      	str	r0, [r6, #0]
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1d5      	bne.n	8007ec0 <__sfp+0x24>
 8007f14:	f7ff ff78 	bl	8007e08 <__sfp_lock_release>
 8007f18:	230c      	movs	r3, #12
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	e7ee      	b.n	8007efc <__sfp+0x60>
 8007f1e:	bf00      	nop
 8007f20:	0800832c 	.word	0x0800832c
 8007f24:	ffff0001 	.word	0xffff0001

08007f28 <_fwalk_reent>:
 8007f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	4688      	mov	r8, r1
 8007f30:	2700      	movs	r7, #0
 8007f32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f3e:	d505      	bpl.n	8007f4c <_fwalk_reent+0x24>
 8007f40:	6824      	ldr	r4, [r4, #0]
 8007f42:	2c00      	cmp	r4, #0
 8007f44:	d1f7      	bne.n	8007f36 <_fwalk_reent+0xe>
 8007f46:	4638      	mov	r0, r7
 8007f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4c:	89ab      	ldrh	r3, [r5, #12]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d907      	bls.n	8007f62 <_fwalk_reent+0x3a>
 8007f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f56:	3301      	adds	r3, #1
 8007f58:	d003      	beq.n	8007f62 <_fwalk_reent+0x3a>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	47c0      	blx	r8
 8007f60:	4307      	orrs	r7, r0
 8007f62:	3568      	adds	r5, #104	; 0x68
 8007f64:	e7e9      	b.n	8007f3a <_fwalk_reent+0x12>

08007f66 <__retarget_lock_init_recursive>:
 8007f66:	4770      	bx	lr

08007f68 <__retarget_lock_acquire_recursive>:
 8007f68:	4770      	bx	lr

08007f6a <__retarget_lock_release_recursive>:
 8007f6a:	4770      	bx	lr

08007f6c <__swhatbuf_r>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	460e      	mov	r6, r1
 8007f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f74:	4614      	mov	r4, r2
 8007f76:	2900      	cmp	r1, #0
 8007f78:	461d      	mov	r5, r3
 8007f7a:	b096      	sub	sp, #88	; 0x58
 8007f7c:	da08      	bge.n	8007f90 <__swhatbuf_r+0x24>
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	061a      	lsls	r2, r3, #24
 8007f88:	d410      	bmi.n	8007fac <__swhatbuf_r+0x40>
 8007f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f8e:	e00e      	b.n	8007fae <__swhatbuf_r+0x42>
 8007f90:	466a      	mov	r2, sp
 8007f92:	f000 f8f9 	bl	8008188 <_fstat_r>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	dbf1      	blt.n	8007f7e <__swhatbuf_r+0x12>
 8007f9a:	9a01      	ldr	r2, [sp, #4]
 8007f9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fa4:	425a      	negs	r2, r3
 8007fa6:	415a      	adcs	r2, r3
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	e7ee      	b.n	8007f8a <__swhatbuf_r+0x1e>
 8007fac:	2340      	movs	r3, #64	; 0x40
 8007fae:	2000      	movs	r0, #0
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	b016      	add	sp, #88	; 0x58
 8007fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fb8 <__smakebuf_r>:
 8007fb8:	898b      	ldrh	r3, [r1, #12]
 8007fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fbc:	079d      	lsls	r5, r3, #30
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	d507      	bpl.n	8007fd4 <__smakebuf_r+0x1c>
 8007fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	2301      	movs	r3, #1
 8007fce:	6163      	str	r3, [r4, #20]
 8007fd0:	b002      	add	sp, #8
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	466a      	mov	r2, sp
 8007fd6:	ab01      	add	r3, sp, #4
 8007fd8:	f7ff ffc8 	bl	8007f6c <__swhatbuf_r>
 8007fdc:	9900      	ldr	r1, [sp, #0]
 8007fde:	4605      	mov	r5, r0
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f7ff f83d 	bl	8007060 <_malloc_r>
 8007fe6:	b948      	cbnz	r0, 8007ffc <__smakebuf_r+0x44>
 8007fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fec:	059a      	lsls	r2, r3, #22
 8007fee:	d4ef      	bmi.n	8007fd0 <__smakebuf_r+0x18>
 8007ff0:	f023 0303 	bic.w	r3, r3, #3
 8007ff4:	f043 0302 	orr.w	r3, r3, #2
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	e7e3      	b.n	8007fc4 <__smakebuf_r+0xc>
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <__smakebuf_r+0x7c>)
 8007ffe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	6020      	str	r0, [r4, #0]
 8008004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	9b00      	ldr	r3, [sp, #0]
 800800c:	6120      	str	r0, [r4, #16]
 800800e:	6163      	str	r3, [r4, #20]
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	b15b      	cbz	r3, 800802c <__smakebuf_r+0x74>
 8008014:	4630      	mov	r0, r6
 8008016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800801a:	f000 f8c7 	bl	80081ac <_isatty_r>
 800801e:	b128      	cbz	r0, 800802c <__smakebuf_r+0x74>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	f043 0301 	orr.w	r3, r3, #1
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	89a0      	ldrh	r0, [r4, #12]
 800802e:	4305      	orrs	r5, r0
 8008030:	81a5      	strh	r5, [r4, #12]
 8008032:	e7cd      	b.n	8007fd0 <__smakebuf_r+0x18>
 8008034:	08007dc5 	.word	0x08007dc5

08008038 <memchr>:
 8008038:	4603      	mov	r3, r0
 800803a:	b510      	push	{r4, lr}
 800803c:	b2c9      	uxtb	r1, r1
 800803e:	4402      	add	r2, r0
 8008040:	4293      	cmp	r3, r2
 8008042:	4618      	mov	r0, r3
 8008044:	d101      	bne.n	800804a <memchr+0x12>
 8008046:	2000      	movs	r0, #0
 8008048:	e003      	b.n	8008052 <memchr+0x1a>
 800804a:	7804      	ldrb	r4, [r0, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	428c      	cmp	r4, r1
 8008050:	d1f6      	bne.n	8008040 <memchr+0x8>
 8008052:	bd10      	pop	{r4, pc}

08008054 <memmove>:
 8008054:	4288      	cmp	r0, r1
 8008056:	b510      	push	{r4, lr}
 8008058:	eb01 0402 	add.w	r4, r1, r2
 800805c:	d902      	bls.n	8008064 <memmove+0x10>
 800805e:	4284      	cmp	r4, r0
 8008060:	4623      	mov	r3, r4
 8008062:	d807      	bhi.n	8008074 <memmove+0x20>
 8008064:	1e43      	subs	r3, r0, #1
 8008066:	42a1      	cmp	r1, r4
 8008068:	d008      	beq.n	800807c <memmove+0x28>
 800806a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800806e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008072:	e7f8      	b.n	8008066 <memmove+0x12>
 8008074:	4601      	mov	r1, r0
 8008076:	4402      	add	r2, r0
 8008078:	428a      	cmp	r2, r1
 800807a:	d100      	bne.n	800807e <memmove+0x2a>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008086:	e7f7      	b.n	8008078 <memmove+0x24>

08008088 <__malloc_lock>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__malloc_lock+0x8>)
 800808a:	f7ff bf6d 	b.w	8007f68 <__retarget_lock_acquire_recursive>
 800808e:	bf00      	nop
 8008090:	20000aac 	.word	0x20000aac

08008094 <__malloc_unlock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_unlock+0x8>)
 8008096:	f7ff bf68 	b.w	8007f6a <__retarget_lock_release_recursive>
 800809a:	bf00      	nop
 800809c:	20000aac 	.word	0x20000aac

080080a0 <_realloc_r>:
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	4680      	mov	r8, r0
 80080a6:	4614      	mov	r4, r2
 80080a8:	460e      	mov	r6, r1
 80080aa:	b921      	cbnz	r1, 80080b6 <_realloc_r+0x16>
 80080ac:	4611      	mov	r1, r2
 80080ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	f7fe bfd5 	b.w	8007060 <_malloc_r>
 80080b6:	b92a      	cbnz	r2, 80080c4 <_realloc_r+0x24>
 80080b8:	f7fe ff6a 	bl	8006f90 <_free_r>
 80080bc:	4625      	mov	r5, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c4:	f000 f882 	bl	80081cc <_malloc_usable_size_r>
 80080c8:	4284      	cmp	r4, r0
 80080ca:	4607      	mov	r7, r0
 80080cc:	d802      	bhi.n	80080d4 <_realloc_r+0x34>
 80080ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080d2:	d812      	bhi.n	80080fa <_realloc_r+0x5a>
 80080d4:	4621      	mov	r1, r4
 80080d6:	4640      	mov	r0, r8
 80080d8:	f7fe ffc2 	bl	8007060 <_malloc_r>
 80080dc:	4605      	mov	r5, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	d0ed      	beq.n	80080be <_realloc_r+0x1e>
 80080e2:	42bc      	cmp	r4, r7
 80080e4:	4622      	mov	r2, r4
 80080e6:	4631      	mov	r1, r6
 80080e8:	bf28      	it	cs
 80080ea:	463a      	movcs	r2, r7
 80080ec:	f7fc fd7a 	bl	8004be4 <memcpy>
 80080f0:	4631      	mov	r1, r6
 80080f2:	4640      	mov	r0, r8
 80080f4:	f7fe ff4c 	bl	8006f90 <_free_r>
 80080f8:	e7e1      	b.n	80080be <_realloc_r+0x1e>
 80080fa:	4635      	mov	r5, r6
 80080fc:	e7df      	b.n	80080be <_realloc_r+0x1e>

080080fe <_raise_r>:
 80080fe:	291f      	cmp	r1, #31
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4604      	mov	r4, r0
 8008104:	460d      	mov	r5, r1
 8008106:	d904      	bls.n	8008112 <_raise_r+0x14>
 8008108:	2316      	movs	r3, #22
 800810a:	6003      	str	r3, [r0, #0]
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	bd38      	pop	{r3, r4, r5, pc}
 8008112:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008114:	b112      	cbz	r2, 800811c <_raise_r+0x1e>
 8008116:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800811a:	b94b      	cbnz	r3, 8008130 <_raise_r+0x32>
 800811c:	4620      	mov	r0, r4
 800811e:	f000 f831 	bl	8008184 <_getpid_r>
 8008122:	462a      	mov	r2, r5
 8008124:	4601      	mov	r1, r0
 8008126:	4620      	mov	r0, r4
 8008128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800812c:	f000 b818 	b.w	8008160 <_kill_r>
 8008130:	2b01      	cmp	r3, #1
 8008132:	d00a      	beq.n	800814a <_raise_r+0x4c>
 8008134:	1c59      	adds	r1, r3, #1
 8008136:	d103      	bne.n	8008140 <_raise_r+0x42>
 8008138:	2316      	movs	r3, #22
 800813a:	6003      	str	r3, [r0, #0]
 800813c:	2001      	movs	r0, #1
 800813e:	e7e7      	b.n	8008110 <_raise_r+0x12>
 8008140:	2400      	movs	r4, #0
 8008142:	4628      	mov	r0, r5
 8008144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008148:	4798      	blx	r3
 800814a:	2000      	movs	r0, #0
 800814c:	e7e0      	b.n	8008110 <_raise_r+0x12>
	...

08008150 <raise>:
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <raise+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f7ff bfd2 	b.w	80080fe <_raise_r>
 800815a:	bf00      	nop
 800815c:	20000034 	.word	0x20000034

08008160 <_kill_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	2300      	movs	r3, #0
 8008164:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_kill_r+0x20>)
 8008166:	4604      	mov	r4, r0
 8008168:	4608      	mov	r0, r1
 800816a:	4611      	mov	r1, r2
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	f7f9 faea 	bl	8001746 <_kill>
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	d102      	bne.n	800817c <_kill_r+0x1c>
 8008176:	682b      	ldr	r3, [r5, #0]
 8008178:	b103      	cbz	r3, 800817c <_kill_r+0x1c>
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	20000aa8 	.word	0x20000aa8

08008184 <_getpid_r>:
 8008184:	f7f9 bad8 	b.w	8001738 <_getpid>

08008188 <_fstat_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	2300      	movs	r3, #0
 800818c:	4d06      	ldr	r5, [pc, #24]	; (80081a8 <_fstat_r+0x20>)
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	4611      	mov	r1, r2
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	f7f9 fb34 	bl	8001802 <_fstat>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	d102      	bne.n	80081a4 <_fstat_r+0x1c>
 800819e:	682b      	ldr	r3, [r5, #0]
 80081a0:	b103      	cbz	r3, 80081a4 <_fstat_r+0x1c>
 80081a2:	6023      	str	r3, [r4, #0]
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
 80081a6:	bf00      	nop
 80081a8:	20000aa8 	.word	0x20000aa8

080081ac <_isatty_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	2300      	movs	r3, #0
 80081b0:	4d05      	ldr	r5, [pc, #20]	; (80081c8 <_isatty_r+0x1c>)
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	602b      	str	r3, [r5, #0]
 80081b8:	f7f9 fb32 	bl	8001820 <_isatty>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_isatty_r+0x1a>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_isatty_r+0x1a>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20000aa8 	.word	0x20000aa8

080081cc <_malloc_usable_size_r>:
 80081cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d0:	1f18      	subs	r0, r3, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfbc      	itt	lt
 80081d6:	580b      	ldrlt	r3, [r1, r0]
 80081d8:	18c0      	addlt	r0, r0, r3
 80081da:	4770      	bx	lr

080081dc <_init>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	bf00      	nop
 80081e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e2:	bc08      	pop	{r3}
 80081e4:	469e      	mov	lr, r3
 80081e6:	4770      	bx	lr

080081e8 <_fini>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	bf00      	nop
 80081ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ee:	bc08      	pop	{r3}
 80081f0:	469e      	mov	lr, r3
 80081f2:	4770      	bx	lr
